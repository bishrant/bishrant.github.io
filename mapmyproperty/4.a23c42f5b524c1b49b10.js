(function(){var e={"arcgis-js-api/layers/graphics/featureConversionUtils":"+6sX","esri/layers/graphics/featureConversionUtils":"+6sX","esri/layers/graphics/OptimizedFeature":"/COu","arcgis-js-api/layers/graphics/OptimizedFeature":"/COu","arcgis-js-api/views/2d/engine/webgl/WGLContainer":"/U66","esri/core/libs/earcut/earcut":"1E+e","arcgis-js-api/core/libs/earcut/earcut":"1E+e","arcgis-js-api/views/2d/engine/vectorTiles/decluttering/config":"2eQy","arcgis-js-api/views/2d/engine/webgl/brushes/WGLGeometryBrushMarker":"2pwJ","arcgis-js-api/views/2d/engine/webgl/brushes/WGLBrush":"3+7H","arcgis-js-api/core/libs/gl-matrix-2/factories/vec4f32":"3gjc","arcgis-js-api/views/2d/engine/webgl/brushes/WGLGeometryBrushText":"3u8V","arcgis-js-api/views/2d/engine/webgl/brushes/WGLBrushInfo":"66cO","arcgis-js-api/views/2d/engine/vectorTiles/shaders/sources/resolver":"8HLi","arcgis-js-api/views/2d/engine/webgl/brushes/WGLGeometryBrushFill":"8fgo","arcgis-js-api/views/webgl/rasterUtils":"A97r","arcgis-js-api/views/2d/engine/vectorTiles/shaders/sources/shaderRepository":"HjjH","arcgis-js-api/layers/graphics/OptimizedGeometry":"Jvs9","esri/layers/graphics/OptimizedGeometry":"Jvs9","arcgis-js-api/views/2d/engine/webgl/ClippingInfo":"NRog","arcgis-js-api/views/2d/engine/webgl/VertexStream":"Nwkb","arcgis-js-api/views/2d/engine/webgl/brushes/WGLGeometryBrush":"PDSL","arcgis-js-api/views/2d/engine/webgl/brushes/WGLBrushVTLFill":"Rpsm","arcgis-js-api/views/2d/engine/webgl/shaders/BackgroundPrograms":"TQvW","arcgis-js-api/views/2d/engine/webgl/shaders/sources/shaderRepository":"Uu9s","arcgis-js-api/views/2d/engine/webgl/brushes/BrushClip":"V5jM","arcgis-js-api/views/2d/engine/webgl/GeometryUtils":"VY6u","arcgis-js-api/views/2d/engine/webgl/brushes/WGLBrushVTLLine":"a08a","arcgis-js-api/views/2d/engine/webgl/shaders/TileInfoPrograms":"bqoF","arcgis-js-api/views/2d/engine/webgl/brushes/WGLGeometryBrushLabel":"f93k","arcgis-js-api/views/2d/engine/webgl/brushes/WGLGeometryBrushLine":"gvME","arcgis-js-api/views/2d/engine/webgl/shaders/sources/resolver":"hPTP","arcgis-js-api/views/2d/engine/brushes":"itWS","esri/core/libs/gl-matrix-2/vec4f32":"j2SP","arcgis-js-api/core/libs/gl-matrix-2/vec4f32":"j2SP","arcgis-js-api/views/2d/engine/webgl/brushes/WGLBrushVTLCircle":"jEV9","arcgis-js-api/views/2d/engine/webgl/brushes/BrushBitmap":"kmbk","arcgis-js-api/views/2d/engine/vectorTiles/shaders/Programs":"lUvf","arcgis-js-api/views/2d/engine/webgl/brushes/WGLBrushVTLBackground":"oBAw","arcgis-js-api/views/2d/engine/webgl/brushes/raster/BrushRasterBitmap":"oUUG","arcgis-js-api/views/2d/engine/webgl/brushes/WGLBrushStencil":"p2sx","arcgis-js-api/views/2d/engine/webgl/Mesh2D":"sbqO","arcgis-js-api/layers/graphics/OptimizedFeatureSet":"xJgq","esri/layers/graphics/OptimizedFeatureSet":"xJgq","arcgis-js-api/views/2d/engine/webgl/brushes/WGLBrushVTLSymbol":"zbL2"},t=this||window,n=t.webpackJsonp=t.webpackJsonp||[];n.registerAbsMids?n.registerAbsMids(e):(n.absMidsWaiting=n.absMidsWaiting||[]).push(e)})(),(window.webpackJsonp=window.webpackJsonp||[]).push([[4],{"+6sX":function(e,t,n){var i,o;i=[n.dj.c(e.i),t,n("ma1f"),n("qsST"),n("Lzvl"),n("/COu"),n("xJgq"),n("Jvs9")],void 0===(o=(function(e,t,n,i,o,r,a,l){"use strict";function s(e,t){return e?t?4:3:t?3:2}Object.defineProperty(t,"__esModule",{value:!0}),t.deltaDecodeGeometry=t.deltaEncodeGeometry=t.getQuantizedArea=t.getSignedQuantizedRingArea=t.removeCollinearVectices=t.removeZMValues=t.unquantizeOptimizedGeometry=t.getQuantizedBoundsOptimizedGeometry=t.getBoundsOptimizedGeometry=t.generalizeOptimizedGeometry=t.quantizeOptimizedGeometry=t.quantizeOptimizedFeatureSet=t.unquantizeOptimizedFeatureSet=t.convertFromFeatureSet=t.convertToFeatureSet=t.convertToFeatures=t.convertToGeometry=t.convertFromGeometry=t.convertToFeature=t.convertFromGraphics=t.convertFromFeatures=t.convertFromFeature=t.convertFromNestedArray=t.convertFromPolygon=t.convertToPolygon=t.convertFromPolyline=t.convertFromPolylineFeatures=t.convertToPolyline=t.convertFromMultipoint=t.convertFromMultipointFeatures=t.convertToMultipoint=t.convertToMultipointFeatures=t.convertFromPoint=t.convertFromPointFeatures=t.convertToPoint=t.unquantizeY=t.unquantizeX=t.quantizeY=t.quantizeX=void 0;var u=i.getLogger("esri.tasks.support.optimizedFeatureSet"),c={esriGeometryPoint:0,esriGeometryPolyline:2,esriGeometryPolygon:3,esriGeometryMultipoint:0},f=function(e,t,n,i,o,r){e[n]=o,e[n+1]=r},d=function(e,t,n,i,o,r){e[n]=o,e[n+1]=r,e[n+2]=t[i+2]},v=function(e,t,n,i,o,r){e[n]=o,e[n+1]=r,e[n+2]=t[i+3]},_=function(e,t,n,i,o,r){e[n]=o,e[n+1]=r,e[n+2]=t[i+2],e[n+3]=t[i+3]};function m(e,t,n,i){if(e){if(n)return t&&i?_:d;if(t&&i)return v}else if(t&&i)return d;return f}function p(e,t){return Math.round((t-e.translate[0])/e.scale[0])}function g(e,t){return Math.round((e.translate[1]-t)/e.scale[1])}function h(e,t){return t*e.scale[0]+e.translate[0]}function x(e,t){return e.translate[1]-t*e.scale[1]}function y(e){var t=e.coords;return{x:t[0],y:t[1]}}function b(e,t){return e.coords[0]=t.x,e.coords[1]=t.y,e}function T(e){var t=e.coords;return{x:t[0],y:t[1],z:t[2]}}function C(e,t){return e.coords[0]=t.x,e.coords[1]=t.y,e.coords[2]=t.z,e}function S(e){var t=e.coords;return{x:t[0],y:t[1],m:t[2]}}function D(e,t){return e.coords[0]=t.x,e.coords[1]=t.y,e.coords[2]=t.m,e}function I(e){var t=e.coords;return{x:t[0],y:t[1],z:t[2],m:t[3]}}function P(e,t){return e.coords[0]=t.x,e.coords[1]=t.y,e.coords[2]=t.z,e.coords[3]=t.m,e}function w(e,t){return e&&t?P:e?C:t?D:b}function z(e,t,n,i,o){for(var a=w(n,i),s=0,u=t;s<u.length;s++){var c=u[s],f=c.geometry,d=c.attributes,v=void 0;f&&(v=a(new l.default,f)),e.push(new r.default(v,d,null,d[o]))}return e}function O(e,t,n,i){for(var o=0,r=t;o<r.length;o++){var a=r[o],l=a.geometry,s=a.attributes,u=void 0;l&&(u=V(l,n,i)),e.push({attributes:s,geometry:u})}return e}function V(e,t,n){if(!e)return null;for(var i=s(t,n),o=[],r=0;r<e.coords.length;r+=i){for(var a=[],l=0;l<i;l++)a.push(e.coords[r+l]);o.push(a)}return t?n?{points:o,hasZ:t,hasM:n}:{points:o,hasZ:t}:n?{points:o,hasM:n}:{points:o}}function M(e,t,n,i,o){for(var a=s(n,i),u=0,c=t;u<c.length;u++){var f=c[u],d=f.geometry,v=f.attributes,_=void 0;d&&(_=E(new l.default,d,a)),e.push(new r.default(_,v,null,v[o]))}return e}function E(e,t,n){void 0===n&&(n=s(t.hasZ,t.hasM)),e.lengths[0]=t.points.length;for(var i=e.coords,o=0,r=0,a=t.points;r<a.length;r++)for(var l=a[r],u=0;u<n;u++)i[o++]=l[u];return e}function A(e,t,n){if(!e)return null;for(var i=s(t,n),o=e.coords,r=[],a=0,l=0,u=e.lengths;l<u.length;l++){for(var c=u[l],f=[],d=0;d<c;d++){for(var v=[],_=0;_<i;_++)v.push(o[a++]);f.push(v)}r.push(f)}return t?n?{paths:r,hasZ:t,hasM:n}:{paths:r,hasZ:t}:n?{paths:r,hasM:n}:{paths:r}}function F(e,t,n,i,o){for(var a=s(n,i),u=0,c=t;u<c.length;u++){var f=c[u],d=f.geometry,v=f.attributes,_=void 0;d&&(_=L(new l.default,d,a)),e.push(new r.default(_,v,null,v[o]))}return e}function L(e,t,n){void 0===n&&(n=s(t.hasZ,t.hasM));for(var i=e.lengths,o=e.coords,r=0,a=0,l=t.paths;a<l.length;a++){for(var u=l[a],c=0,f=u;c<f.length;c++)for(var d=f[c],v=0;v<n;v++)o[r++]=d[v];i.push(u.length)}return e}function U(e,t,n){if(!e)return null;for(var i=s(t,n),o=e.coords,r=[],a=0,l=0,u=e.lengths;l<u.length;l++){for(var c=u[l],f=[],d=0;d<c;d++){for(var v=[],_=0;_<i;_++)v.push(o[a++]);f.push(v)}r.push(f)}return t?n?{rings:r,hasZ:t,hasM:n}:{rings:r,hasZ:t}:n?{rings:r,hasM:n}:{rings:r}}function R(e,t,n,i,o){for(var a=0,s=t;a<s.length;a++){var u=s[a],c=u.geometry,f=u.centroid,d=u.attributes,v=void 0;c&&(v=N(new l.default,c,n,i)),e.push(new r.default(v,d,f?b(new l.default,f):null,d[o]))}return e}function N(e,t,n,i){return void 0===n&&(n=t.hasZ),void 0===i&&(i=t.hasM),G(e,t.rings,n,i),e}function G(e,t,n,i){var o=s(n,i),r=e.lengths,a=e.coords,l=0;r.length=a.length=0;for(var u=0,c=t;u<c.length;u++){for(var f=c[u],d=0,v=f;d<v.length;d++)for(var _=v[d],m=0;m<o;m++)a[l++]=_[m];r.push(f.length)}return e}t.quantizeX=p,t.quantizeY=g,t.unquantizeX=h,t.unquantizeY=x,t.convertToPoint=function(e,t,n){return e?t?n?I(e):T(e):n?S(e):y(e):null},t.convertFromPointFeatures=z,t.convertFromPoint=function(e,t,n){return void 0===n&&(n=w(null!=t.z,null!=t.m)),n(e,t)},t.convertToMultipointFeatures=O,t.convertToMultipoint=V,t.convertFromMultipointFeatures=M,t.convertFromMultipoint=E,t.convertToPolyline=A,t.convertFromPolylineFeatures=F,t.convertFromPolyline=L,t.convertToPolygon=U,t.convertFromPolygon=N,t.convertFromNestedArray=G;var B=[],k=[];function j(e,t,i,o,a,l){if(e.length=0,!i){for(var s=0,c=t;s<c.length;s++){var f=c[s];e.push(new r.default(null,f.attributes,null,f.attributes[l]))}return e}switch(i){case"esriGeometryPoint":return z(e,t,o,a,l);case"esriGeometryMultipoint":return M(e,t,o,a,l);case"esriGeometryPolyline":return F(e,t,o,a,l);case"esriGeometryPolygon":return R(e,t,o,a,l);default:u.error("convertToFeatureSet:unknown-geometry",new n("Unable to parse unknown geometry type '"+i+"'")),e.length=0}return e}function W(e,t,i,o){var r=e&&("coords"in e?e:e.geometry);if(!r)return null;switch(t){case"esriGeometryPoint":var a=y;return i&&o?a=I:i?a=T:o&&(a=S),a(r);case"esriGeometryMultipoint":return V(r,i,o);case"esriGeometryPolyline":return A(r,i,o);case"esriGeometryPolygon":return U(r,i,o);default:return void u.error("convertToGeometry:unknown-geometry",new n("Unable to parse unknown geometry type '"+t+"'"))}}function H(e,t,i,o,r){switch(e.length=0,i){case"esriGeometryPoint":return function(e,t,n,i){var o=y;n&&i?o=I:n?o=T:i&&(o=S);for(var r=0,a=t;r<a.length;r++){var l=a[r],s=l.geometry,u=l.attributes,c=s?o(s):null;e.push({attributes:u,geometry:c})}return e}(e,t,o,r);case"esriGeometryMultipoint":return O(e,t,o,r);case"esriGeometryPolyline":return function(e,t,n,i){for(var o=0,r=t;o<r.length;o++){var a=r[o],l=a.geometry,s=a.attributes,u=void 0;l&&(u=A(l,n,i)),e.push({attributes:s,geometry:u})}return e}(e,t,o,r);case"esriGeometryPolygon":return function(e,t,n,i){for(var o=0,r=t;o<r.length;o++){var a=r[o],l=a.geometry,s=a.attributes,u=a.centroid,c=void 0;if(l&&(c=U(l,n,i)),u){var f=y(u);e.push({attributes:s,centroid:f,geometry:c})}else e.push({attributes:s,geometry:c})}return e}(e,t,o,r);default:u.error("convertToFeatureSet:unknown-geometry",new n("Unable to parse unknown geometry type '"+i+"'"))}return e}function Z(e,t,n,i,o,r,a,l){if(void 0===a&&(a=n),void 0===l&&(l=i),e.lengths.length&&(e.lengths.length=0),e.coords.length&&(e.coords.length=0),!t||!t.coords.length)return null;var u,f,d,v,_=c[o],h=t.coords,x=t.lengths,y=s(n,i),b=s(n&&a,i&&l),T=m(n,i,a,l);if(!x.length)return T(e.coords,h,0,0,p(r,h[0]),g(r,h[1])),e.lengths.length&&(e.lengths.length=0),e.coords.length=y,e;for(var C=0,S=0,D=S,I=0,P=x;I<P.length;I++){var w=P[I];if(!(w<_)){var z=0;S=D,d=u=p(r,h[C]),v=f=g(r,h[C+1]),T(e.coords,h,S,C,d,v),z++,C+=y,S+=b;for(var O=1;O<w;O++,C+=y)d=p(r,h[C]),v=g(r,h[C+1]),d===u&&v===f||(T(e.coords,h,S,C,d-u,v-f),S+=b,z++,u=d,f=v);z>=_&&(e.lengths.push(z),D=S)}}return e.coords.length=D,e.coords.length?e:null}function Y(e,t,n,i){var o=e[t],r=e[t+1],a=e[i],l=e[i+1],s=e[n],u=e[n+1],c=a-s,f=l-u;if(0!==c||0!==f){var d=((o-s)*c+(r-u)*f)/(c*c+f*f);d>1?(s=a,u=l):d>0&&(s+=c*d,u+=f*d)}return(c=o-s)*c+(f=r-u)*f}function q(e,t,n,i,o,r,a){for(var l,s=i,u=0,c=r+n;c<a;c+=n)(l=Y(t,c,r,a))>s&&(u=c,s=l);s>i&&(u-r>n&&q(e,t,n,i,o,r,u),o(e,t,e.length,u,t[u],t[u+1]),a-u>n&&q(e,t,n,i,o,u,a))}function X(e,t,n,i,o){var r=t.coords,a=t.lengths,l=n?i?_:d:i?d:f,u=s(n,i);if(!r.length)return e!==t&&(e.lengths.length=0,e.coords.length=0),e;if(!a.length)return l(e.coords,r,0,0,h(o,r[0]),x(o,r[1])),e!==t&&(e.lengths.length=0,e.coords.length=u),e;for(var c=o.scale,v=c[0],m=c[1],p=0,g=0;g<a.length;g++){var y=a[g];e.lengths[g]=y;var b=h(o,r[p]),T=x(o,r[p+1]);l(e.coords,r,p,p,b,T),p+=u;for(var C=1;C<y;C++,p+=u)l(e.coords,r,p,p,b+=r[p]*v,T-=r[p+1]*m)}return e!==t&&(e.lengths.length=a.length,e.coords.length=r.length),e}function J(e,t,n,i){for(var o=0,r=e[i*t],a=e[i*(t+1)],l=1;l<n;l++){var s=r+e[i*(t+l)],u=a+e[i*(t+l)+1],c=(s-r)*(u+a);r=s,a=u,o+=c}return.5*o}t.convertFromFeature=function(e,t,n,i,o){B[0]=e;var r=j(k,B,t,n,i,o)[0];return B.length=k.length=0,r},t.convertFromFeatures=j,t.convertFromGraphics=function(e,t,i,o,r,a){var l=e.length;switch(i){case"esriGeometryPoint":z(e,t,o,r,a);break;case"esriGeometryMultipoint":M(e,t,o,r,a);break;case"esriGeometryPolyline":F(e,t,o,r,a);break;case"esriGeometryPolygon":R(e,t,o,r,a);break;default:u.error("convertToFeatureSet:unknown-geometry",new n("Unable to parse unknown geometry type '"+i+"'"))}for(var s=0;s<t.length;s++)e[s+l].geometryType=i,e[s+l].insertAfter=t[s].insertAfter,e[s+l].groupId=t[s].groupId;return e},t.convertToFeature=function(e,t,n,i){k[0]=e,H(B,k,t,n,i);var o=B[0];return B.length=k.length=0,o},t.convertFromGeometry=function(e,t,i){if(!e)return null;var r=new l.default;return"hasZ"in e&&null==t&&(t=e.hasZ),"hasM"in e&&null==i&&(i=e.hasM),o.isPoint(e)?w(null!=t?t:null!=e.z,null!=i?i:null!=e.m)(r,e):o.isPolygon(e)?N(r,e,t,i):o.isPolyline(e)?L(r,e,s(t,i)):o.isMultipoint(e)?E(r,e,s(t,i)):void u.error("convertFromGeometry:unknown-geometry",new n("Unable to parse unknown geometry type '"+e+"'"))},t.convertToGeometry=W,t.convertToFeatures=H,t.convertToFeatureSet=function(e){var t=e.objectIdFieldName,n=e.spatialReference,i=e.transform,o=e.fields,r=e.hasM,a=e.hasZ,l=e.geometryType,s=e.exceededTransferLimit,u=e.uniqueIdField,c=e.queryGeometry,f=e.queryGeometryType,d={features:H([],e.features,l,a,r),fields:o,geometryType:l,objectIdFieldName:t,spatialReference:n,uniqueIdField:u,queryGeometry:W(c,f,!1,!1)};return i&&(d.transform=i),s&&(d.exceededTransferLimit=s),r&&(d.hasM=r),a&&(d.hasZ=a),d},t.convertFromFeatureSet=function(e,t){var i=new a.default,o=e.hasM,r=e.hasZ,l=e.features,s=e.objectIdFieldName,c=e.spatialReference,f=e.geometryType,d=e.exceededTransferLimit,v=e.transform,_=e.fields;return _&&(i.fields=_),i.geometryType=f,i.objectIdFieldName=s||t,i.spatialReference=c,i.objectIdFieldName?(l&&j(i.features,l,f,r,o,i.objectIdFieldName),d&&(i.exceededTransferLimit=d),o&&(i.hasM=o),r&&(i.hasZ=r),v&&(i.transform=v),i):(u.error(new n("optimized-features:invalid-objectIdFieldName","objectIdFieldName is missing")),i)},t.unquantizeOptimizedFeatureSet=function(e){var t=e.transform,n=e.hasM,i=e.hasZ;if(!t)return e;for(var o=0,r=e.features;o<r.length;o++){var a=r[o];a.geometry&&X(a.geometry,a.geometry,n,i,t),a.centroid&&X(a.centroid,a.centroid,n,i,t)}return e.transform=null,e},t.quantizeOptimizedFeatureSet=function(e,t){var n=t.geometryType,i=t.features,o=t.hasM,r=t.hasZ;if(!e)return t;for(var a=0;a<i.length;a++){var s=i[a],u=s.weakClone();u.geometry=new l.default,Z(u.geometry,s.geometry,o,r,n,e),s.centroid&&(u.centroid=new l.default,Z(u.centroid,s.centroid,o,r,"esriGeometryPoint",e)),i[a]=u}return t.transform=e,t},t.quantizeOptimizedGeometry=Z,t.generalizeOptimizedGeometry=function(e,t,n,i,o,r,a,l){if(void 0===a&&(a=n),void 0===l&&(l=i),e.lengths.length&&(e.lengths.length=0),e.coords.length&&(e.coords.length=0),!t||!t.coords.length)return null;var u=c[o],f=t.coords,d=t.lengths,v=s(n,i),_=s(n&&a,i&&l),p=m(n,i,a,l);if(!d.length)return p(e.coords,f,0,0,f[0],f[1]),e.lengths.length&&(e.lengths.length=0),e.coords.length=v,e;for(var g=0,h=r*r,x=0,y=d;x<y.length;x++){var b=y[x];if(b<u)g+=b*v;else{var T=e.coords.length/_,C=g,S=g+(b-1)*v;p(e.coords,f,e.coords.length,C,f[C],f[C+1]),q(e.coords,f,v,h,p,C,S),p(e.coords,f,e.coords.length,S,f[S],f[S+1]);var D=e.coords.length/_-T;D>=u?e.lengths.push(D):e.coords.length=T*_,g+=b*v}}return e.coords.length?e:null},t.getBoundsOptimizedGeometry=function(e,t,n,i){if(!t||!t.coords||!t.coords.length)return null;var o=s(n,i),r=Number.POSITIVE_INFINITY,a=Number.POSITIVE_INFINITY,l=Number.NEGATIVE_INFINITY,u=Number.NEGATIVE_INFINITY;if(t&&t.coords)for(var c=t.coords,f=0;f<c.length;f+=o){var d=c[f],v=c[f+1];r=Math.min(r,d),l=Math.max(l,d),a=Math.min(a,v),u=Math.max(u,v)}return e[0]=r,e[1]=a,e[2]=l,e[3]=u,e},t.getQuantizedBoundsOptimizedGeometry=function(e,t,n,i){for(var o=s(n,i),r=t.coords,a=Number.POSITIVE_INFINITY,l=Number.POSITIVE_INFINITY,u=Number.NEGATIVE_INFINITY,c=Number.NEGATIVE_INFINITY,f=0,d=0,v=t.lengths;d<v.length;d++){var _=v[d],m=r[f],p=r[f+1];a=Math.min(m,a),l=Math.min(p,l),u=Math.max(m,u),c=Math.max(p,c),f+=o;for(var g=1;g<_;g++,f+=o){var h=r[f],x=r[f+1];m+=h,p+=x,h<0&&(a=Math.min(a,m)),h>0&&(u=Math.max(u,m)),x<0?l=Math.min(l,p):x>0&&(c=Math.max(c,p))}}return e[0]=a,e[1]=l,e[2]=u,e[3]=c,e},t.unquantizeOptimizedGeometry=X,t.removeZMValues=function(e,t,n,i,o,r){var a,l=s(n,i),u=m(n,i,o,r),c=t.coords;e.coords.length=0,e.lengths.length=0,(a=e.lengths).push.apply(a,t.lengths);for(var f=0;f<c.length;f+=l)u(e.coords,c,e.coords.length,f,c[f],c[f+1]);return e},t.removeCollinearVectices=function(e,t,n,i,o){if(!t||!t.coords||!t.coords.length)return null;for(var r=c[n],a=t.coords,l=t.lengths,u=m(i,o,i,o),f=s(i,o),d=0,v=0,_=0,p=0,g=0,h=l;g<h.length;g++){var x=h[g];u(e.coords,a,v=p,d,a[d],a[d+1]);var y=a[d+=f],b=a[d+1],T=y,C=b,S=b/y;u(e.coords,a,v+=f,d,T,C),d+=f;for(var D=2;D<x;D++){var I=(b=a[d+1])/(y=a[d]),P=S===I||!isFinite(S)&&!isFinite(I),w=P&&isFinite(I)?S>=0&&I>=0||S<=0&&I<=0:C>=0&&b>=0||C<=0&&b<=0;P&&w?(T+=y,C+=b):(T=y,C=b,v+=f),u(e.coords,a,v,d,T,C),d+=f,S=I}var z=((v+=f)-p)/f;z>=r&&(e.lengths[_]=z,p=v,_++)}return e.coords.length>p&&(e.coords.length=p),e.lengths.length>_&&(e.lengths.length=_),e.coords.length&&e.lengths.length?e:null},t.getSignedQuantizedRingArea=J,t.getQuantizedArea=function(e,t){for(var n=e.coords,i=e.lengths,o=0,r=0,a=0;a<i.length;a++)r+=J(n,o,i[a],t),o+=a;return Math.abs(r)},t.deltaEncodeGeometry=function(e,t){for(var n=e.clone(),i=e.coords,o=e.lengths,r=0,a=0;a<o.length;a++){for(var l=o[a],s=i[t*r],u=i[t*r+1],c=1;c<l;c++){var f=i[t*(r+c)],d=i[t*(r+c)+1],v=d-u;n.coords[t*(r+c)]=f-s,n.coords[t*(r+c)+1]=v,s=f,u=d}r+=l}return n},t.deltaDecodeGeometry=function(e,t){for(var n=e.clone(),i=e.coords,o=e.lengths,r=0,a=0;a<o.length;a++){for(var l=o[a],s=i[t*r],u=i[t*r+1],c=1;c<l;c++){var f=s+i[t*(r+c)],d=u+i[t*(r+c)+1];n.coords[t*(r+c)]=f,n.coords[t*(r+c)+1]=d,s=f,u=d}r+=l}return n}}).apply(null,i))||(e.exports=o)},"/COu":function(e,t,n){var i,o;i=[n.dj.c(e.i),t],void 0===(o=(function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=function(){function e(e,t,n,i){void 0===e&&(e=null),void 0===t&&(t={}),this.displayId=0,this.geohashIndexed=!1,this.geohashX=0,this.geohashY=0,this.geometry=e,t&&(this.attributes=t),n&&(this.centroid=n),null!=i&&(this.objectId=i)}return Object.defineProperty(e.prototype,"hasGeometry",{get:function(){return!(!this.geometry||!this.geometry.coords||!this.geometry.coords.length)},enumerable:!1,configurable:!0}),e.prototype.weakClone=function(){var t=new e(this.geometry,this.attributes,this.centroid,this.objectId);return t.displayId=this.displayId,t.geohashIndexed=this.geohashIndexed,t.geohashX=this.geohashX,t.geohashY=this.geohashY,t},e}();t.default=n}).apply(null,i))||(e.exports=o)},"/U66":function(e,t,n){var i,o;i=[n.dj.c(e.i),t,n("zOht"),n("H1tY"),n("LxLY"),n("itWS"),n("1Mg+"),n("NRog"),n("JNkf")],void 0===(o=(function(e,t,n,i,o,r,a,l,s){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var u=function(e){function t(){var t=null!==e&&e.apply(this,arguments)||this;return t.name=t.constructor.name,t}return n.__extends(t,e),Object.defineProperty(t.prototype,"clips",{set:function(e){this._clips=e,this.children.forEach((function(t){return t.clips=e})),this._updateClippingInfo()},enumerable:!1,configurable:!0}),t.prototype.doRender=function(e){this.updateTransitionProperties(e.deltaTime);var t=this.createRenderParams(e),n=t.painter,i=t.profiler,o=t.drawPhase===s.WGLDrawPhase.LABEL?1:t.globalOpacity*this.computedOpacity;i.recordContainerStart(this.name),n.beforeRenderLayer(t,this._clippingInfos?255:0,o),this.updateTransforms(e.state),this.renderChildren(t),n.compositeLayer(t,o),i.recordContainerEnd()},t.prototype.renderChildren=function(e){o.isNone(this._renderPasses)&&(this._renderPasses=this.prepareRenderPasses(e.painter));for(var t=0,n=this._renderPasses;t<n.length;t++){var r=n[t];try{r.render(e)}catch(e){i("esri-2d-debug")&&console.debug("Encountered an error while rendering",e)}}},t.prototype.createRenderParams=function(e){return e},t.prototype.prepareRenderPasses=function(e){var t=this;return[e.registerRenderPass({name:"clip",brushes:[r.brushes.clip],target:function(){return t._clippingInfos},drawPhase:s.WGLDrawPhase.MAP|s.WGLDrawPhase.LABEL|s.WGLDrawPhase.LABEL_ALPHA|s.WGLDrawPhase.DEBUG})]},t.prototype.updateTransforms=function(e){for(var t=0,n=this.children;t<n.length;t++)n[t].setTransform(e)},t.prototype.onAttach=function(){e.prototype.onAttach.call(this),this._updateClippingInfo()},t.prototype.onDetach=function(){e.prototype.onDetach.call(this),this._updateClippingInfo()},t.prototype._updateClippingInfo=function(){var e=this;if(o.isSome(this._clippingInfos)&&(this._clippingInfos.forEach((function(e){return e.destroy()})),this._clippingInfos=null),this.stage){var t=this._clips;o.isSome(t)&&t.length&&(this._clippingInfos=t.items.map((function(t){return l.default.fromClipArea(e.stage,t)}))),this.requestRender()}},t}(a.Container);t.default=u}).apply(null,i))||(e.exports=o)},"1E+e":function(e,t,n){var i,o;i=[n.dj.c(e.i),t],void 0===(o=(function(e,t){"use strict";function n(e,t,n,i,o){var r;if(o===v(e,t,n,i)>0)for(var a=t;a<n;a+=i)r=l(a,e[a],e[a+1],r);else for(a=n-i;a>=t;a-=i)r=l(a,e[a],e[a+1],r);return r&&g(r,r.next)&&(s(r),r=r.next),r}function i(e,t){if(void 0===t&&(t=e),!e)return e;var n,i=e;do{if(n=!1,i.steiner||!g(i,i.next)&&0!==f(i.prev,i,i.next))i=i.next;else{if(s(i),(i=t=i.prev)===i.next)break;n=!0}}while(n||i!==t);return t}function o(e,t,n,l,u,c,f){if(void 0===f&&(f=0),e){!f&&c&&(e=function e(t,n,i,o){for(var r=void 0;r!==t;r=r.next){if(null===(r=r||t).z&&(r.z=p(r.x,r.y,n,i,o)),r.prev.next!==r||r.next.prev!==r)return r.prev.next=r,r.next.prev=r,e(t,n,i,o);r.prevZ=r.prev,r.nextZ=r.next}return t.prevZ.nextZ=null,t.prevZ=null,function(e){for(var t,n=1;;){var i=e,o=void 0;e=null,t=null;for(var r=0;i;){r++,o=i;for(var a=0;a<n&&o;a++)o=o.nextZ;for(var l=n;a>0||l>0&&o;){var s=void 0;0===a?(s=o,o=o.nextZ,l--):0!==l&&o?i.z<=o.z?(s=i,i=i.nextZ,a--):(s=o,o=o.nextZ,l--):(s=i,i=i.nextZ,a--),t?t.nextZ=s:e=s,s.prevZ=t,t=s}i=o}if(t.nextZ=null,n*=2,r<2)return e}}(t)}(e,l,u,c));for(var d=e;e.prev!==e.next;){var v=e.prev,_=e.next;if(c?a(e,l,u,c):r(e))t.push(v.index/n),t.push(e.index/n),t.push(_.index/n),s(e),e=_.next,d=_.next;else if((e=_)===d){f?1===f?o(e=x(e,t,n),t,n,l,u,c,2):2===f&&y(e,t,n,l,u,c):o(i(e),t,n,l,u,c,1);break}}}}function r(e){var t=e.prev,n=e,i=e.next;if(f(t,n,i)>=0)return!1;for(var o=e.next.next,r=o,a=0;o!==e.prev&&(0===a||o!==r);){if(a++,_(t.x,t.y,n.x,n.y,i.x,i.y,o.x,o.y)&&f(o.prev,o,o.next)>=0)return!1;o=o.next}return!0}function a(e,t,n,i){var o=e.prev,r=e,a=e.next;if(f(o,r,a)>=0)return!1;for(var l=o.x>r.x?o.x>a.x?o.x:a.x:r.x>a.x?r.x:a.x,s=o.y>r.y?o.y>a.y?o.y:a.y:r.y>a.y?r.y:a.y,u=p(o.x<r.x?o.x<a.x?o.x:a.x:r.x<a.x?r.x:a.x,o.y<r.y?o.y<a.y?o.y:a.y:r.y<a.y?r.y:a.y,t,n,i),c=p(l,s,t,n,i),d=e.prevZ,v=e.nextZ;d&&d.z>=u&&v&&v.z<=c;){if(d!==e.prev&&d!==e.next&&_(o.x,o.y,r.x,r.y,a.x,a.y,d.x,d.y)&&f(d.prev,d,d.next)>=0)return!1;if(d=d.prevZ,v!==e.prev&&v!==e.next&&_(o.x,o.y,r.x,r.y,a.x,a.y,v.x,v.y)&&f(v.prev,v,v.next)>=0)return!1;v=v.nextZ}for(;d&&d.z>=u;){if(d!==e.prev&&d!==e.next&&_(o.x,o.y,r.x,r.y,a.x,a.y,d.x,d.y)&&f(d.prev,d,d.next)>=0)return!1;d=d.prevZ}for(;v&&v.z<=c;){if(v!==e.prev&&v!==e.next&&_(o.x,o.y,r.x,r.y,a.x,a.y,v.x,v.y)&&f(v.prev,v,v.next)>=0)return!1;v=v.nextZ}return!0}function l(e,t,n,i){var o=new C(e,t,n);return i?(o.next=i.next,o.prev=i,i.next.prev=o,i.next=o):(o.prev=o,o.next=o),o}function s(e){e.next.prev=e.prev,e.prev.next=e.next,e.prevZ&&(e.prevZ.nextZ=e.nextZ),e.nextZ&&(e.nextZ.prevZ=e.prevZ)}function u(e){var t=e,n=e;do{(t.x<n.x||t.x===n.x&&t.y<n.y)&&(n=t),t=t.next}while(t!==e);return n}function c(e,t){if(t=function(e,t){var n,i=t,o=e.x,r=e.y,a=-1/0;do{if(r<=i.y&&r>=i.next.y&&i.next.y!==i.y){var l=i.x+(r-i.y)*(i.next.x-i.x)/(i.next.y-i.y);if(l<=o&&l>a){if(a=l,l===o){if(r===i.y)return i;if(r===i.next.y)return i.next}n=i.x<i.next.x?i:i.next}}i=i.next}while(i!==t);if(!n)return null;if(o===a)return n.prev;var s,u=n,c=n.x,f=n.y,d=1/0;for(i=n.next;i!==u;)o>=i.x&&i.x>=c&&o!==i.x&&_(r<f?o:a,r,c,f,r<f?a:o,r,i.x,i.y)&&((s=Math.abs(r-i.y)/(o-i.x))<d||s===d&&i.x>n.x)&&m(i,e)&&(n=i,d=s),i=i.next;return n}(e,t)){var n=T(t,e);i(n,n.next)}}function f(e,t,n){return(t.y-e.y)*(n.x-t.x)-(t.x-e.x)*(n.y-t.y)}function d(e,t,n,i){return!!(g(e,t)&&g(n,i)||g(e,i)&&g(n,t))||f(e,t,n)>0!=f(e,t,i)>0&&f(n,i,e)>0!=f(n,i,t)>0}function v(e,t,n,i){for(var o=0,r=t,a=n-i;r<n;r+=i)o+=(e[a]-e[r])*(e[r+1]+e[a+1]),a=r;return o}function _(e,t,n,i,o,r,a,l){return(o-a)*(t-l)-(e-a)*(r-l)>=0&&(e-a)*(i-l)-(n-a)*(t-l)>=0&&(n-a)*(r-l)-(o-a)*(i-l)>=0}function m(e,t){return f(e.prev,e,e.next)<0?f(e,t,e.next)>=0&&f(e,e.prev,t)>=0:f(e,t,e.prev)<0||f(e,e.next,t)<0}function p(e,t,n,i,o){return(e=1431655765&((e=858993459&((e=252645135&((e=16711935&((e=32767*(e-n)*o)|e<<8))|e<<4))|e<<2))|e<<1))|(t=1431655765&((t=858993459&((t=252645135&((t=16711935&((t=32767*(t-i)*o)|t<<8))|t<<4))|t<<2))|t<<1))<<1}function g(e,t){return e.x===t.x&&e.y===t.y}function h(e,t){return e.x-t.x}function x(e,t,n){var i=e;do{var o=i.prev,r=i.next.next;!g(o,r)&&d(o,i,i.next,r)&&m(o,r)&&m(r,o)&&(t.push(o.index/n),t.push(i.index/n),t.push(r.index/n),s(i),s(i.next),i=e=r),i=i.next}while(i!==e);return i}function y(e,t,n,r,a,l){var s=e;do{for(var u=s.next.next;u!==s.prev;){if(s.index!==u.index&&b(s,u)){var c=T(s,u);return s=i(s,s.next),c=i(c,c.next),o(s,t,n,r,a,l),void o(c,t,n,r,a,l)}u=u.next}s=s.next}while(s!==e)}function b(e,t){return e.next.index!==t.index&&e.prev.index!==t.index&&!function(e,t){var n=e;do{if(n.index!==e.index&&n.next.index!==e.index&&n.index!==t.index&&n.next.index!==t.index&&d(n,n.next,e,t))return!0;n=n.next}while(n!==e);return!1}(e,t)&&m(e,t)&&m(t,e)&&function(e,t){var n=e,i=!1,o=(e.x+t.x)/2,r=(e.y+t.y)/2;do{n.y>r!=n.next.y>r&&n.next.y!==n.y&&o<(n.next.x-n.x)*(r-n.y)/(n.next.y-n.y)+n.x&&(i=!i),n=n.next}while(n!==e);return i}(e,t)}function T(e,t){var n=new C(e.index,e.x,e.y),i=new C(t.index,t.x,t.y),o=e.next,r=t.prev;return e.next=t,t.prev=e,n.next=o,o.prev=n,i.next=n,n.prev=i,r.next=i,i.prev=r,i}Object.defineProperty(t,"__esModule",{value:!0}),t.deviation=t.earcut=void 0,t.earcut=function(e,t,r){var a,l,s,f,d,v=t&&t.length,_=v?t[0]*r:e.length,m=n(e,0,_,r,!0),p=new Array;if(!m||m.next===m.prev)return p;if(v&&(m=function(e,t,o,r){for(var a=new Array,l=0,s=t.length;l<s;l++){var f=n(e,t[l]*r,l<s-1?t[l+1]*r:e.length,r,!1);f===f.next&&(f.steiner=!0),a.push(u(f))}a.sort(h);for(var d=0,v=a;d<v.length;d++)c(v[d],o),o=i(o,o.next);return o}(e,t,m,r)),e.length>80*r){a=s=e[0],l=f=e[1];for(var g=r;g<_;g+=r){var x=e[g],y=e[g+1];a=Math.min(a,x),l=Math.min(l,y),s=Math.max(s,x),f=Math.max(f,y)}d=0!==(d=Math.max(s-a,f-l))?1/d:0}return o(m,p,r,a,l,d),p},t.deviation=function(e,t,n,i){var o=t&&t.length,r=Math.abs(v(e,0,o?t[0]*n:e.length,n));if(o)for(var a=0,l=t.length;a<l;a++)r-=Math.abs(v(e,t[a]*n,a<l-1?t[a+1]*n:e.length,n));var s=0;for(a=0;a<i.length;a+=3){var u=i[a]*n,c=i[a+1]*n,f=i[a+2]*n;s+=Math.abs((e[u]-e[f])*(e[c+1]-e[u+1])-(e[u]-e[c])*(e[f+1]-e[u+1]))}return 0===r&&0===s?0:Math.abs((s-r)/r)};var C=function(e,t,n){this.index=e,this.x=t,this.y=n,this.prev=null,this.next=null,this.z=null,this.prevZ=null,this.nextZ=null,this.steiner=!1}}).apply(null,i))||(e.exports=o)},"2eQy":function(e,t,n){var i,o;i=[n.dj.c(e.i),t],void 0===(o=(function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.FADE_DURATION=t.DECLUTTER_BUDGET=t.COLLISION_GRID_CELL_SIZE=t.DECLUTTER_TILES=void 0,t.DECLUTTER_TILES=!0,t.COLLISION_GRID_CELL_SIZE=32,t.DECLUTTER_BUDGET=1.5,t.FADE_DURATION=200}).apply(null,i))||(e.exports=o)},"2pwJ":function(e,t,n){var i,o;i=[n.dj.c(e.i),t,n("zOht"),n("JNkf"),n("apbF"),n("PDSL"),n("m87x")],void 0===(o=(function(e,t,n,i,o,r,a){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var l=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return n.__extends(t,e),t.prototype.dispose=function(){},t.prototype.getGeometryType=function(){return i.WGLGeometryType.MARKER},t.prototype.drawGeometry=function(e,t,n,i,r){var l=e.context,s=e.painter,u=e.rendererInfo,c=e.state,f=n.indexCount,d=n.indexFrom,v=a.MarkerMaterialKey.load(n.materialKey),_=function(e){return o.createProgramDescriptor(e.data,{geometry:[{location:0,name:"a_pos",count:2,type:5122},{location:1,name:"a_vertexOffset",count:2,type:5122},{location:2,name:"a_texCoords",count:2,type:5123},{location:3,name:"a_bitSetAndDistRatio",count:4,type:5121},{location:4,name:"a_id",count:4,type:5121},{location:5,name:"a_color",count:4,type:5121,normalized:!0},{location:6,name:"a_outlineColor",count:4,type:5121,normalized:!0},{location:7,name:"a_sizeAndOutlineWidth",count:4,type:5121}]})}(v),m=_.bufferLayouts,p=_.attributes,g=s.materialManager.getMaterialProgram(e,v,"materials/icon",p,r),h=this._getVAO(l,m,p,i);if(l.bindProgram(g),l.bindVAO(h),v.textureBinding&&s.textureManager.bindTextures(l,g,v),this._setSharedUniforms(g,e,t),g.setUniformMatrix3fv("u_displayMat3",v.vvRotation?c.displayViewMat3:c.displayMat3),v.vvSizeMinMaxValue&&g.setUniform4fv("u_vvSizeMinMaxValue",u.vvSizeMinMaxValue),v.vvSizeScaleStops&&g.setUniform1f("u_vvSizeScaleStopsValue",u.vvSizeScaleStopsValue),v.vvSizeFieldStops){var x=u.getSizeVVFieldStops(t.key.level);g.setUniform1fv("u_vvSizeFieldStopsValues",x.values),g.setUniform1fv("u_vvSizeFieldStopsSizes",x.sizes)}v.vvSizeUnitValue&&g.setUniform1f("u_vvSizeUnitValueWorldToPixelsRatio",u.vvSizeUnitValueToPixelsRatio),v.vvColor&&(g.setUniform1fv("u_vvColorValues",u.vvColorValues),g.setUniform4fv("u_vvColors",u.vvColors)),v.vvOpacity&&(g.setUniform1fv("u_vvOpacityValues",u.vvOpacityValues),g.setUniform1fv("u_vvOpacities",u.vvOpacities)),v.vvRotation&&g.setUniform1f("u_vvRotationType","geographic"===u.vvMaterialParameters.vvRotationType?0:1),l.drawElements(4,f,5125,Uint32Array.BYTES_PER_ELEMENT*d),l.bindVAO(null)},t}(r.default);t.default=l}).apply(null,i))||(e.exports=o)},"3+7H":function(e,t,n){var i,o;i=[n.dj.c(e.i),t],void 0===(o=(function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=function(){function e(){this.name=this.constructor.name||"UnnamedBrush"}return e.prototype.prepareState=function(e,t,n){},e.prototype.draw=function(e,t,n){},e.prototype.drawMany=function(e,t,n){for(var i=0,o=t;i<o.length;i++)this.draw(e,o[i],n)},e}();t.default=n}).apply(null,i))||(e.exports=o)},"3gjc":function(e,t,n){var i,o;i=[n.dj.c(e.i),t],void 0===(o=(function(e,t){"use strict";function n(){return new Float32Array(4)}function i(e,t,n,i){var o=new Float32Array(4);return o[0]=e,o[1]=t,o[2]=n,o[3]=i,o}function o(){return n()}function r(){return i(1,1,1,1)}function a(){return i(1,0,0,0)}function l(){return i(0,1,0,0)}function s(){return i(0,0,1,0)}function u(){return i(0,0,0,1)}Object.defineProperty(t,"__esModule",{value:!0}),t.UNIT_W=t.UNIT_Z=t.UNIT_Y=t.UNIT_X=t.ONES=t.ZEROS=t.unitW=t.unitZ=t.unitY=t.unitX=t.ones=t.zeros=t.createView=t.fromValues=t.clone=t.create=void 0,t.create=n,t.clone=function(e){var t=new Float32Array(4);return t[0]=e[0],t[1]=e[1],t[2]=e[2],t[3]=e[3],t},t.fromValues=i,t.createView=function(e,t){return new Float32Array(e,t,4)},t.zeros=o,t.ones=r,t.unitX=a,t.unitY=l,t.unitZ=s,t.unitW=u,t.ZEROS=o(),t.ONES=r(),t.UNIT_X=a(),t.UNIT_Y=l(),t.UNIT_Z=s(),t.UNIT_W=u()}).apply(null,i))||(e.exports=o)},"3u8V":function(e,t,n){var i,o;i=[n.dj.c(e.i),t,n("zOht"),n("JNkf"),n("apbF"),n("PDSL"),n("m87x")],void 0===(o=(function(e,t,n,i,o,r,a){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var l=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return n.__extends(t,e),t.prototype.dispose=function(){},t.prototype.getGeometryType=function(){return i.WGLGeometryType.TEXT},t.prototype.drawGeometry=function(e,t,n,i,r){var l=e.context,s=e.painter,u=e.rendererInfo,c=e.state,f=n.indexCount,d=n.indexFrom,v=a.TextMaterialKey.load(n.materialKey),_=function(e){return o.createProgramDescriptor(e.data,{geometry:[{location:0,name:"a_pos",count:2,type:5122},{location:1,name:"a_id",count:4,type:5121},{location:2,name:"a_color",count:4,type:5121,normalized:!0},{location:3,name:"a_haloColor",count:4,type:5121,normalized:!0},{location:4,name:"a_texFontSize",count:4,type:5121},{location:5,name:"a_aux",count:4,type:5120},{location:6,name:"a_vertexOffset",count:2,type:5122},{location:7,name:"a_texCoords",count:2,type:5123}]})}(v),m=_.bufferLayouts,p=_.attributes,g=s.materialManager.getMaterialProgram(e,v,"materials/text",p,r),h=this._getVAO(l,m,p,i);if(l.bindProgram(g),l.bindVAO(h),this._setSharedUniforms(g,e,t),s.textureManager.bindTextures(l,g,v),g.setUniformMatrix3fv("u_displayMat3",c.displayMat3),g.setUniformMatrix3fv("u_displayViewMat3",c.displayViewMat3),v.vvSizeMinMaxValue&&g.setUniform4fv("u_vvSizeMinMaxValue",u.vvSizeMinMaxValue),v.vvSizeScaleStops&&g.setUniform1f("u_vvSizeScaleStopsValue",u.vvSizeScaleStopsValue),v.vvSizeFieldStops){var x=u.getSizeVVFieldStops(t.key.level);g.setUniform1fv("u_vvSizeFieldStopsValues",x.values),g.setUniform1fv("u_vvSizeFieldStopsSizes",x.sizes)}v.vvSizeUnitValue&&g.setUniform1f("u_vvSizeUnitValueWorldToPixelsRatio",u.vvSizeUnitValueToPixelsRatio),v.vvColor&&(g.setUniform1fv("u_vvColorValues",u.vvColorValues),g.setUniform4fv("u_vvColors",u.vvColors)),v.vvOpacity&&(g.setUniform1fv("u_vvOpacityValues",u.vvOpacityValues),g.setUniform1fv("u_vvOpacities",u.vvOpacities)),v.vvRotation&&g.setUniform1f("u_vvRotationType","geographic"===u.vvMaterialParameters.vvRotationType?0:1),g.setUniform1f("u_isHalo",1),l.drawElements(4,f,5125,Uint32Array.BYTES_PER_ELEMENT*d),g.setUniform1f("u_isHalo",0),l.drawElements(4,f,5125,Uint32Array.BYTES_PER_ELEMENT*d),l.bindVAO(null)},t}(r.default);t.default=l}).apply(null,i))||(e.exports=o)},"66cO":function(e,t,n){var i,o;i=[n.dj.c(e.i),t,n("zOht"),n("j2SP"),n("DJpR"),n("3+7H"),n("TQvW"),n("bqoF")],void 0===(o=(function(e,t,n,i,o,r,a,l){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var s=function(e){function t(){var t=null!==e&&e.apply(this,arguments)||this;return t._color=i.vec4f32.fromValues(1,0,0,1),t}return n.__extends(t,e),t.prototype.dispose=function(){this._outlineProgram&&(this._outlineProgram.dispose(),this._outlineProgram=null),this._tileInfoProgram&&(this._tileInfoProgram.dispose(),this._tileInfoProgram=null),this._outlineVertexArrayObject&&(this._outlineVertexArrayObject.dispose(),this._outlineVertexArrayObject=null),this._tileInfoVertexArrayObject&&(this._tileInfoVertexArrayObject.dispose(),this._tileInfoVertexArrayObject=null),this._canvas=null},t.prototype.prepareState=function(e){var t=e.context;t.setBlendingEnabled(!0),t.setBlendFunctionSeparate(1,771,1,771),t.setColorMask(!0,!0,!0,!0),t.setStencilWriteMask(0),t.setStencilTestEnabled(!1)},t.prototype.draw=function(e,t){var n=e.context;if(t.isReady){this._loadWGLResources(n),n.bindVAO(this._outlineVertexArrayObject),n.bindProgram(this._outlineProgram),this._outlineProgram.setUniformMatrix3fv("u_dvsMat3",t.transforms.dvs),this._outlineProgram.setUniform2f("u_coord_range",t.coordRange[0],t.coordRange[1]),this._outlineProgram.setUniform1f("u_depth",0),this._outlineProgram.setUniform4fv("u_color",this._color),n.drawArrays(3,0,4),n.bindVAO();var i=this._getTexture(n,t);i&&(n.bindVAO(this._tileInfoVertexArrayObject),n.bindProgram(this._tileInfoProgram),n.bindTexture(i,0),this._tileInfoProgram.setUniformMatrix3fv("u_dvsMat3",t.transforms.dvs),this._tileInfoProgram.setUniform1f("u_depth",0),this._tileInfoProgram.setUniform2f("u_coord_ratio",t.coordRange[0]/t.size[0],t.coordRange[1]/t.size[1]),this._tileInfoProgram.setUniform2f("u_delta",8,8),this._tileInfoProgram.setUniform2f("u_dimensions",i.descriptor.width,i.descriptor.height),n.drawArrays(5,0,4),n.bindVAO())}},t.prototype._loadWGLResources=function(e){if(!this._outlineProgram||!this._tileInfoProgram){var t=o.createProgram(e,a.background),n=o.createProgram(e,l.tileInfo),i={geometry:[{name:"a_pos",count:2,type:5120,offset:0,stride:2,normalized:!1,divisor:0}]},r=new Int8Array([0,0,1,0,1,1,0,1]),s=o.BufferObject.createVertex(e,35044,r),u=new o.VertexArrayObject(e,a.background.attributes,i,{geometry:s}),c=new Int8Array([0,0,1,0,0,1,1,1]),f=o.BufferObject.createVertex(e,35044,c),d=new o.VertexArrayObject(e,l.tileInfo.attributes,i,{geometry:f});this._outlineProgram=t,this._tileInfoProgram=n,this._outlineVertexArrayObject=u,this._tileInfoVertexArrayObject=d}},t.prototype._getTexture=function(e,t){if(t.texture&&t.triangleCountReportedInDebug===t.triangleCount)return t.texture;t.triangleCountReportedInDebug=t.triangleCount,this._canvas||(this._canvas=document.createElement("canvas"),this._canvas.setAttribute("id","canvas2d"),this._canvas.setAttribute("width","300"),this._canvas.setAttribute("height","32"),this._canvas.setAttribute("style","display:none"));var n=t.triangleCount,i=t.key.id;t.triangleCount>0&&(i+=", "+n);var r=this._canvas,a=r.getContext("2d");return a.font="24px sans-serif",a.textAlign="left",a.textBaseline="top",a.clearRect(0,0,300,32),n>1e5?(a.fillStyle="red",a.fillRect(0,0,300,32),a.fillStyle="black"):(a.clearRect(0,0,300,32),a.fillStyle="blue"),a.fillText(i,0,0),t.texture=new o.Texture(e,{target:3553,pixelFormat:6408,dataType:5121,samplingMode:9728,wrapMode:33071},r),t.texture},t}(r.default);t.default=s}).apply(null,i))||(e.exports=o)},"8HLi":function(e,t,n){var i,o;i=[n.dj.c(e.i),t,n("DJpR"),n("HjjH")],void 0===(o=(function(e,t,n,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.resolveIncludes=void 0;var o=new n.ShaderCompiler((function(e){var t=i.default;return e.split("/").forEach((function(e){t&&(t=t[e])})),t}));t.resolveIncludes=function(e){return o.resolveIncludes(e)}}).apply(null,i))||(e.exports=o)},"8fgo":function(e,t,n){var i,o;i=[n.dj.c(e.i),t,n("zOht"),n("4w2c"),n("DJpR"),n("tI6k"),n("JNkf"),n("apbF"),n("PDSL"),n("m87x")],void 0===(o=(function(e,t,n,i,o,r,a,l,s,u){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var c=function(e){function t(){var t=null!==e&&e.apply(this,arguments)||this;return t._dotTextureSize=0,t._dotTextures=null,t._dotSamplers=new Int32Array([r.TEXTURE_BINDING_RENDERER_0,r.TEXTURE_BINDING_RENDERER_1]),t}return n.__extends(t,e),t.prototype.dispose=function(){this._disposeTextures()},t.prototype.getGeometryType=function(){return a.WGLGeometryType.FILL},t.prototype.drawGeometry=function(e,t,i,o,a){var s=e.context,c=e.painter,f=e.rendererInfo,d=e.requiredLevel,v=i.indexCount,_=i.indexFrom,m=u.FillMaterialKey.load(i.materialKey),p=function(e){return l.createProgramDescriptor(e.data,{geometry:n.__spreadArrays([{location:0,name:"a_pos",count:2,type:5122},{location:1,name:"a_id",count:4,type:5121}],e.dotDensity?[]:[{location:2,name:"a_color",count:4,type:5121,normalized:!0},{location:3,name:"a_tlbr",count:4,type:5123},{location:4,name:"a_aux1",count:4,type:5121},{location:5,name:"a_aux2",count:2,type:5123},{location:6,name:"a_aux3",count:4,type:5121}],e.dotDensity?[{location:2,name:"a_inverseArea",count:1,type:5126}]:[])})}(m),g=p.bufferLayouts,h=p.attributes,x=c.materialManager.getMaterialProgram(e,m,"materials/fill",h,a),y=this._getVAO(s,g,h,o);if(s.bindProgram(x),s.bindVAO(y),this._setSharedUniforms(x,e,t),m.textureBinding){c.textureManager.bindTextures(s,x,m);var b=1/Math.pow(2,d-t.key.level)/e.pixelRatio;x.setUniform1f("u_zoomFactor",b)}if(m.vvColor&&(x.setUniform1fv("u_vvColorValues",f.vvColorValues),x.setUniform4fv("u_vvColors",f.vvColors)),m.vvOpacity&&(x.setUniform1fv("u_vvOpacityValues",f.vvOpacityValues),x.setUniform1fv("u_vvOpacities",f.vvOpacities)),m.dotDensity){var T=r.TILE_SIZE/f.ddDotSize,C=T*window.devicePixelRatio*T*window.devicePixelRatio,S=1/(b=1/Math.pow(2,d-t.key.level))*(1/b),D=f.ddDotScale?e.state.scale/f.ddDotScale:1;x.setUniform1f("u_tileZoomFactor",b),x.setUniform1f("u_tileDotsOverArea",C/(r.TILE_SIZE*window.devicePixelRatio*r.TILE_SIZE*window.devicePixelRatio)),x.setUniformMatrix4fv("u_dotColors",f.ddColors),x.setUniform4fv("u_isActive",f.ddActiveDots),x.setUniform4fv("u_dotBackgroundColor",f.ddBackgroundColor),x.setUniform1f("u_dotValue",Math.max(1,f.ddDotValue*D*S)),this._bindDotDensityTextures(s,x,f,T)}s.drawElements(4,v,5125,Uint32Array.BYTES_PER_ELEMENT*_),s.bindVAO(null)},t.prototype._disposeTextures=function(){if(this._dotTextures){for(var e=0;e<this._dotTextures.length;e++)this._dotTextures[e].dispose();this._dotTextures=null}},t.prototype._bindDotDensityTextures=function(e,t,n,i){var o=this._createDotDensityTextures(e,i,n.ddSeed);t.setUniform1iv("u_dotTextures",this._dotSamplers);for(var r=0;r<o.length;r++)e.bindTexture(o[r],this._dotSamplers[r])},t.prototype._createDotDensityTextures=function(e,t,n){if(this._dotTextureSize===t&&this._seed===n||(this._disposeTextures(),this._dotTextureSize=t,this._seed=n),null===this._dotTextures){var o=new i(n);this._dotTextures=[this._allocDotDensityTexture(e,t,o),this._allocDotDensityTexture(e,t,o)]}return this._dotTextures},t.prototype._allocDotDensityTexture=function(e,t,n){for(var i=new Float32Array(t*t*4),r=0;r<i.length;r++)i[r]=n.getFloat();return new o.Texture(e,{wrapMode:10497,pixelFormat:6408,dataType:5126,samplingMode:9728,width:t,height:t},i)},t}(s.default);t.default=c}).apply(null,i))||(e.exports=o)},A97r:function(e,t,n){var i,o;i=[n.dj.c(e.i),t,n("DJpR")],void 0===(o=(function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.setTextures=t.setUniforms=t.getUniformLocationInfos=t.getShadedReliefUniforms=t.getStretchUniforms=t.getBasicGridUniforms=t.getColormapUniforms=t.getCommonUniforms=t.createColormapTexture=t.createTransformTexture=t.createFrameBuffer=t.createRasterTexture=void 0,t.createRasterTexture=function(e,t,i,o){void 0===i&&(i="nearest"),void 0===o&&(o=!1);var r=!(o&&"u8"===t.pixelType),a=r?5126:5121,l=null==t.pixels||0===t.pixels.length?null:r?t.getAsRGBAFloat():t.getAsRGBA();return new n.Texture(e,{width:t.width,height:t.height,target:3553,pixelFormat:6408,internalFormat:6408,samplingMode:"bilinear"===i||"cubic"===i?9729:9728,dataType:a,wrapMode:33071,flipped:!1},l)},t.createFrameBuffer=function(e,t,i,o){var r=new n.Texture(e,{width:t,height:i,target:3553,pixelFormat:6408,internalFormat:6408,samplingMode:9728,dataType:o?5121:5126,wrapMode:33071,flipped:!1});return new n.FramebufferObject(e,{colorTarget:0,depthStencilTarget:3,width:t,height:i},r)},t.createTransformTexture=function(e,t){for(var i=4*t.size[0],o=t.size[1],r={width:i,height:o,target:3553,pixelFormat:6408,internalFormat:6408,dataType:5126,samplingMode:9728,wrapMode:33071,flipped:!1},a=new Float32Array(i*o*4),l=0,s=0;s<t.coefficients.length;s++)a[l++]=t.coefficients[s],s%3==2&&(a[l++]=1);return new n.Texture(e,r,a)},t.createColormapTexture=function(e,t){return new n.Texture(e,{width:t.length/4,height:1,target:3553,pixelFormat:6408,internalFormat:6408,dataType:5121,samplingMode:9728,wrapMode:33071,flipped:!1},t)},t.getCommonUniforms=function(e,t,n,i,o,r){return void 0===i&&(i=1),void 0===o&&(o=!0),void 0===r&&(r=!1),{u_flipY:o,u_isFloatTexture:r,u_applyTransform:!!e,u_opacity:i,u_transformSpacing:e?e.spacing:null,u_transformGridSize:e?e.size:null,u_targetImageSize:t,u_srcImageSize:n}},t.getColormapUniforms=function(e,t){return{u_colormapOffset:t||0,u_colormapMaxIndex:e?e.length/4-1:null}},t.getBasicGridUniforms=function(e,t){return{u_scale:e,u_offset:t}},t.getStretchUniforms=function(e){return{u_bandCount:e.bandCount,u_minOutput:e.outMin,u_maxOutput:e.outMax,u_minCutOff:e.minCutOff,u_maxCutOff:e.maxCutOff,u_factor:e.factor,u_useGamma:e.useGamma,u_gamma:e.gamma,u_gammaCorrection:e.gammaCorrection}},t.getShadedReliefUniforms=function(e){return{u_hillshadeType:e.hillshadeType,u_sinZcosAs:e.sinZcosAs,u_sinZsinAs:e.sinZsinAs,u_cosZs:e.cosZs,u_weights:e.weights,u_factor:e.factor,u_minValue:e.minValue,u_maxValue:e.maxValue}},t.getUniformLocationInfos=function(e,t){for(var n,i=e.gl,o=t.glName,r=i.getProgramParameter(o,i.ACTIVE_UNIFORMS),a=new Map,l=0;l<r;l++)(n=i.getActiveUniform(o,l))&&a.set(n.name,{location:i.getUniformLocation(o,n.name),info:n});return a},t.setUniforms=function(e,t,n){Object.keys(n).forEach((function(i){var o=t.get(i)||t.get(i+"[0]");o&&function(e,t,n,i){if(null===i||null==n)return!1;var o=i.info;switch(o.type){case 5126:o.size>1?e.setUniform1fv(t,n):e.setUniform1f(t,n);break;case 35664:e.setUniform2fv(t,n);break;case 35665:e.setUniform3fv(t,n);break;case 35666:e.setUniform4fv(t,n);break;case 35675:e.setUniformMatrix3fv(t,n);break;case 35676:e.setUniformMatrix4fv(t,n);break;case 5124:o.size>1?e.setUniform1iv(t,n):e.setUniform1i(t,n);break;case 35670:e.setUniform1i(t,n?1:0);break;case 35667:case 35671:e.setUniform2iv(t,n);break;case 35668:case 35672:e.setUniform3iv(t,n);break;case 35669:case 35673:e.setUniform4iv(t,n)}}(e,i,n[i],o)}))},t.setTextures=function(e,t,n,i){n.length===i.length&&(i.some((function(e){return null==e}))||n.some((function(e){return null==e}))||n.forEach((function(n,o){t.setUniform1i(n,o),e.bindTexture(i[o],o)})))}}).apply(null,i))||(e.exports=o)},HjjH:function(e,t,n){var i,o;i=[n.dj.c(e.i),t],void 0===(o=(function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default={background:{"background.frag":"#ifdef PATTERN\nuniform lowp float u_opacity;\nuniform mediump vec2 u_pattern_tl;\nuniform mediump vec2 u_pattern_br;\nuniform sampler2D u_texture;\nvarying mediump vec2 v_tileTextureCoord;\n#else\nuniform lowp vec4 u_color;\n#endif\n#ifdef ID\nvarying mediump vec4 v_id;\n#endif\nvoid main() {\n#ifdef PATTERN\n  mediump vec2 normalizedTextureCoord = mod(v_tileTextureCoord, 1.0);\n  mediump vec2 samplePos = mix(u_pattern_tl, u_pattern_br, normalizedTextureCoord);\n  lowp vec4 color = texture2D(u_texture, samplePos);\n  gl_FragColor = u_opacity * color;\n#else\n  gl_FragColor = u_color;\n#endif\n#ifdef ID\n  if (gl_FragColor.a < 1.0 / 255.0) {\n    discard;\n  }\n  gl_FragColor = v_id;\n#endif\n}","background.vert":"precision mediump float;\nattribute vec2 a_pos;\n#ifdef ID\nuniform mediump vec4 u_id;\nvarying mediump vec4 v_id;\n#endif\nuniform highp mat3 u_dvsMat3;\nuniform mediump float u_coord_range;\nuniform mediump float u_depth;\n#ifdef PATTERN\nuniform mediump mat3 u_pattern_matrix;\nvarying mediump vec2 v_tileTextureCoord;\n#endif\nvoid main() {\n  gl_Position = vec4((u_dvsMat3 * vec3(u_coord_range * a_pos, 1.0)).xy, u_depth, 1.0);\n#ifdef PATTERN\n  v_tileTextureCoord = (u_pattern_matrix * vec3(a_pos, 1.0)).xy;\n#endif\n#ifdef ID\n  v_id = u_id / 255.0;\n#endif\n}"},circle:{"circle.frag":"precision lowp float;\nvarying lowp vec4 v_color;\nvarying lowp vec4 v_stroke_color;\nvarying mediump float v_blur;\nvarying mediump float v_stroke_width;\nvarying mediump float v_radius;\nvarying mediump vec2 v_offset;\n#ifdef ID\nvarying mediump vec4 v_id;\n#endif\nvoid main()\n{\n  mediump float dist = length(v_offset);\n  mediump float alpha = smoothstep(0.0, -v_blur, dist - 1.0);\n  lowp float color_mix_ratio = v_stroke_width < 0.01 ? 0.0 : smoothstep(-v_blur, 0.0, dist - v_radius / (v_radius + v_stroke_width));\n  gl_FragColor = alpha * mix(v_color, v_stroke_color, color_mix_ratio);\n#ifdef ID\n  if (gl_FragColor.a < 1.0 / 255.0) {\n    discard;\n  }\n  gl_FragColor = v_id;\n#endif\n}","circle.vert":"precision mediump float;\nattribute vec2 a_pos;\nattribute vec4 a_color;\nattribute vec4 a_stroke_color;\nattribute vec4 a_data;\nconst float sizePrecision = 0.25;\nconst float blurPrecision = 0.03125;\nvarying lowp vec4 v_color;\nvarying lowp vec4 v_stroke_color;\nvarying mediump float v_blur;\nvarying mediump float v_stroke_width;\nvarying mediump float v_radius;\nvarying mediump vec2 v_offset;\n#ifdef ID\nuniform mediump vec4 u_id;\nvarying mediump vec4 v_id;\n#endif\nuniform highp mat3 u_dvsMat3;\nuniform highp mat3 u_displayMat3;\nuniform mediump vec2 u_circleTranslation;\nuniform mediump float u_depth;\nuniform mediump float u_radius;\nuniform lowp vec4 u_color;\nuniform mediump float u_blur;\nuniform mediump float u_stroke_width;\nuniform lowp vec4 u_stroke_color;\nuniform mediump float u_antialiasingWidth;\nvoid main()\n{\n  v_color = a_color * u_color;\n  v_stroke_color = a_stroke_color * u_stroke_color;\n  v_stroke_width = a_data[1] * sizePrecision * u_stroke_width;\n  v_radius = a_data[2] * u_radius;\n  v_blur = max(a_data[0] * blurPrecision + u_blur, u_antialiasingWidth / (v_radius + v_stroke_width));\n  mediump vec2 offset = vec2(mod(a_pos, 2.0) * 2.0 - 1.0);\n  v_offset = offset;\n#ifdef ID\n  v_id = u_id / 255.0;\n#endif\n  mediump vec3 pos = u_dvsMat3 * vec3(a_pos * 0.5, 1.0) + u_displayMat3 * vec3((v_radius + v_stroke_width) * offset + u_circleTranslation, 0.0);\n  gl_Position = vec4(pos.xy, u_depth, 1.0);\n}"},fill:{"fill.frag":"precision lowp float;\n#ifdef PATTERN\nuniform mediump vec2 u_pattern_tl;\nuniform mediump vec2 u_pattern_br;\nuniform lowp sampler2D u_texture;\nvarying mediump vec2 v_tileTextureCoord;\n#endif\n#ifdef ID\nvarying mediump vec4 v_id;\n#endif\nvarying lowp vec4 v_color;\nvec4 mixColors(vec4 color1, vec4 color2) {\n  float compositeAlpha = color2.a + color1.a * (1.0 - color2.a);\n  vec3 compositeColor = color2.rgb + color1.rgb * (1.0 - color2.a);\n  return vec4(compositeColor, compositeAlpha);\n}\nvoid main()\n{\n#ifdef PATTERN\n  mediump vec2 normalizedTextureCoord = fract(v_tileTextureCoord);\n  mediump vec2 samplePos = mix(u_pattern_tl, u_pattern_br, normalizedTextureCoord);\n  lowp vec4 color = texture2D(u_texture, samplePos);\n  gl_FragColor = v_color[3] * color;\n#else\n  gl_FragColor = v_color;\n#endif\n#ifdef ID\n  if (gl_FragColor.a < 1.0 / 255.0) {\n    discard;\n  }\n  gl_FragColor = v_id;\n#endif\n}","fill.vert":"precision mediump float;\nattribute vec2 a_pos;\nuniform highp mat3 u_dvsMat3;\nuniform highp mat3 u_displayMat3;\nuniform mediump float u_depth;\nuniform mediump vec2 u_fillTranslation;\n#ifdef PATTERN\nuniform mediump mat3 u_pattern_matrix;\nvarying mediump vec2 v_tileTextureCoord;\n#endif\n#ifdef ID\nuniform mediump vec4 u_id;\nvarying mediump vec4 v_id;\n#endif\n#ifdef DD\nattribute vec4 a_color;\n#endif\nuniform lowp vec4 u_color;\nvarying lowp vec4 v_color;\nvoid main()\n{\n#ifdef DD\n  v_color = a_color * u_color;\n#else\n  v_color = u_color;\n#endif\n#ifdef ID\n  v_id = u_id / 255.0;\n#endif\n#ifdef PATTERN\n  v_tileTextureCoord = (u_pattern_matrix * vec3(a_pos, 1.0)).xy;\n#endif\n  vec3 pos = u_dvsMat3 * vec3(a_pos, 1.0) + u_displayMat3 * vec3(u_fillTranslation, 0.0);\n  gl_Position = vec4(pos.xy, u_depth, 1.0);\n}"},icon:{"icon.frag":"precision mediump float;\nuniform lowp sampler2D u_texture;\n#ifdef SDF\nuniform lowp vec4 u_color;\nuniform lowp vec4 u_outlineColor;\nuniform mediump float u_outlineSize;\n#endif\nvarying mediump vec2 v_tex;\nvarying lowp float v_opacity;\nvarying mediump vec2 v_size;\nvarying lowp vec4 v_color;\n#ifdef ID\nvarying mediump vec4 v_id;\n#endif\n#include <util/encoding.glsl>\nvec4 mixColors(vec4 color1, vec4 color2) {\n  float compositeAlpha = color2.a + color1.a * (1.0 - color2.a);\n  vec3 compositeColor = color2.rgb + color1.rgb * (1.0 - color2.a);\n  return vec4(compositeColor, compositeAlpha);\n}\nvoid main()\n{\n#ifdef SDF\n  lowp vec4 fillPixelColor = v_color;\n  float d = rgba2float(texture2D(u_texture, v_tex)) - 0.5;\n  const float sofetEdgeRatio = 0.248062016;\n  float size = max(v_size.x, v_size.y);\n  float dist = d * sofetEdgeRatio * size;\n  fillPixelColor *= clamp(0.5 - dist, 0.0, 1.0);\n  if (u_outlineSize > 0.25) {\n    lowp vec4 outlinePixelColor = u_outlineColor;\n    const float outlineLimitRatio = (16.0 / 86.0);\n    float clampedOutlineSize = sofetEdgeRatio * min(u_outlineSize, outlineLimitRatio * max(v_size.x, v_size.y));\n    outlinePixelColor *= clamp(0.5 - (abs(dist) - clampedOutlineSize), 0.0, 1.0);\n    gl_FragColor = v_opacity * mixColors(fillPixelColor, outlinePixelColor);\n  }\n  else {\n    gl_FragColor = v_opacity * fillPixelColor;\n  }\n#else\n  lowp vec4 texColor = texture2D(u_texture, v_tex);\n  gl_FragColor = v_opacity * texColor;\n#endif\n#ifdef ID\n  if (gl_FragColor.a < 1.0 / 255.0) {\n    discard;\n  }\n  gl_FragColor = v_id;\n#endif\n}","icon.vert":"attribute vec2 a_pos;\nattribute vec2 a_vertexOffset;\nattribute vec4 a_texAngleRange;\nattribute vec4 a_levelInfo;\nattribute float a_opacityInfo;\n#ifdef DD\nattribute vec4 a_color;\nattribute mediump float a_size;\n#endif\nuniform lowp vec4 u_color;\nuniform mediump float u_size;\n#ifdef ID\nuniform mediump vec4 u_id;\nvarying mediump vec4 v_id;\n#endif\nvarying lowp vec4 v_color;\nuniform highp mat3 u_dvsMat3;\nuniform highp mat3 u_displayMat3;\nuniform highp mat3 u_displayViewMat3;\nuniform mediump vec2 u_iconTranslation;\nuniform vec2 u_mosaicSize;\nuniform mediump float u_depth;\nuniform mediump float u_mapRotation;\nuniform mediump float u_level;\nuniform lowp float u_keepUpright;\nuniform mediump float u_opacity;\nuniform mediump float u_fadeDuration;\nvarying mediump vec2 v_tex;\nvarying lowp float v_opacity;\nvarying mediump vec2 v_size;\nconst float C_OFFSET_PRECISION = 1.0 / 8.0;\nconst float C_256_TO_RAD = 3.14159265359 / 128.0;\nconst float C_DEG_TO_RAD = 3.14159265359 / 180.0;\nconst float tileCoordRatio = 1.0 / 8.0;\nuniform highp float u_time;\nvoid main()\n{\n  float modded = mod(a_opacityInfo, 128.0);\n  float targetOpacity = (a_opacityInfo - modded) / 128.0;\n  float startOpacity = modded / 127.0;\n  float interpolatedOpacity = clamp(startOpacity + 2.0 * (targetOpacity - 0.5) * u_time / u_fadeDuration, 0.0, 1.0);\n  v_opacity = u_opacity * interpolatedOpacity;\n  mediump float a_angle         = a_levelInfo[1];\n  mediump float a_minLevel      = a_levelInfo[2];\n  mediump float a_maxLevel      = a_levelInfo[3];\n  mediump vec2 a_tex            = a_texAngleRange.xy;\n  mediump float delta_z = 0.0;\n  mediump float rotated = mod(a_angle + u_mapRotation, 256.0);\n  delta_z += (1.0 - step(u_keepUpright, 0.0)) * step(64.0, rotated) * (1.0 - step(192.0, rotated));\n  delta_z += 1.0 - step(a_minLevel, u_level);\n  delta_z += step(a_maxLevel, u_level);\n  delta_z += step(v_opacity, 0.0);\n  vec2 offset = C_OFFSET_PRECISION * a_vertexOffset;\n  v_size = abs(offset);\n#ifdef SDF\n  offset = (120.0 / 86.0) * offset;\n#endif\n#ifdef DD\n  mediump float icon_size = a_size * u_size;\n#else\n  mediump float icon_size = u_size;\n#endif\n  mediump vec3 pos = u_dvsMat3 * vec3(a_pos, 1.0) + u_displayViewMat3 * vec3(icon_size * offset, 0.0) + u_displayMat3 * vec3(u_iconTranslation, 0.0);\n  gl_Position = vec4(pos.xy, u_depth + delta_z, 1.0);\n#ifdef DD\n  v_color = a_color * u_color;\n#else\n  v_color = u_color;\n#endif\n#ifdef ID\n  v_id = u_id / 255.0;\n#endif\n  v_tex = a_tex.xy / u_mosaicSize;\n  v_opacity *= v_color.w;\n}"},line:{"line.frag":"varying mediump vec2 v_normal;\nvarying highp float v_accumulatedDistance;\nvarying mediump float v_lineHalfWidth;\nvarying lowp vec4 v_color;\nvarying mediump float v_blur;\n#ifdef PATTERN\nuniform mediump vec2 u_pattern_tl;\nuniform mediump vec2 u_pattern_br;\nuniform mediump vec2 u_spriteSize;\nuniform sampler2D u_texture;\nconst mediump float tileCoordRatio = 8.0;\n#else\nvarying mediump vec2 v_dasharray;\n#endif\n#ifdef ID\nvarying mediump vec4 v_id;\n#endif\nvoid main()\n{\n  mediump float fragDist = length(v_normal) * v_lineHalfWidth;\n  lowp float alpha = clamp((v_lineHalfWidth - fragDist) / v_blur, 0.0, 1.0);\n#ifdef PATTERN\n  mediump float relativeTexX = mod((v_accumulatedDistance + v_normal.x * v_lineHalfWidth * tileCoordRatio) / u_spriteSize.x, 1.0);\n  mediump float relativeTexY = 0.5 + (v_normal.y * v_lineHalfWidth / u_spriteSize.y);\n  mediump vec2 texCoord = mix(u_pattern_tl, u_pattern_br, vec2(relativeTexX, relativeTexY));\n  lowp vec4 color = texture2D(u_texture, texCoord);\n  gl_FragColor = alpha * v_color[3] * color;\n#else\n  lowp float dashPos =  mod(v_accumulatedDistance, v_dasharray.x + v_dasharray.y);\n  lowp float dashAlpha = clamp(min(dashPos, v_dasharray.x - dashPos) + 0.5, 0.0, 1.0);\n  dashAlpha = max(sign(-v_dasharray.y), dashAlpha);\n  alpha *= dashAlpha;\n  gl_FragColor = alpha * v_color;\n#endif\n#ifdef ID\n  if (gl_FragColor.a < 1.0 / 255.0) {\n    discard;\n  }\n  gl_FragColor = v_id;\n#endif\n}","line.vert":"attribute vec2 a_pos;\nattribute vec4 a_offsetAndNormal;\nattribute vec2 a_accumulatedDistance;\nuniform highp mat3 u_dvsMat3;\nuniform highp mat3 u_displayMat3;\nuniform highp mat3 u_displayViewMat3;\nuniform mediump vec2 u_lineTranslation;\nuniform mediump float u_blur;\nuniform mediump float u_antialiasing;\nuniform mediump float u_depth;\nvarying mediump vec2 v_normal;\nvarying highp float v_accumulatedDistance;\nconst float scale = 1.0 / 31.0;\n#ifdef DD\nattribute vec4 a_color;\nattribute mediump float a_width;\n#endif\nuniform lowp vec4 u_color;\nuniform mediump float u_width;\n#ifdef ID\nuniform mediump vec4 u_id;\nvarying mediump vec4 v_id;\n#endif\nvarying lowp vec4 v_color;\nvarying mediump float v_lineHalfWidth;\nvarying mediump float v_blur;\n#ifndef PATTERN\nuniform mediump vec2 u_dasharray;\nvarying mediump vec2 v_dasharray;\n#endif\nvoid main()\n{\n  v_normal = a_offsetAndNormal.zw * scale;\n#ifdef DD\n  v_lineHalfWidth = a_width * u_width;\n#else\n  v_lineHalfWidth = u_width;\n#endif\n  v_lineHalfWidth += u_antialiasing;\n  v_lineHalfWidth *= 0.5;\n#ifndef PATTERN\n#ifdef DD\n  v_dasharray = u_dasharray * a_width;\n#else\n  v_dasharray = u_dasharray * u_width;\n#endif\n#endif\n  mediump vec2 dist = v_lineHalfWidth * scale * a_offsetAndNormal.xy;\n  mediump vec3 pos = u_dvsMat3 * vec3(a_pos, 1.0) +  u_displayViewMat3 * vec3(dist, 0.0) + u_displayMat3 * vec3(u_lineTranslation, 0.0);\n  gl_Position = vec4(pos.xy, u_depth, 1.0);\n  v_accumulatedDistance = a_accumulatedDistance.x;\n  v_blur = u_blur + u_antialiasing;\n  #ifdef DD\n    v_color = a_color * u_color;\n  #else\n    v_color = u_color;\n  #endif\n  #ifdef ID\n    v_id = u_id / 255.0;\n  #endif\n}"},outline:{"outline.frag":"varying lowp vec4 v_color;\nvarying mediump vec2 v_normal;\n#ifdef ID\nvarying mediump vec4 v_id;\n#endif\nvoid main()\n{\n  lowp float dist = abs(v_normal.y);\n  lowp float alpha = smoothstep(1.0, 0.0, dist);\n  gl_FragColor = alpha * v_color;\n#ifdef ID\n  if (gl_FragColor.a < 1.0 / 255.0) {\n    discard;\n  }\n  gl_FragColor = v_id;\n#endif\n}","outline.vert":"attribute vec2 a_pos;\nattribute vec2 a_offset;\nattribute vec2 a_xnormal;\n#ifdef DD\nattribute vec4 a_color;\n#endif\nuniform lowp vec4 u_color;\nvarying lowp vec4 v_color;\n#ifdef ID\nuniform mediump vec4 u_id;\nvarying mediump vec4 v_id;\n#endif\nuniform highp mat3 u_dvsMat3;\nuniform highp mat3 u_displayMat3;\nuniform mediump vec2 u_fillTranslation;\nuniform mediump float u_depth;\nuniform mediump float u_outline_width;\nvarying lowp vec2 v_normal;\nconst float scale = 1.0 / 15.0;\nvoid main()\n{\n#ifdef DD\n  v_color = a_color * u_color;\n#else\n  v_color = u_color;\n#endif\n#ifdef ID\n  v_id = u_id / 255.0;\n#endif\n  v_normal = a_xnormal;\n  mediump vec2 dist = u_outline_width * scale * a_offset;\n  mediump vec3 pos = u_dvsMat3 * vec3(a_pos, 1.0) + u_displayMat3 * vec3(dist + u_fillTranslation, 0.0);\n  gl_Position = vec4(pos.xy, u_depth, 1.0);\n}"},text:{"text.frag":"uniform lowp sampler2D u_texture;\nuniform mediump float u_edgeDistance;\nvarying lowp vec2 v_tex;\nvarying lowp float v_opacity;\nvarying lowp vec4 v_color;\nvarying mediump float v_edgeWidth;\nvarying mediump float v_edgeDistance;\n#ifdef ID\nvarying mediump vec4 v_id;\n#endif\nvoid main()\n{\n  lowp float dist = texture2D(u_texture, v_tex).a;\n  mediump float alpha = smoothstep(v_edgeDistance - v_edgeWidth, v_edgeDistance + v_edgeWidth, dist) * v_opacity;\n  gl_FragColor = alpha * v_color;\n#ifdef ID\n  if (gl_FragColor.a < 1.0 / 255.0) {\n    discard;\n  }\n  gl_FragColor = v_id;\n#endif\n}","text.vert":"attribute vec2 a_pos;\nattribute vec2 a_vertexOffset;\nattribute vec4 a_texAngleRange;\nattribute vec4 a_levelInfo;\nattribute float a_opacityInfo;\nuniform lowp vec4 u_color;\n#ifdef DD\nattribute vec4 a_color;\n#endif\nvarying lowp vec4 v_color;\nuniform mediump float u_size;\n#ifdef DD\nattribute mediump float a_size;\n#endif\nvarying mediump float v_size;\n#ifdef ID\nuniform mediump vec4 u_id;\nvarying mediump vec4 v_id;\n#endif\nuniform highp mat3 u_dvsMat3;\nuniform highp mat3 u_displayMat3;\nuniform highp mat3 u_displayViewMat3;\nuniform mediump vec2 u_textTranslation;\nuniform vec2 u_mosaicSize;\nuniform mediump float u_depth;\nuniform mediump float u_mapRotation;\nuniform mediump float u_level;\nuniform lowp float u_keepUpright;\nuniform mediump float u_opacity;\nuniform mediump float u_fadeDuration;\nvarying lowp vec2 v_tex;\nvarying lowp float v_opacity;\nconst float offsetPrecision = 1.0 / 8.0;\nconst mediump float edgePos = 0.75;\nuniform mediump float u_edgeDistance;\nuniform mediump float u_edgeBlur;\nuniform mediump float u_antialiasingWidth;\nvarying mediump float v_edgeDistance;\nvarying mediump float v_edgeWidth;\nuniform lowp float u_halo;\nconst float sdfFontScale = 1.0 / 24.0;\nuniform highp float u_time;\nvoid main()\n{\n  float modded = mod(a_opacityInfo, 128.0);\n  float targetOpacity = (a_opacityInfo - modded) / 128.0;\n  float startOpacity = modded / 127.0;\n  float interpolatedOpacity = clamp(startOpacity + 2.0 * (targetOpacity - 0.5) * u_time / u_fadeDuration, 0.0, 1.0);\n  v_opacity = u_opacity * interpolatedOpacity;\n  mediump float a_angle       = a_levelInfo[1];\n  mediump float a_minLevel    = a_levelInfo[2];\n  mediump float a_maxLevel    = a_levelInfo[3];\n  mediump vec2 a_tex           = a_texAngleRange.xy;\n  mediump float a_visMinAngle    = a_texAngleRange.z;\n  mediump float a_visMaxAngle    = a_texAngleRange.w;\n  mediump float delta_z = 0.0;\n  mediump float angle = mod(a_angle + u_mapRotation, 256.0);\n  if (a_visMinAngle < a_visMaxAngle)\n  {\n    delta_z += (1.0 - step(u_keepUpright, 0.0)) * (step(a_visMaxAngle, angle) + (1.0 - step(a_visMinAngle, angle)));\n  }\n  else\n  {\n    delta_z += (1.0 - step(u_keepUpright, 0.0)) * (step(a_visMaxAngle, angle) * (1.0 - step(a_visMinAngle, angle)));\n  }\n  delta_z += 1.0 - step(a_minLevel, u_level);\n  delta_z += step(a_maxLevel, u_level);\n  delta_z += step(v_opacity, 0.0);\n  v_tex = a_tex.xy / u_mosaicSize;\n#ifdef DD\n  if (u_halo > 0.5)\n  {\n    v_color = u_color;\n  }\n  else\n  {\n    v_color = a_color * u_color;\n  }\n#else\n  v_color = u_color;\n#endif\n#ifdef DD\n  v_size = a_size * u_size;\n#else\n  v_size = u_size;\n#endif\n#ifdef ID\n  v_id = u_id / 255.0;\n#endif\n  v_edgeDistance = edgePos - u_edgeDistance / v_size;\n  v_edgeWidth = (u_antialiasingWidth + u_edgeBlur) / v_size;\n  mediump vec3 pos = u_dvsMat3 * vec3(a_pos, 1.0) + sdfFontScale * u_displayViewMat3 * vec3(offsetPrecision * v_size * a_vertexOffset, 0.0) + u_displayMat3 * vec3(u_textTranslation, 0.0);\n  gl_Position = vec4(pos.xy, u_depth + delta_z, 1.0);\n}"},util:{"encoding.glsl":"const vec4 rgba2float_factors = vec4(\n    255.0 / (256.0),\n    255.0 / (256.0 * 256.0),\n    255.0 / (256.0 * 256.0 * 256.0),\n    255.0 / (256.0 * 256.0 * 256.0 * 256.0)\n  );\nfloat rgba2float(vec4 rgba) {\n  return dot(rgba, rgba2float_factors);\n}"}}}).apply(null,i))||(e.exports=o)},Jvs9:function(e,t,n){var i,o;i=[n.dj.c(e.i),t],void 0===(o=(function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=function(){function e(e,t,n){void 0===e&&(e=[]),void 0===t&&(t=[]),void 0===n&&(n=!1),this.lengths=e,this.coords=t,this.hasIndeterminateRingOrder=n}return Object.defineProperty(e.prototype,"isPoint",{get:function(){return 0===this.lengths.length},enumerable:!1,configurable:!0}),e.prototype.forEachVertex=function(e){var t=0;this.lengths.length||e(this.coords[0],this.coords[1]);for(var n=0;n<this.lengths.length;n++){for(var i=this.lengths[n],o=0;o<i;o++)e(this.coords[2*(o+t)],this.coords[2*(o+t)+1]);t+=i}},e.prototype.clone=function(){return new e(this.lengths.slice(),this.coords.slice(),this.hasIndeterminateRingOrder)},e}();t.default=n}).apply(null,i))||(e.exports=o)},NRog:function(e,t,n){var i,o;i=[n.dj.c(e.i),t,n("zOht"),n("ma1f"),n("qsST"),n("LxLY"),n("Brhx"),n("sbqO"),n("z2+Q")],void 0===(o=(function(e,t,n,i,o,r,a,l,s){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var u=o.getLogger("esri.views.2d.engine.webgl.ClippingInfo"),c=function(e){return parseFloat(e)/100},f=function(e){function t(t,n){var i=e.call(this)||this;return i._clip=n,i._cache={},i.stage=t,i._handle=n.watch("version",(function(){return i._invalidate()})),i.ready(),i}return n.__extends(t,e),t.fromClipArea=function(e,n){return new t(e,n)},t.prototype._destroyGL=function(){r.isSome(this._cache.mesh)&&(this._cache.mesh.destroy(),this._cache.mesh=null),r.isSome(this._cache.vao)&&(this._cache.vao.dispose(),this._cache.vao=null)},t.prototype.destroy=function(){this._destroyGL(),this._handle.remove()},t.prototype.getVAO=function(e,t,n,i){var o=t.size,a=o[0],l=o[1];if("geometry"!==this._clip.type&&this._lastWidth===a&&this._lastHeight===l||(this._lastWidth=a,this._lastHeight=l,this._destroyGL()),r.isNone(this._cache.vao)){var u=this._createMesh(t,this._clip),c=u.getIndexBuffer(e),f=u.getVertexBuffers(e);this._cache.mesh=u,this._cache.vao=new s(e,n,i,f,c)}return this._cache.vao},t.prototype._invalidate=function(){this._destroyGL(),this.requestRender()},t.prototype._createScreenRect=function(e,t){var n=e.size,i=n[0],o=n[1],r="string"==typeof t.left?c(t.left)*i:t.left,a="string"==typeof t.right?c(t.right)*i:t.right,l="string"==typeof t.top?c(t.top)*o:t.top,s="string"==typeof t.bottom?c(t.bottom)*o:t.bottom,u=l;return{x:r,y:u,width:Math.max(i-a-r,0),height:Math.max(o-s-u,0)}},t.prototype._createMesh=function(e,t){switch(t.type){case"rect":return l.default.fromRect(this._createScreenRect(e,t));case"path":return l.default.fromPath(t);case"geometry":return l.default.fromGeometry(e,t);default:return u.error(new i("mapview-bad-type","Unable to create ClippingInfo mesh from clip of type: ${clip.type}")),l.default.fromRect({x:0,y:0,width:1,height:1})}},t}(a.DisplayObject);t.default=f}).apply(null,i))||(e.exports=o)},Nwkb:function(e,t,n){var i,o;i=[n.dj.c(e.i),t,n("DJpR")],void 0===(o=(function(e,t,n){"use strict";return function(){function e(e,t){this.rctx=e,this._vertexBuffer=n.BufferObject.createVertex(e,35044,new Uint16Array(t)),this._vao=new n.VertexArrayObject(e,{a_position:0},{geometry:[{name:"a_position",count:2,type:5122,offset:0,stride:4,normalized:!1}]},{geometry:this._vertexBuffer})}return e.prototype.bind=function(){this._vao.bind()},e.prototype.unbind=function(){this._vao.unbind()},e.prototype.dispose=function(){this._vao.dispose(!1),this._vertexBuffer.dispose()},e.prototype.draw=function(){this.rctx.bindVAO(this._vao),this.rctx.drawArrays(5,0,4)},e}()}).apply(null,i))||(e.exports=o)},PDSL:function(e,t,n){var i,o;i=[n.dj.c(e.i),t,n("zOht"),n("DJpR"),n("tI6k"),n("3+7H")],void 0===(o=(function(e,t,n,i,o,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var a=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return n.__extends(t,e),t.prototype.prepareState=function(e,t,n){var i=e.context,o=n&&-1!==n.indexOf("id");i.setBlendingEnabled(!o),i.setBlendFunctionSeparate(1,771,1,771),i.setColorMask(!0,!0,!0,!0),i.setStencilWriteMask(0),i.setStencilTestEnabled(!0),i.setStencilFunction(514,t.stencilRef,255)},t.prototype.draw=function(e,t,n){var i=this;if(t.commitChanges(e),t.visible){var o=this.getGeometryType(),r=t.getDisplayList(),a=t.getGeometry(o);a&&r&&(e.timeline.begin(this.name),r.byType(o,(function(o){i.drawGeometry(e,t,o,a,n)})),e.timeline.end(this.name))}},t.prototype._getVAO=function(e,t,n,o){return o.vao||(o.vao=new i.VertexArrayObject(e,n,t,o.vertexBufferMap,o.indexBuffer)),o.vao},t.prototype._setSharedUniforms=function(e,t,n){e.setUniform1f("u_pixelRatio",t.pixelRatio),e.setUniformMatrix3fv("u_dvsMat3",n.transforms.dvs),e.setUniformMatrix3fv("u_displayViewMat3",t.state.displayViewMat3),e.setUniformMatrix4fv("u_insideEffectMat4",t.rendererInfo.insideEffect),e.setUniformMatrix4fv("u_outsideEffectMat4",t.rendererInfo.outsideEffect),e.setUniform1fv("u_insideOpacities",t.rendererInfo.insideOpacities),e.setUniform1fv("u_outsideOpacities",t.rendererInfo.outsideOpacities),e.setUniform1i("u_attributeTextureSize",t.attributeView.size),e.setUniform1i("u_attributeData0",o.TEXTURE_BINDING_ATTRIBUTE_DATA_0),e.setUniform1i("u_attributeData1",o.TEXTURE_BINDING_ATTRIBUTE_DATA_1),e.setUniform1i("u_attributeData2",o.TEXTURE_BINDING_ATTRIBUTE_DATA_2),e.setUniform1i("u_attributeData3",o.TEXTURE_BINDING_ATTRIBUTE_DATA_3)},t}(r.default);t.default=a}).apply(null,i))||(e.exports=o)},Rpsm:function(e,t,n){var i,o;i=[n.dj.c(e.i),t,n("zOht"),n("LxLY"),n("lgZd"),n("j2SP"),n("tI6k"),n("JNkf"),n("Dos2"),n("3+7H")],void 0===(o=(function(e,t,n,i,o,r,a,l,s,u){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.WGLBrushVTLFill=void 0;var c=[1,1,1,1],f=function(e){function t(){var t=null!==e&&e.apply(this,arguments)||this;return t._color=r.vec4f32.create(),t._outlineColor=r.vec4f32.create(),t._fillProgramOptions={id:!1,dd:!1,pattern:!1},t._outlineProgramOptions={id:!1,dd:!1},t._patternMatrix=o.mat3f32.create(),t}return n.__extends(t,e),t.prototype.dispose=function(){},t.prototype.drawMany=function(e,t){var n=e.displayLevel,i=e.drawPhase,o=e.renderPass,r=e.styleLayerId,a=e.styleLayer,u=a.getPaintValue("fill-pattern",n),f=a.hasDataDrivenColor?c:a.getPaintValue("fill-color",n),d=a.hasDataDrivenOpacity?1:a.getPaintValue("fill-opacity",n),v=d*f[3],_=void 0!==u||v<1||a.hasDataDrivenFill;if(!_||"opaque"!==o){var m;this._color[0]=v*f[0],this._color[1]=v*f[1],this._color[2]=v*f[2],this._color[3]=v,i===l.WGLDrawPhase.HITTEST&&(m=s.u32to4Xu8(r+1));var p=a.getPaintValue("fill-translate",n),g=a.getPaintValue("fill-translate-anchor",n);this._drawFill(e,r,a,t,p,g,u,_,m),this._drawOutline(e,r,a,t,p,g,u,m,d)}},t.prototype._drawFill=function(e,t,n,o,r,s,u,c,f){var d=e.context,v=e.displayLevel,_=e.drawPhase,m=e.spriteMosaic,p=e.state;if(c||"translucent"!==e.renderPass){var g,h=void 0!==u,x=e.pixelRatio>a.VTL_HIGH_RES_CUTOFF?2:1,y=n.hasDataDrivenFill,b=e.painter.getVectorTileProgramCach(),T=_===l.WGLDrawPhase.HITTEST,C=(T?1:0)<<2|(y?1:0)<<1|(h?1:0),S=this._fillProgramOptions;S.id=T,S.dd=y,S.pattern=h;var D=b.getProgram(1,C,S);if(d.bindProgram(D),h){if(!(g=m.getMosaicItemPosition(u,!0)))return void d.bindProgram();D.setUniform2f("u_pattern_tl",g.tl[0],g.tl[1]),D.setUniform2f("u_pattern_br",g.br[0],g.br[1]),D.setUniform1i("u_texture",a.VTL_TEXTURE_BINDING_UNIT_SPRITES),m.bind(d,9729,g.page,a.VTL_TEXTURE_BINDING_UNIT_SPRITES)}D.setUniformMatrix3fv("u_displayMat3",1===s?p.displayMat3:p.displayViewMat3),D.setUniform2fv("u_fillTranslation",r),D.setUniform1f("u_depth",n.z+1/65536),D.setUniform4fv("u_color",this._color),T&&D.setUniform4fv("u_id",f);for(var I=0,P=o;I<P.length;I++){var w=P[I];if(w.layerData[t]){var z=w.layerData[t];z.prepareForRendering(d,b);var O=z.fillVertexArrayObject;if(!i.isNone(O)){if(d.bindVAO(O),D.setUniformMatrix3fv("u_dvsMat3",w.transforms.dvs),h){var V=Math.max(Math.pow(2,Math.round(v)-w.key.level),1),M=w.coordRange[0]/(x*w.size[0]*V),E=1/(g.size[1]*M);this._patternMatrix[0]=1/(g.size[0]*M),this._patternMatrix[4]=E,D.setUniformMatrix3fv("u_pattern_matrix",this._patternMatrix)}d.setStencilFunction(514,w.stencilRef,255),d.drawElements(4,z.fillIndexCount,5125,Uint32Array.BYTES_PER_ELEMENT*z.fillIndexStart),w.triangleCount+=z.fillIndexCount/3}}}}},t.prototype._drawOutline=function(e,t,n,o,r,a,s,u,f){var d=e.context,v=e.displayLevel,_=e.drawPhase,m=e.pixelRatio,p=e.state;if("opaque"!==e.renderPass){var g=void 0!==s;if(n.getPaintValue("fill-antialias",v)&&!g||n.hasDataDrivenOutlineColor){var h=e.painter.getVectorTileProgramCach(),x=n.hasDataDrivenOutline;if(n.outlineUsesFillColor){if(1!==this._color[3])return;this._outlineColor[0]=this._color[0],this._outlineColor[1]=this._color[1],this._outlineColor[2]=this._color[2],this._outlineColor[3]=this._color[3]}else{var y=n.hasDataDrivenOutlineColor?c:n.getPaintValue("fill-outline-color",v),b=f*y[3];this._outlineColor[0]=b*y[0],this._outlineColor[1]=b*y[1],this._outlineColor[2]=b*y[2],this._outlineColor[3]=b}var T=.75/m,C=_===l.WGLDrawPhase.HITTEST,S=(C?1:0)<<1|(x?1:0),D=this._outlineProgramOptions;D.id=C,D.dd=x;var I=h.getProgram(2,S,D);d.bindProgram(I),I.setUniformMatrix3fv("u_displayMat3",1===a?p.displayMat3:p.displayViewMat3),I.setUniform2fv("u_fillTranslation",r),I.setUniform1f("u_depth",n.z+1/65536),I.setUniform1f("u_outline_width",T),I.setUniform4fv("u_color",this._outlineColor),C&&I.setUniform4fv("u_id",u);for(var P=0,w=o;P<w.length;P++){var z=w[P];if(z.layerData[t]){var O=z.layerData[t];O.prepareForRendering(d,h);var V=O.outlineVertexArrayObject;i.isNone(V)||(d.bindVAO(V),I.setUniformMatrix3fv("u_dvsMat3",z.transforms.dvs),d.setStencilFunction(514,z.stencilRef,255),d.drawElements(4,O.outlineIndexCount,5125,Uint32Array.BYTES_PER_ELEMENT*O.outlineIndexStart),z.triangleCount+=O.outlineIndexCount/3)}}}}},t}(u.default);t.WGLBrushVTLFill=f}).apply(null,i))||(e.exports=o)},TQvW:function(e,t,n){var i,o;i=[n.dj.c(e.i),t,n("hPTP")],void 0===(o=(function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.background=void 0,t.background={name:"background",shaders:{vertexShader:n.resolveIncludes("background/background.vert"),fragmentShader:n.resolveIncludes("background/background.frag")},attributes:{a_pos:0}}}).apply(null,i))||(e.exports=o)},Uu9s:function(e,t,n){var i,o;i=[n.dj.c(e.i),t],void 0===(o=(function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default={background:{"background.frag":"uniform lowp vec4 u_color;\nvoid main() {\n  gl_FragColor = u_color;\n}","background.vert":"attribute vec2 a_pos;\nuniform highp mat3 u_dvsMat3;\nuniform mediump vec2 u_coord_range;\nuniform mediump float u_depth;\nvoid main() {\n  vec3 v_pos = u_dvsMat3 * vec3(u_coord_range * a_pos, 1.0);\n  gl_Position = vec4(v_pos.xy, 0.0, 1.0);\n}"},bitBlit:{"bitBlit.frag":"uniform lowp sampler2D u_tex;\nuniform lowp float u_opacity;\nvarying mediump vec2 v_uv;\nvoid main() {\n  lowp vec4 color = texture2D(u_tex, v_uv);\n  gl_FragColor = color *  u_opacity;\n}","bitBlit.vert":"attribute vec2 a_pos;\nattribute vec2 a_tex;\nvarying mediump vec2 v_uv;\nvoid main(void) {\n  gl_Position = vec4(a_pos, 0.0, 1.0);\n  v_uv = a_tex;\n}"},blend:{"blend.frag":"precision mediump float;\nuniform sampler2D u_layerTexture;\nuniform lowp float u_opacity;\nuniform lowp float u_inFadeOpacity;\n#ifndef NORMAL\nuniform sampler2D u_backbufferTexture;\n#endif\nvarying mediump vec2 v_uv;\nfloat rgb2v(in vec3 c) {\n  return max(c.x, max(c.y, c.z));\n}\nvec3 rgb2hsv(in vec3 c) {\n  vec4 K = vec4(0.0, -1.0 / 3.0, 2.0 / 3.0, -1.0);\n  vec4 p = c.g < c.b ? vec4(c.bg, K.wz) : vec4(c.gb, K.xy);\n  vec4 q = c.r < p.x ? vec4(p.xyw, c.r) : vec4(c.r, p.yzx);\n  float d = q.x - min(q.w, q.y);\n  float e = 1.0e-10;\n  return vec3(abs(q.z + (q.w - q.y) / (6.0 * d + e)), min(d / (q.x + e), 1.0), q.x);\n}\nvec3 hsv2rgb(in vec3 c) {\n  vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\n  vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\n  return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\n}\nvec3 tint(in vec3 Cb, in vec3 Cs) {\n  float vIn = rgb2v(Cb);\n  vec3 hsvTint = rgb2hsv(Cs);\n  vec3 hsvOut = vec3(hsvTint.x, hsvTint.y, vIn * hsvTint.z);\n  return hsv2rgb(hsvOut);\n}\nfloat overlay(in float Cb, in float Cs) {\n  return (1.0 - step(0.5, Cs)) * (1.0 - 2.0 * (1.0 - Cs ) * (1.0 - Cb)) + step(0.5, Cs) * (2.0 * Cs * Cb);\n}\nfloat colorDodge(in float Cb, in float Cs) {\n  return (Cb == 0.0) ? 0.0 : (Cs == 1.0) ? 1.0 : min(1.0, Cb / (1.0 - Cs));\n}\nfloat colorBurn(in float Cb, in float Cs) {\n return (Cb == 1.0) ? 1.0 : (Cs == 0.0) ? 0.0 : 1.0 - min(1.0, (1.0 - Cb) / Cs);\n}\nfloat hardLight(in float Cb, in float Cs) {\n  return (1.0 - step(0.5, Cs)) * (2.0 * Cs * Cb) + step(0.5, Cs) * (1.0 - 2.0 * (1.0 - Cs) * (1.0 - Cb));\n}\nfloat reflectBlend(in float Cb, in float Cs) {\n\treturn (Cs == 1.0) ? Cs : min(Cb * Cb / (1.0 - Cs), 1.0);\n}\nfloat softLight(in float Cb, in float Cs) {\n  if (Cs <= 0.5) {\n    return Cb - (1.0 - 2.0 * Cs) * Cb * (1.0 - Cb);\n  }\n  if (Cb <= 0.25) {\n    return Cb + (2.0 * Cs - 1.0) * Cb * ((16.0 * Cb - 12.0) * Cb + 3.0);\n  }\n  return Cb + (2.0 * Cs - 1.0) * (sqrt(Cb) - Cb);\n}\nfloat vividLight(in float Cb, in float Cs) {\n  return (1.0 - step(0.5, Cs)) * colorBurn(Cb, 2.0 * Cs) + step(0.5, Cs) * colorDodge(Cb, (2.0 * (Cs - 0.5)));\n}\nfloat minv3(in vec3 c) {\n  return min(min(c.r, c.g), c.b);\n}\nfloat maxv3(in vec3 c) {\n  return max(max(c.r, c.g), c.b);\n}\nfloat lumv3(in vec3 c) {\n  return dot(c, vec3(0.3, 0.59, 0.11));\n}\nfloat satv3(vec3 c) {\n  return maxv3(c) - minv3(c);\n}\nvec3 clipColor(vec3 color) {\n  float lum = lumv3(color);\n  float mincol = minv3(color);\n  float maxcol = maxv3(color);\n  if (mincol < 0.0) {\n    color = lum + ((color - lum) * lum) / (lum - mincol);\n  }\n  if (maxcol > 1.0) {\n    color = lum + ((color - lum) * (1.0 - lum)) / (maxcol - lum);\n  }\n  return color;\n}\nvec3 setLum(vec3 cbase, vec3 clum) {\n  float lbase = lumv3(cbase);\n  float llum = lumv3(clum);\n  float ldiff = llum - lbase;\n  vec3 color = cbase + vec3(ldiff);\n  return clipColor(color);\n}\nvec3 setLumSat(vec3 cbase, vec3 csat, vec3 clum)\n{\n  float minbase = minv3(cbase);\n  float sbase = satv3(cbase);\n  float ssat = satv3(csat);\n  vec3 color;\n  if (sbase > 0.0) {\n    color = (cbase - minbase) * ssat / sbase;\n  } else {\n    color = vec3(0.0);\n  }\n  return setLum(color, clum);\n}\nvoid main() {\n  vec4 src = texture2D(u_layerTexture, v_uv);\n#ifdef NORMAL\n  gl_FragColor = src *  u_opacity;\n#else\n  vec4 dst = texture2D(u_backbufferTexture, v_uv);\n  vec3 Cs = src.a == 0.0 ? src.rgb : vec3(src.rgb / src.a);\n  vec3 Cb = dst.a == 0.0 ? dst.rgb : vec3(dst.rgb / dst.a);\n  float as = u_opacity * src.a;\n  float ab = dst.a;\n  #ifdef DESTINATION_OVER\n    gl_FragColor = vec4(as * Cs * (1.0 - ab) + ab * Cb, as + ab - as * ab);\n  #endif\n  #ifdef SOURCE_IN\n    vec4 color = vec4(as * Cs * ab, as * ab);\n    vec4 fadeColor = (1.0 - u_opacity) * u_inFadeOpacity * vec4(ab * Cb, ab);\n    gl_FragColor = color + fadeColor;\n  #endif\n  #ifdef DESTINATION_IN\n    vec4 color = vec4(ab * Cb * as, ab * as);\n    vec4 fadeColor = (1.0 - u_opacity) * u_inFadeOpacity * vec4(ab * Cb, ab);\n    gl_FragColor = color + fadeColor;\n  #endif\n  #ifdef SOURCE_OUT\n    gl_FragColor = vec4(as * Cs * (1.0 - ab), as * (1.0 - ab));\n  #endif\n  #ifdef DESTINATION_OUT\n    gl_FragColor = vec4(ab * Cb * (1.0 - as), ab * (1.0 - as));\n  #endif\n  #ifdef SOURCE_ATOP\n    gl_FragColor = vec4(as * Cs * ab + ab * Cb * (1.0 - as), ab);\n  #endif\n  #ifdef DESTINATION_ATOP\n    gl_FragColor = vec4(as * Cs * (1.0 - ab) + ab * Cb * as, as);\n  #endif\n  #ifdef XOR\n    gl_FragColor = vec4(as * Cs * (1.0 - ab) + ab * Cb * (1.0 - as),\n                        as * (1.0 - ab) + ab * (1.0 - as));\n  #endif\n  #ifdef MULTIPLY\n    gl_FragColor = vec4(as * Cs * ab * Cb + (1.0 - ab) * as * Cs + (1.0 - as) * ab * Cb,\n                        as + ab * (1.0 - as));\n  #endif\n  #ifdef SCREEN\n    gl_FragColor = vec4((Cs + Cb - Cs * Cb) * as * ab + Cs * as * (1.0 - ab) + Cb * ab *(1.0 - as),\n                        as + ab * (1.0 - as));\n  #endif\n  #ifdef OVERLAY\n    vec3 f = vec3(overlay(Cb.r, Cs.r), overlay(Cb.g, Cs.g), overlay(Cb.b, Cs.b));\n    gl_FragColor = vec4(f * as * ab + Cs * as * (1.0 - ab) + Cb * ab *(1.0 - as),\n                        as + ab * (1.0 - as));\n  #endif\n  #ifdef DARKEN\n    gl_FragColor = vec4(min(Cs, Cb) * as * ab + Cs * as * (1.0 - ab) + Cb * ab *(1.0 - as),\n                        as + ab * (1.0 - as));\n  #endif\n  #ifdef LIGHTER\n    gl_FragColor = vec4(as * Cs + ab * Cb, as + ab);\n  #endif\n  #ifdef LIGHTEN\n    gl_FragColor = vec4(max(Cs, Cb) * as * ab + Cs * as * (1.0 - ab) + Cb * ab *(1.0 - as),\n                        as + ab * (1.0 - as));\n  #endif\n  #ifdef COLOR_DODGE\n    vec3 f = vec3(colorDodge(Cb.r, Cs.r), colorDodge(Cb.g, Cs.g), colorDodge(Cb.b, Cs.b));\n    gl_FragColor = vec4(f * as * ab + Cs * as * (1.0 - ab) + Cb * ab *(1.0 - as),\n                        as + ab * (1.0 - as));\n  #endif\n  #ifdef COLOR_BURN\n    vec3 f = vec3(colorBurn(Cb.r, Cs.r), colorBurn(Cb.g, Cs.g), colorBurn(Cb.b, Cs.b));\n    gl_FragColor = vec4(f * as * ab + Cs * as * (1.0 - ab) + Cb * ab *(1.0 - as),\n                        as + ab * (1.0 - as));\n  #endif\n  #ifdef HARD_LIGHT\n    vec3 f = vec3(hardLight(Cb.r, Cs.r), hardLight(Cb.g, Cs.g), hardLight(Cb.b, Cs.b));\n    gl_FragColor = vec4(f * as * ab + Cs * as * (1.0 - ab) + Cb * ab *(1.0 - as),\n                        as + ab * (1.0 - as));\n  #endif\n  #ifdef SOFT_LIGHT\n    vec3 f = vec3(softLight(Cb.r, Cs.r), softLight(Cb.g, Cs.g), softLight(Cb.b, Cs.b));\n    gl_FragColor = vec4(f * as * ab + Cs * as * (1.0 - ab) + Cb * ab *(1.0 - as),\n                        as + ab * (1.0 - as));\n  #endif\n  #ifdef DIFFERENCE\n    gl_FragColor = vec4(abs(Cb - Cs) * as * ab + Cs * as * (1.0 - ab) + Cb * ab *(1.0 - as),\n                        as + ab * (1.0 - as));\n  #endif\n  #ifdef EXCLUSION\n     vec3 f = Cs + Cb - 2.0 * Cs * Cb;\n     gl_FragColor = vec4(f * as * ab + Cs * as * (1.0 - ab) + Cb * ab *(1.0 - as),\n                        as + ab * (1.0 - as));\n  #endif\n  #ifdef INVERT\n    gl_FragColor = vec4((1.0 - Cb) * as * ab + Cb * ab * (1.0 - as), ab);\n  #endif\n  #ifdef VIVID_LIGHT\n    vec3 f = vec3(vividLight(Cb.r, Cs.r),\n                  vividLight(Cb.g, Cs.g),\n                  vividLight(Cb.b, Cs.b));\n    gl_FragColor = vec4(f * as * ab + Cs * as * (1.0 - ab) + Cb * ab *(1.0 - as),\n                        as + ab * (1.0 - as));\n  #endif\n  #ifdef HUE\n    vec3 f = setLumSat(Cs,Cb,Cb);\n    gl_FragColor = vec4(f * as * ab + Cs * as * (1.0 - ab) + Cb * ab *(1.0 - as),\n                        as + ab * (1.0 - as));\n  #endif\n  #ifdef SATURATION\n    vec3 f = setLumSat(Cb,Cs,Cb);\n    gl_FragColor = vec4(f * as * ab + Cs * as * (1.0 - ab) + Cb * ab *(1.0 - as),\n                        as + ab * (1.0 - as));\n  #endif\n  #ifdef COLOR\n    vec3 f = setLum(Cs,Cb);\n    gl_FragColor = vec4(f * as * ab + Cs * as * (1.0 - ab) + Cb * ab *(1.0 - as),\n                        as + ab * (1.0 - as));\n  #endif\n  #ifdef LUMINOSITY\n    vec3 f = setLum(Cb,Cs);\n    gl_FragColor = vec4(f * as * ab + Cs * as * (1.0 - ab) + Cb * ab *(1.0 - as),\n                        as + ab * (1.0 - as));\n  #endif\n  #ifdef PLUS\n    gl_FragColor = clamp(vec4(src.r + Cb.r, src.g + Cb.g, src.b + Cb.b, as + ab), 0.0, 1.0);\n  #endif\n  #ifdef MINUS\n     gl_FragColor = vec4(clamp(vec3(Cb.r - src.r, Cb.g - src.g, Cb.b - src.b), 0.0, 1.0), ab * as);\n  #endif\n  #ifdef AVERAGE\n     vec3 f = (Cb + Cs) / 2.0;\n     gl_FragColor = vec4(f * as * ab + Cs * as * (1.0 - ab) + Cb * ab *(1.0 - as),\n                        as + ab * (1.0 - as));\n  #endif\n  #ifdef REFLECT\n    vec3 f = vec3(reflectBlend(Cb.r, Cs.r),\n                  reflectBlend(Cb.g, Cs.g),\n                  reflectBlend(Cb.b, Cs.b));\n    gl_FragColor = vec4(f * as * ab + Cs * as * (1.0 - ab) + Cb * ab *(1.0 - as),\n                        as + ab * (1.0 - as));\n  #endif\n#endif\n}","blend.vert":"attribute vec2 a_position;\nvarying mediump vec2 v_uv;\nvoid main(void) {\n  gl_Position = vec4(a_position , 0.0, 1.0);\n  v_uv = (a_position + 1.0) / 2.0;\n}"},filtering:{"bicubic.glsl":"vec4 computeWeights(float v) {\n  float b = 1.0 / 6.0;\n  float v2 = v * v;\n  float v3 = v2 * v;\n  float w0 = b * (-v3 + 3.0 * v2 - 3.0 * v + 1.0);\n  float w1 = b * (3.0 * v3  - 6.0 * v2 + 4.0);\n  float w2 = b * (-3.0 * v3 + 3.0 * v2 + 3.0 * v + 1.0);\n  float w3 = b * v3;\n  return vec4(w0, w1, w2, w3);\n}\nvec4 bicubicOffsetsAndWeights(float v) {\n  vec4 w = computeWeights(v);\n  float g0 = w.x + w.y;\n  float g1 = w.z + w.w;\n  float h0 = 1.0 - (w.y / g0) + v;\n  float h1 = 1.0 + (w.w / g1) - v;\n  return vec4(h0, h1, g0, g1);\n}\nvec4 sampleBicubicBSpline(sampler2D sampler, vec2 coords, vec2 texSize) {\n  vec2 eX = vec2(1.0 / texSize.x, 0.0);\n  vec2 eY = vec2(0.0, 1.0 / texSize.y);\n  vec2 texel = coords * texSize - 0.5;\n  vec3 hgX = bicubicOffsetsAndWeights(fract(texel).x).xyz;\n  vec3 hgY = bicubicOffsetsAndWeights(fract(texel).y).xyz;\n  vec2 coords10 = coords + hgX.x * eX;\n  vec2 coords00 = coords - hgX.y * eX;\n  vec2 coords11 = coords10 + hgY.x * eY;\n  vec2 coords01 = coords00 + hgY.x * eY;\n  coords10 = coords10 - hgY.y * eY;\n  coords00 = coords00 - hgY.y * eY;\n  vec4 color00 = texture2D(sampler, coords00);\n  vec4 color10 = texture2D(sampler, coords10);\n  vec4 color01 = texture2D(sampler, coords01);\n  vec4 color11 = texture2D(sampler, coords11);\n  color00 = mix(color00, color01, hgY.z);\n  color10 = mix(color10, color11, hgY.z);\n  color00 = mix(color00, color10, hgX.z);\n  return color00;\n}","bilinear.glsl":"vec4 sampleBilinear(sampler2D sampler, vec2 coords, vec2 texSize) {\n  vec2 texelStart = floor(coords * texSize);\n  vec2 coord0 = texelStart / texSize;\n  vec2 coord1 = (texelStart +  vec2(1.0, 0.0)) / texSize;\n  vec2 coord2 = (texelStart +  vec2(0.0, 1.0)) / texSize;\n  vec2 coord3 = (texelStart +  vec2(1.0, 1.0)) / texSize;\n  vec4 color0 = texture2D(sampler, coord0);\n  vec4 color1 = texture2D(sampler, coord1);\n  vec4 color2 = texture2D(sampler, coord2);\n  vec4 color3 = texture2D(sampler, coord3);\n  vec2 blend = fract(coords * texSize);\n  vec4 color01 = mix(color0, color1, blend.x);\n  vec4 color23 = mix(color2, color3, blend.x);\n  return mix(color01, color23, blend.y);\n}","epx.glsl":"vec4 sampleEPX(sampler2D sampler, float size, vec2 coords, vec2 texSize) {\n  vec2 invSize = 1.0 / texSize;\n  vec2 texel = coords * texSize;\n  vec2 texel_i = floor(texel);\n  vec2 texel_frac = fract(texel);\n  vec4 colorP = texture2D(sampler, texel_i * invSize);\n  vec4 colorP1 = vec4(colorP);\n  vec4 colorP2 = vec4(colorP);\n  vec4 colorP3 = vec4(colorP);\n  vec4 colorP4 = vec4(colorP);\n  vec4 colorA = texture2D(sampler, (texel_i - vec2(0.0, 1.0)) * invSize);\n  vec4 colorB = texture2D(sampler, (texel_i + vec2(1.0, 0.0)) * invSize);\n  vec4 colorC = texture2D(sampler, (texel_i - vec2(1.0, 0.0)) * invSize);\n  vec4 colorD = texture2D(sampler, (texel_i + vec2(0.0, 1.0)) * invSize);\n  if (colorC == colorA && colorC != colorD && colorA != colorB) {\n    colorP1 = colorA;\n  }\n  if (colorA == colorB && colorA != colorC && colorB != colorD) {\n    colorP2 = colorB;\n  }\n  if (colorD == colorC && colorD != colorB && colorC != colorA) {\n    colorP3 = colorC;\n  }\n  if (colorB == colorD && colorB != colorA && colorD != colorC) {\n    colorP4 = colorD;\n  }\n  vec4 colorP12 = mix(colorP1, colorP2, texel_frac.x);\n  vec4 colorP34 = mix(colorP1, colorP2, texel_frac.x);\n  return mix(colorP12, colorP34, texel_frac.y);\n}"},fx:{integrate:{"integrate.frag":"precision mediump float;\nuniform lowp sampler2D u_sourceTexture;\nuniform lowp sampler2D u_maskTexture;\nuniform mediump float u_zoomLevel;\nuniform highp float u_timeDelta;\nuniform highp float u_animationTime;\nvarying highp vec2 v_texcoord;\n#include <materials/utils.glsl>\nvoid main()\n{\n#ifdef DELTA\n  vec4 texel = texture2D(u_sourceTexture, v_texcoord);\n  vec4 data0 = texture2D(u_maskTexture, v_texcoord);\n  float flags = data0.r * 255.0;\n  float groupMinZoom = data0.g * 255.0;\n  float isVisible = getFilterBit(flags, 0);\n  float wouldClip = step(groupMinZoom, u_zoomLevel);\n  float direction = wouldClip * 1.0 + (1.0 - wouldClip) * -1.0;\n  float dt = u_timeDelta / max(u_animationTime, 0.0001);\n  vec4 nextState = vec4(texel + direction * dt);\n  gl_FragColor =  vec4(nextState);\n#elif defined(UPDATE)\n  vec4 texel = texture2D(u_sourceTexture, v_texcoord);\n  gl_FragColor = texel;\n#endif\n}","integrate.vert":"precision mediump float;\nattribute vec2 a_pos;\nvarying highp vec2 v_texcoord;\nvoid main()\n{\n  v_texcoord = a_pos;\n  gl_Position = vec4(a_pos * 2.0 - 1.0, 0.0, 1.0);\n}"}},highlight:{"blur.frag":"varying mediump vec2 v_texcoord;\nuniform mediump vec4 u_direction;\nuniform mediump mat4 u_channelSelector;\nuniform mediump vec4 u_sigmas;\nuniform sampler2D u_texture;\nmediump vec4 gauss4(mediump vec2 dir) {\n  return exp(-dot(dir, dir) / (2.0 * u_sigmas * u_sigmas));\n}\nmediump float gauss1(mediump vec2 dir) {\n  return exp(-dot(dir, dir) / (2.0 * u_sigmas[3] * u_sigmas[3]));\n}\nmediump vec4 selectChannel(mediump vec4 sample) {\n  return u_channelSelector * sample;\n}\nvoid accumGauss4(mediump float i, inout mediump vec4 tot, inout mediump vec4 weight) {\n  mediump vec4 w = gauss4(i * u_direction.xy);\n  tot += selectChannel(texture2D(u_texture, v_texcoord + i * u_direction.zw)) * w;\n  weight += w;\n}\nvoid accumGauss1(mediump float i, inout mediump float tot, inout mediump float weight) {\n  mediump float w = gauss1(i * u_direction.xy);\n  tot += selectChannel(texture2D(u_texture, v_texcoord + i * u_direction.zw))[3] * w;\n  weight += w;\n}\nvoid main(void) {\n  mediump float tot = 0.0;\n  mediump float weight = 0.0;\n  accumGauss1(-4.0, tot, weight);\n  accumGauss1(-3.0, tot, weight);\n  accumGauss1(-2.0, tot, weight);\n  accumGauss1(-1.0, tot, weight);\n  accumGauss1(0.0, tot, weight);\n  accumGauss1(1.0, tot, weight);\n  accumGauss1(2.0, tot, weight);\n  accumGauss1(3.0, tot, weight);\n  accumGauss1(4.0, tot, weight);\n  gl_FragColor = vec4(0.0, 0.0, 0.0, tot / weight);\n}","highlight.frag":"varying mediump vec2 v_texcoord;\nuniform sampler2D u_texture;\nuniform mediump vec4 u_sigmas;\nuniform sampler2D u_shade;\nuniform mediump vec2 u_minMaxDistance;\nmediump float estimateDistance() {\n  mediump float sigma = u_sigmas[3];\n  mediump float y = texture2D(u_texture, v_texcoord)[3];\n  const mediump float y0 = 0.5;\n  mediump float m0 = 1.0 / (sqrt(2.0 * 3.1415) * sigma);\n  mediump float d = (y - y0) / m0;\n  return d;\n}\nmediump vec4 shade(mediump float d) {\n  mediump float mappedDistance = (d - u_minMaxDistance.x) / (u_minMaxDistance.y - u_minMaxDistance.x);\n  mappedDistance = clamp(mappedDistance, 0.0, 1.0);\n  return texture2D(u_shade, vec2(mappedDistance, 0.5));\n}\nvoid main(void) {\n  mediump float d = estimateDistance();\n  gl_FragColor = shade(d);\n}","textured.vert":"attribute mediump vec2 a_position;\nattribute mediump vec2 a_texcoord;\nvarying mediump vec2 v_texcoord;\nvoid main(void) {\n  gl_Position = vec4(a_position, 0.0, 1.0);\n  v_texcoord = a_texcoord;\n}"},magnifier:{"magnifier.frag":"uniform lowp vec4 u_background;\nuniform mediump sampler2D u_readbackTexture;\nuniform mediump sampler2D u_maskTexture;\nuniform mediump sampler2D u_overlyTexture;\nvarying mediump vec2 v_texCoord;\nvoid main(void)\n{\n  lowp vec4 color = texture2D(u_readbackTexture, v_texCoord);\n  color = color + (1.0 - color.a) * u_background;\n  lowp vec4 mask_color = texture2D(u_maskTexture, v_texCoord);\n  lowp float gray = 1.0 - dot(mask_color, vec4(0.3, 0.59, 0.11, 0));\n  color *= gray;\n  lowp vec4 overley_color = texture2D(u_overlyTexture, v_texCoord);\n  overley_color.rgb *= overley_color.a;\n  gl_FragColor = overley_color + (1.0 - overley_color.a) * color;\n}","magnifier.vert":"precision mediump float;\nattribute mediump vec2 a_pos;\nuniform mediump vec2 u_drawPos;\nuniform mediump float u_width;\nuniform mediump float u_height;\nvarying mediump vec2 v_texCoord;\nvoid main(void)\n{\n  v_texCoord = a_pos;\n  vec2 coord = u_drawPos + vec2(a_pos - 0.5) * vec2(u_width, u_height);\n  gl_Position = vec4(coord, 0.0, 1.0);\n}"},materials:{"attributeData.glsl":"uniform highp sampler2D u_attributeData0;\nuniform highp sampler2D u_attributeData1;\nuniform highp sampler2D u_attributeData2;\nuniform highp sampler2D u_attributeData3;\nuniform highp int u_attributeTextureSize;\nhighp vec2 getAttributeDataCoords(in highp vec4 id) {\n  highp vec4 texel = unpackDisplayIdTexel(id);\n  highp float size = float(u_attributeTextureSize);\n  highp float u32 = float(int(texel.r) + int(texel.g) * 256 + int(texel.b) * 256 * 256 + int(texel.a) * 256 * 256 * 256);\n  highp float col = mod(u32, size);\n  highp float row = (u32 - col) / size;\n  highp float u = col / size;\n  highp float v = row / size;\n  return vec2(u, v);\n}\nhighp vec4 getAttributeData0(in highp vec4 id) {\n  vec2 coords = getAttributeDataCoords(id);\n  return texture2D(u_attributeData0, coords);\n}\nhighp vec4 getAttributeData1(in highp vec4 id) {\n  highp vec2 coords = getAttributeDataCoords(id);\n  return texture2D(u_attributeData1, coords);\n}\nhighp vec4 getAttributeData2(in highp vec4 id) {\n  highp vec2 coords = getAttributeDataCoords(id);\n  return texture2D(u_attributeData2, coords);\n}\nhighp vec4 getAttributeData3(in highp vec4 id) {\n  highp vec2 coords = getAttributeDataCoords(id);\n  return texture2D(u_attributeData3, coords);\n}\nfloat u88VVToFloat(in vec2 v) {\n  bool isMagic = v.x == 255.0 && v.y == 255.0;\n  if (isMagic) {\n    return NAN_MAGIC_NUMBER;\n  }\n  return (v.x + v.y * float(0x100)) - 32768.0;\n}","constants.glsl":"const float C_DEG_TO_RAD = 3.14159265359 / 180.0;\nconst float C_256_TO_RAD = 3.14159265359 / 128.0;\nconst float SIGNED_BYTE_TO_UNSIGNED = 128.0;\nconst float POSITION_PRECISION = 1.0 / 8.0;\nconst float FILL_POSITION_PRECISION = 1.0 / 1.0;\nconst float SOFT_EDGE_RATIO = 1.0;\nconst float THIN_LINE_WIDTH_FACTOR = 1.1;\nconst float THIN_LINE_HALF_WIDTH = 1.0;\nconst float EXTRUDE_SCALE_PLACEMENT_PADDING = 1.0 / 4.0;\nconst float OFFSET_PRECISION = 1.0 / 8.0;\nconst float OUTLINE_SCALE = 1.0 / 5.0;\nconst float SDF_FONT_SIZE = 24.0;\nconst float MAX_SDF_DISTANCE = 8.0;\nconst float PLACEMENT_PADDING = 8.0;\nconst float EPSILON = 0.0000001;\nconst int MAX_FILTER_COUNT = 2;\nconst int ATTR_VV_SIZE = 0;\nconst int ATTR_VV_COLOR = 1;\nconst int ATTR_VV_OPACITY = 2;\nconst int ATTR_VV_ROTATION = 3;\nconst highp float NAN_MAGIC_NUMBER = 1e-30;","effects.glsl":"uniform highp mat4 u_insideEffectMat4[ MAX_FILTER_COUNT ];\nuniform highp mat4 u_outsideEffectMat4[ MAX_FILTER_COUNT ];\nuniform highp float u_insideOpacities[ MAX_FILTER_COUNT ];\nuniform highp float u_outsideOpacities[ MAX_FILTER_COUNT ];\nvec4 getEffectColor(in vec4 color, in float filterFlags) {\n  vec4 rgbw = vec4(color.a > 0.0 ? color.rgb / color.a : vec3(0.0), 1.0);\n  float a = color.a;\n  for (int i = 1; i < EFFECT_COUNT + 1; i++) {\n    float bit = getFilterBit(filterFlags, i);\n    rgbw = u_insideEffectMat4[ i ] * (bit  * rgbw) + u_outsideEffectMat4[ i ] * ((1.0 - bit) * rgbw);\n    a    = u_insideOpacities[ i ]  * (bit  * a)    + u_outsideOpacities[ i ]  * ((1.0 - bit) * a);\n  }\n  return vec4(rgbw.rgb * a, a);\n}\nvec3 applyFilter(inout vec4 color, inout vec3 pos, in float filterFlags) {\n  vec4 rgbw = vec4(color.a > 0.0 ? color.rgb / color.a : vec3(0.0), 1.0);\n  float a = color.a;\n  for (int i = 0; i < EFFECT_COUNT + 1; i++) {\n    float bit = getFilterBit(filterFlags, i);\n    rgbw = u_insideEffectMat4[ i ] * (bit  * rgbw) + u_outsideEffectMat4[ i ] * ((1.0 - bit) * rgbw);\n    a    = u_insideOpacities[ i ]  * (bit  * a)    + u_outsideOpacities[ i ]  * ((1.0 - bit) * a);\n  }\n  color.rgb = rgbw.rgb * a;\n  color.a = a;\n  pos.z += 2.0 * (1.0 - getFilterBit(filterFlags, 0));\n#ifdef HIGHLIGHT\n  pos.z += 2.0 * (1.0 - getHighlightBit(filterFlags));\n#endif\n  return pos;\n}\nvec3 applyFilterLabels(inout vec4 color, inout vec3 pos, in float filterFlags) {\n  float bit = getFilterBit(filterFlags, 0);\n  pos.z += 2.0 * (1.0 - bit);\n#ifndef OUTSIDE_LABELS_VISIBLE\n  for (int i = 1; i < EFFECT_COUNT + 1; i++) {\n    float bit = getFilterBit(filterFlags, i);\n    pos.z += 2.0 * (1.0 - bit);\n  }\n#endif\n  return pos;\n}",fill:{"common.glsl":"#ifdef PATTERN\nuniform mediump vec2 u_mosaicSize;\n#endif\n#ifdef DOT_DENSITY\nuniform lowp vec4 u_isActive[ 2 ];\nuniform highp float u_dotValue;\nuniform highp float u_tileDotsOverArea;\nuniform highp float u_dotTextureDotCount;\nuniform mediump float u_tileZoomFactor;\n#endif\nvarying vec3 v_pos;\nvarying lowp float v_opacity;\nvarying lowp vec4 v_color;\nvarying highp vec4 v_id;\nvarying highp float v_flags;\n#ifdef PATTERN\nvarying mediump vec4 v_tlbr;\nvarying mediump vec2 v_tileTextureCoord;\n#endif\n#ifdef DOT_DENSITY\nvarying highp vec2 v_dotTextureCoords;\nvarying highp vec4 v_dotThresholds[ 2 ];\n#endif","fill.frag":"precision highp float;\n#include <materials/constants.glsl>\n#include <materials/utils.glsl>\n#include <materials/fill/common.glsl>\n#ifdef DOT_DENSITY\n#include <materials/effects.glsl>\n#endif\n#ifdef PATTERN\nuniform lowp sampler2D u_texture;\n#endif\n#ifdef DOT_DENSITY\nuniform mediump mat4 u_dotColors[ 2 ];\nuniform sampler2D u_dotTextures[ 2 ];\nuniform vec4 u_dotBackgroundColor;\n#endif\nvoid main() {\n#ifdef ID\n  gl_FragColor = v_id;\n#elif defined(PATTERN)\n  mediump vec2 normalizedTextureCoord = mod(v_tileTextureCoord, 1.0);\n  mediump vec2 samplePos = mix(v_tlbr.xy, v_tlbr.zw, normalizedTextureCoord);\n  lowp vec4 color = texture2D(u_texture, samplePos);\n  gl_FragColor = v_opacity * v_color * color;\n#elif defined(DOT_DENSITY) && !defined(HIGHLIGHT)\n  vec4 textureThresholds0 = texture2D(u_dotTextures[0], v_dotTextureCoords);\n  vec4 textureThresholds1 = texture2D(u_dotTextures[1], v_dotTextureCoords);\n  vec4 difference0 = v_dotThresholds[0] - textureThresholds0;\n  vec4 difference1 = v_dotThresholds[1] - textureThresholds1;\n#ifdef DD_DOT_BLENDING\n  vec4 isPositive0 = step(0.0, difference0);\n  vec4 isPositive1 = step(0.0, difference1);\n  float weightSum = dot(isPositive0, difference0) + dot(isPositive1, difference1);\n  float lessThanEqZero = step(weightSum, 0.0);\n  float greaterThanZero = 1.0 - lessThanEqZero ;\n  float divisor = (weightSum + lessThanEqZero);\n  vec4 weights0 = difference0 * isPositive0 / divisor;\n  vec4 weights1 = difference1 * isPositive1 / divisor;\n  vec4 dotColor = u_dotColors[0] * weights0 + u_dotColors[1] * weights1;\n  vec4 preEffectColor = greaterThanZero * dotColor + lessThanEqZero * u_dotBackgroundColor;\n#else\n  float diffMax = max(max4(difference0), max4(difference1));\n  float lessThanZero = step(diffMax, 0.0);\n  float greaterOrEqZero = 1.0 - lessThanZero;\n  vec4 isMax0 = step(diffMax, difference0);\n  vec4 isMax1 = step(diffMax, difference1);\n  vec4 dotColor = u_dotColors[0] * isMax0 + u_dotColors[1] * isMax1;\n  vec4 preEffectColor = greaterOrEqZero * dotColor + lessThanZero * u_dotBackgroundColor;\n#endif\n  gl_FragColor = getEffectColor(preEffectColor, v_flags);\n#else\n  gl_FragColor = v_opacity * v_color;\n#endif\n#ifdef HIGHLIGHT\n  gl_FragColor.a = 1.0;\n#endif\n}","fill.vert":"precision highp float;\n#ifdef DOT_DENSITY\nattribute float a_inverseArea;\nvec4 a_color = vec4(0.0, 0.0, 0.0, 1.0);\nvec4 a_aux3 = vec4(0.0);\n#else\nattribute vec4 a_color;\nattribute vec4 a_tlbr;\nattribute vec4 a_aux1;\nattribute vec2 a_aux2;\nattribute vec4 a_aux3;\n#endif\n#include <materials/vcommon.glsl>\n#include <materials/fill/common.glsl>\n#ifdef DOT_DENSITY\nvec4 dotThreshold(vec4 featureAttrOverFeatureArea, float dotValue, float tileDotsOverArea) {\n  return featureAttrOverFeatureArea * (1.0 / dotValue)  * (1.0 / tileDotsOverArea);\n}\n#endif\nvoid main()\n{\n  INIT;\n  float a_bitSet = a_aux3.a;\n  v_color     = getColor(a_color, a_bitSet, 0);\n  v_opacity   = getOpacity();\n  v_id        = norm(a_id);\n  v_pos       = u_dvsMat3 * vec3(a_pos * FILL_POSITION_PRECISION, 1.);\n  v_flags     = getFilterFlags();\n#ifdef PATTERN\n  vec2 aux2 = (1.0 / SIGNED_BYTE_TO_UNSIGNED) * a_aux2;\n  float width = u_zoomFactor * a_aux1.x * aux2.x;\n  float height = u_zoomFactor * a_aux1.y * aux2.y;\n  float angle = C_256_TO_RAD * a_aux3.z;\n  float sinA = sin(angle);\n  float cosA = cos(angle);\n  mat3 patternMatrix = mat3(cosA / width, sinA / height, 0,\n                           -sinA / width, cosA / height, 0,\n                            0,            0,             1);\n  vec2 symbolOffset = (a_aux1.zw - SIGNED_BYTE_TO_UNSIGNED) / vec2(width, height);\n  v_tileTextureCoord = (patternMatrix * vec3(a_pos * FILL_POSITION_PRECISION, 1.0)).xy - symbolOffset;\n  v_tlbr = a_tlbr / u_mosaicSize.xyxy;\n#elif defined(DOT_DENSITY)\n  vec4 ddAttributeData0 = getAttributeData2(a_id) * u_isActive[0] * a_inverseArea;\n  vec4 ddAttributeData1 = getAttributeData3(a_id) * u_isActive[1] * a_inverseArea;\n  float size = u_tileZoomFactor * 512.0 * 1.0 / u_pixelRatio;\n  v_dotThresholds[0] = dotThreshold(ddAttributeData0, u_dotValue, u_tileDotsOverArea);\n  v_dotThresholds[1] = dotThreshold(ddAttributeData1, u_dotValue, u_tileDotsOverArea);\n  v_dotTextureCoords = (a_pos * FILL_POSITION_PRECISION + 0.5) / size;\n#endif\n  gl_Position = vec4(applyFilter(v_color, v_pos, v_flags), 1.0);\n}"},icon:{"common.glsl":"uniform lowp vec2 u_mosaicSize;\nvarying lowp vec4 v_color;\nvarying highp vec4 v_id;\nvarying highp vec4 v_sizeTex;\nvarying mediump vec3 v_pos;\nvarying highp float v_filters;\nvarying lowp float v_opacity;\n#ifdef SDF\nvarying lowp vec4 v_outlineColor;\nvarying mediump float v_outlineWidth;\nvarying mediump float v_distRatio;\nvarying mediump float v_overridingOutlineColor;\nvarying mediump float v_isThin;\n#endif","icon.frag":"precision mediump float;\n#include <materials/constants.glsl>\n#include <materials/utils.glsl>\n#include <util/encoding.glsl>\n#include <materials/effects.glsl>\n#include <materials/constants.glsl>\n#include <materials/icon/common.glsl>\nuniform lowp sampler2D u_texture;\nvoid main()\n{\n  vec2 v_size = v_sizeTex.xy;\n  vec2 v_tex  = v_sizeTex.zw;\n#ifdef SDF\n  lowp vec4 fillPixelColor = v_color;\n  float d = 0.5 - rgba2float(texture2D(u_texture, v_tex));\n  float size = max(v_size.x, v_size.y);\n  float dist = d * size * SOFT_EDGE_RATIO * v_distRatio;\n  fillPixelColor *= clamp(0.5 - dist, 0.0, 1.0);\n  float outlineWidth = v_outlineWidth;\n  #ifdef HIGHLIGHT\n    outlineWidth = max(outlineWidth, 4.0 * v_isThin);\n  #endif\n  if (outlineWidth > 0.25) {\n    lowp vec4 outlinePixelColor = v_overridingOutlineColor * v_color + (1.0 - v_overridingOutlineColor) * v_outlineColor;\n    float clampedOutlineSize = min(outlineWidth, size);\n    outlinePixelColor *= clamp(0.5 - abs(dist) + clampedOutlineSize * 0.5, 0.0, 1.0);\n    gl_FragColor = v_opacity * ((1.0 - outlinePixelColor.a) * fillPixelColor + outlinePixelColor);\n  }\n  else {\n    gl_FragColor = v_opacity * fillPixelColor;\n  }\n#else\n   lowp vec4 texColor = texture2D(u_texture, v_tex);\n   gl_FragColor = v_opacity * getEffectColor(texColor, v_filters);\n#endif\n#ifdef HIGHLIGHT\n  gl_FragColor.a = step(1.0 / 255.0, gl_FragColor.a);\n#endif\n#ifdef ID\n  if (gl_FragColor.a < 1.0 / 255.0) {\n    discard;\n  }\n  gl_FragColor = v_id;\n#endif\n}","icon.vert":"precision highp float;\nattribute vec4 a_color;\nattribute vec4 a_outlineColor;\nattribute vec4 a_sizeAndOutlineWidth;\nattribute vec2 a_vertexOffset;\nattribute vec2 a_texCoords;\nattribute vec4 a_bitSetAndDistRatio;\n#include <materials/vcommon.glsl>\n#include <materials/icon/common.glsl>\nvec2 getMarkerSize(inout vec2 offset, inout vec2 baseSize, inout float outlineSize, in float referenceSize, in float bitSet) {\n#ifdef VV_SIZE\n  float r = getSize(baseSize.y) / referenceSize;\n  baseSize.xy *= r;\n  offset.xy *= r;\n  float scaleSymbolProportionally = getBit(bitSet, 3);\n  outlineSize *= scaleSymbolProportionally * (r - 1.0) + 1.0;\n#endif\n  return baseSize;\n}\nvec3 getOffset(in vec2 in_offset, float a_bitSet) {\n  float isMapAligned = getBit(a_bitSet, 0);\n  vec3  offset       = getRotation() * vec3(in_offset, 0.0);\n  return getMatrix(isMapAligned) * offset;\n}\nvoid main()\n{\n  INIT;\n  vec2  a_size   = a_sizeAndOutlineWidth.xy * a_sizeAndOutlineWidth.xy / 128.0;\n  vec2  a_offset = a_vertexOffset / 16.0;\n  float a_outlineSize = a_sizeAndOutlineWidth.z * a_sizeAndOutlineWidth.z / 128.0;\n  float a_bitSet = a_bitSetAndDistRatio.z;\n  vec2 v_size = getMarkerSize(a_offset, a_size, a_outlineSize, a_sizeAndOutlineWidth.w * a_sizeAndOutlineWidth.w / 128.0, a_bitSet);\n  vec2 v_tex      = a_texCoords / u_mosaicSize;\n  v_color    = getColor(a_color, a_bitSet, 1);\n  v_opacity  = getOpacity();\n  v_id       = norm(a_id);\n  v_filters  = getFilterFlags();\n  v_pos      = u_dvsMat3 * vec3(a_pos * POSITION_PRECISION, 1.0) + getOffset(a_offset, a_bitSet);\n  v_sizeTex  = vec4(v_size.xy, v_tex.xy);\n#ifdef SDF\n  v_isThin   = getBit(a_bitSet, 2);\n  #ifdef VV_COLOR\n    v_overridingOutlineColor = v_isThin;\n  #else\n    v_overridingOutlineColor = 0.0;\n  #endif\n  v_outlineWidth = min(a_outlineSize, max(max(v_size.x, v_size.y) - 0.99, 0.0));\n  v_outlineColor = getEffectColor(a_outlineColor, v_filters);\n  v_distRatio = a_bitSetAndDistRatio.w / 126.0;\n#endif\n  gl_Position = vec4(applyFilter(v_color, v_pos, v_filters), 1.0);\n}"},label:{"common.glsl":"uniform mediump float u_zoomLevel;\nuniform mediump float u_mapRotation;\nuniform mediump float u_mapAligned;\nuniform mediump vec2 u_mosaicSize;\nvarying mediump float v_antialiasingWidth;\nvarying mediump float v_edgeDistanceOffset;\nvarying mediump vec2 v_tex;\nvarying mediump vec4 v_color;\nvarying lowp vec4 v_animation;","label.frag":"#include <materials/text/text.frag>","label.vert":"precision highp float;\n#include <materials/vcommon.glsl>\n#include <materials/text/common.glsl>\nattribute vec4 a_color;\nattribute vec4 a_haloColor;\nattribute vec4 a_texAndSize;\nattribute vec4 a_refSymbolAndPlacementOffset;\nattribute vec4 a_glyphData;\nattribute vec2 a_vertexOffset;\nattribute vec2 a_texCoords;\nuniform float u_isHalo;\nuniform float u_zoomLevel;\nuniform float u_mapRotation;\nuniform float u_mapAligned;\nfloat getZ(in float minZoom, in float maxZoom, in float angle) {\n  float glyphAngle = angle * 360.0 / 254.0;\n  float mapAngle = u_mapRotation * 360.0 / 254.0;\n  float diffAngle = min(360.0 - abs(mapAngle - glyphAngle), abs(mapAngle - glyphAngle));\n  float z = 0.0;\n  z += u_mapAligned * (2.0 * (1.0 - step(minZoom, u_zoomLevel)));\n  z += u_mapAligned * 2.0 * step(90.0, diffAngle);\n  z += 2.0 * (1.0 - step(u_zoomLevel, maxZoom));\n  return z;\n}\nvoid main()\n{\n  INIT;\n  float groupMinZoom    = getMinZoom();\n  float glyphMinZoom    = a_glyphData.x;\n  float glyphMaxZoom    = a_glyphData.y;\n  float glyphAngle      = a_glyphData.z;\n  float a_minZoom          = max(groupMinZoom, glyphMinZoom);\n  float a_placementPadding = a_refSymbolAndPlacementOffset.x * EXTRUDE_SCALE_PLACEMENT_PADDING;\n  vec2  a_placementDir     = unpack_u8_nf32(a_refSymbolAndPlacementOffset.zw);\n  float a_refSymbolSize    = a_refSymbolAndPlacementOffset.y;\n  float fontSize           = a_texAndSize.z;\n  float haloSize           = a_texAndSize.w * OUTLINE_SCALE;\n  vec2  vertexOffset = a_vertexOffset * OFFSET_PRECISION;\n  vec3  pos          = vec3(a_pos * POSITION_PRECISION, 1.0);\n  float z            = getZ(a_minZoom, glyphMaxZoom, glyphAngle);\n  float fontScale    = fontSize / SDF_FONT_SIZE;\n  float halfSize     = getSize(a_refSymbolSize) / 2.0;\n  float animation    = pow(getAnimationState(), vec4(2.0)).r;\n  v_color     = animation * ((1.0 - u_isHalo) * a_color + (u_isHalo * a_haloColor));\n  v_opacity   = 1.0;\n  v_tex       = a_texCoords / u_mosaicSize;\n  v_edgeDistanceOffset = u_isHalo * haloSize / fontScale / MAX_SDF_DISTANCE;\n  v_antialiasingWidth  = 0.105 * SDF_FONT_SIZE / fontSize / u_pixelRatio;\n  vec2 placementOffset = a_placementDir * (halfSize + a_placementPadding);\n  vec3 glyphOffset     = u_displayMat3 * vec3(vertexOffset + placementOffset, 0.0);\n  vec3 v_pos           = vec3((u_dvsMat3 * pos + glyphOffset).xy, z);\n  gl_Position = vec4(applyFilterLabels(v_color, v_pos, getFilterFlags()), 1.0);\n#ifdef DEBUG\n  v_color = vec4(a_color.rgb, z == 0.0 ? 1.0 : 0.645);\n#endif\n}"},line:{"common.glsl":"varying lowp vec4 v_color;\nvarying highp vec4 v_id;\nvarying mediump vec2 v_normal;\nvarying mediump float v_lineHalfWidth;\nvarying lowp float v_opacity;\nvarying highp vec3 v_pos;\n#ifdef PATTERN\nuniform mediump vec2 u_mosaicSize;\nvarying mediump vec4 v_tlbr;\nvarying mediump vec2 v_patternSize;\n#endif\n#if defined(PATTERN) || defined(SDF)\nvarying highp float v_accumulatedDistance;\n#endif","line.frag":"precision lowp float;\n#include <util/encoding.glsl>\n#include <materials/constants.glsl>\n#include <materials/line/common.glsl>\nuniform lowp float u_blur;\nuniform mediump float u_zoomFactor;\n#if defined(PATTERN) || defined(SDF)\nuniform sampler2D u_texture;\n#endif\n#ifdef SDF\nconst float sdfPatternHalfWidth = 15.5;\nconst float widthFactor = 2.0;\n#endif\nvoid main()\n{\n  mediump float thinLineFactor = max(THIN_LINE_WIDTH_FACTOR * step(v_lineHalfWidth, THIN_LINE_HALF_WIDTH), 1.0);\n  mediump float fragDist = length(v_normal) * v_lineHalfWidth;\n  lowp float alpha = clamp(thinLineFactor * (v_lineHalfWidth - fragDist) / (u_blur + thinLineFactor - 1.0), 0.0, 1.0);\n#if defined(SDF) && !defined(HIGHLIGHT)\n  mediump float lineHalfWidth = widthFactor * v_lineHalfWidth;\n  mediump float lineWidthRatio = lineHalfWidth / sdfPatternHalfWidth;\n  mediump float relativeTexX = mod((u_zoomFactor * v_accumulatedDistance + v_normal.x * lineHalfWidth) / (lineWidthRatio * v_patternSize.x), 1.0);\n  mediump float relativeTexY = 0.5 + 0.5 * v_normal.y;\n  mediump vec2 texCoord = mix(v_tlbr.xy, v_tlbr.zw, vec2(relativeTexX, relativeTexY));\n  mediump float d = rgba2float(texture2D(u_texture, texCoord)) - 0.5;\n  float dist = d * lineHalfWidth;\n  lowp vec4 fillPixelColor = v_opacity * alpha * clamp(0.5 - dist, 0.0, 1.0) * v_color;\n  gl_FragColor = fillPixelColor;\n#elif defined(PATTERN) && !defined(HIGHLIGHT)\n  mediump float lineHalfWidth = v_lineHalfWidth;\n  mediump float adjustedPatternWidth = v_patternSize.x * 2.0 * lineHalfWidth / v_patternSize.y;\n  mediump float relativeTexX = mod((u_zoomFactor * v_accumulatedDistance + v_normal.x * lineHalfWidth) / adjustedPatternWidth, 1.0);\n  mediump float relativeTexY = 0.5 + 0.5 * v_normal.y;\n  mediump vec2 texCoord = mix(v_tlbr.xy, v_tlbr.zw, vec2(relativeTexY, relativeTexX));\n  lowp vec4 color = texture2D(u_texture, texCoord);\n  gl_FragColor = v_opacity * alpha * v_color * color;\n#else\n  gl_FragColor = v_opacity * alpha * v_color;\n#endif\n#ifdef HIGHLIGHT\n  gl_FragColor.a = step(1.0 / 255.0, gl_FragColor.a);\n#endif\n#ifdef ID\n  if (gl_FragColor.a < 1.0 / 255.0) {\n    discard;\n  }\n  gl_FragColor = v_id;\n#endif\n}","line.vert":"precision highp float;\nattribute vec4 a_color;\nattribute vec4 a_offsetAndNormal;\nattribute vec2 a_accumulatedDistanceAndHalfWidth;\nattribute vec4 a_tlbr;\nattribute vec4 a_segmentDirection;\nattribute vec2 a_aux;\n#include <materials/vcommon.glsl>\n#include <materials/line/common.glsl>\nconst float SCALE = 1.0 / 31.0;\nconst float WIDTH_SCALE = 1.0 / 1024.0;\nfloat getBaseLineHalfWidth(in float in_lineHalfWidth) {\n#ifdef VV_SIZE\n  float referenceHalfWidth = a_aux.x * WIDTH_SCALE;\n  float lineWidth = 2.0 * in_lineHalfWidth;\n  return 0.5 * (in_lineHalfWidth / referenceHalfWidth) * getSize(lineWidth);\n#else\n  return in_lineHalfWidth;\n#endif\n}\nfloat getLineHalfWidth(in float baseWidth, in float aa) {\n  float halfWidth = max(baseWidth + aa, 0.45) + 0.1 * aa;\n#ifdef HIGHLIGHT\n  halfWidth = max(halfWidth, 2.0);\n#endif\n  return halfWidth;\n}\nvec2 getDist(in vec2 offset, in float halfWidth) {\n  float thinLineFactor = max(THIN_LINE_WIDTH_FACTOR * step(halfWidth, THIN_LINE_HALF_WIDTH), 1.0);\n#if defined(SDF) && !defined(HIGHLIGHT)\n  thinLineFactor *= 2.0;\n#endif\n  return thinLineFactor * halfWidth * offset * SCALE;\n}\nvoid main()\n{\n  INIT;\n  float a_bitSet          = a_segmentDirection.w;\n  float a_accumulatedDist = a_accumulatedDistanceAndHalfWidth.x;\n  float a_lineHalfWidth   = a_accumulatedDistanceAndHalfWidth.y * WIDTH_SCALE;\n  float aa                = 0.5 * u_antialiasing;\n  vec2  a_offset          = a_offsetAndNormal.xy;\n  float baseWidth = getBaseLineHalfWidth(a_lineHalfWidth);\n  float halfWidth = getLineHalfWidth(baseWidth, aa);\n  float z         = 2.0 * step(baseWidth, 0.0);\n  vec2  dist      = getDist(a_offset, halfWidth);\n  vec3  offset    = u_displayViewMat3 * vec3(dist, 0.0);\n  vec3  pos       = u_dvsMat3 * vec3(a_pos * POSITION_PRECISION, 1.0) + offset;\n  v_color         = getColor(a_color, a_bitSet, 0);\n  v_opacity       = getOpacity();\n  v_lineHalfWidth = halfWidth;\n  v_id            = norm(a_id);\n  v_normal        = a_offsetAndNormal.zw * SCALE;\n  v_pos           = vec3(pos.xy, z);\n#ifdef PATTERN\n  v_tlbr          = a_tlbr / u_mosaicSize.xyxy;\n  v_patternSize   = vec2(a_tlbr.z - a_tlbr.x, a_tlbr.w - a_tlbr.y);\n#endif\n#if defined(PATTERN) || defined(SDF)\n  v_accumulatedDistance = a_accumulatedDist + dot(SCALE * a_segmentDirection.xy, dist / u_zoomFactor);\n#endif\n  gl_Position = vec4(applyFilter(v_color, v_pos, getFilterFlags()), 1.0);\n}"},text:{"common.glsl":"uniform highp vec2 u_mosaicSize;\nvarying highp vec4 v_id;\nvarying mediump vec3 v_pos;\nvarying lowp float v_opacity;\nvarying lowp vec4 v_color;\nvarying highp vec2 v_tex;\nvarying mediump float v_antialiasingWidth;\nvarying mediump float v_edgeDistanceOffset;\nvarying lowp float v_transparency;","text.frag":"precision mediump float;\n#include <materials/text/common.glsl>\nuniform lowp sampler2D u_texture;\nvoid main()\n{\n  float SDF_CUTOFF = (2.0 / 8.0);\n  float SDF_BASE_EDGE_DIST = 1.0 - SDF_CUTOFF;\n  lowp float dist = texture2D(u_texture, v_tex).a;\n  mediump float edge = SDF_BASE_EDGE_DIST - v_edgeDistanceOffset;\n#ifdef HIGHLIGHT\n  edge /= 2.0;\n#endif\n  lowp float aa = v_antialiasingWidth;\n  lowp float alpha = smoothstep(edge - aa, edge + aa, dist);\n  gl_FragColor = alpha * v_color * v_opacity;\n#ifdef ID\n  if (gl_FragColor.a < 1.0 / 255.0) {\n    discard;\n  }\n  gl_FragColor = v_id;\n#endif\n}","text.vert":"precision highp float;\n#include <materials/utils.glsl>\n#include <materials/vcommon.glsl>\n#include <materials/text/common.glsl>\nattribute vec4 a_color;\nattribute vec4 a_haloColor;\nattribute vec4 a_texFontSize;\nattribute vec4 a_aux;\nattribute vec2 a_vertexOffset;\nattribute vec2 a_texCoords;\nuniform float u_isHalo;\nfloat getTextSize(inout vec2 offset, in float baseSize, in float referenceSize) {\n#ifdef VV_SIZE\n   float ratio = baseSize / referenceSize;\n   baseSize = ratio * getSize(baseSize);\n#endif\n  return baseSize;\n}\nvoid main()\n{\n  INIT;\n  float a_bitSet      = a_aux.w;\n  float a_fontSize    = a_texFontSize.z;\n  vec2  a_offset      = a_vertexOffset * OFFSET_PRECISION;\n  vec3  in_pos        = vec3(a_pos * POSITION_PRECISION, 1.0);\n  float fontSize      = getTextSize(a_offset, a_fontSize, a_aux.z * a_aux.z / 256.0);\n  float scaleFactor   = fontSize / a_fontSize;\n  float fontScale     = fontSize / SDF_FONT_SIZE;\n  vec3  offset        = getRotation() * vec3(scaleFactor * a_offset, 0.0);\n  mat3  extrudeMatrix = getBit(a_bitSet, 0) == 1.0 ? u_displayViewMat3 : u_displayMat3;\n  v_color   = u_isHalo * a_haloColor + (1.0 - u_isHalo) * getColor(a_color, a_bitSet, 1);\n  v_opacity = getOpacity();\n  v_id      = norm(a_id);\n  v_tex     = a_texCoords / u_mosaicSize;\n  v_pos     = u_dvsMat3 * in_pos + extrudeMatrix * offset;\n  v_edgeDistanceOffset = u_isHalo * OUTLINE_SCALE * a_texFontSize.w / fontScale / MAX_SDF_DISTANCE;\n  v_antialiasingWidth  = 0.105 * SDF_FONT_SIZE / fontSize / u_pixelRatio;\n  gl_Position =  vec4(applyFilter(v_color, v_pos, getFilterFlags()), 1.0);\n}"},"utils.glsl":"float rshift(in float u32, in int amount) {\n  return floor(u32 / pow(2.0, float(amount)));\n}\nfloat getBit(in float bitset, in int bitIndex) {\n  float offset = pow(2.0, float(bitIndex));\n  return mod(floor(bitset / offset), 2.0);\n}\nfloat getFilterBit(in float bitset, in int bitIndex) {\n  return getBit(bitset, bitIndex + 1);\n}\nfloat getHighlightBit(in float bitset) {\n  return getBit(bitset, 0);\n}\nhighp vec4 unpackDisplayIdTexel(in highp vec4 bitset) {\n  float isAggregate = getBit(bitset.a, 7);\n  return (1.0 - isAggregate) * bitset + isAggregate * (vec4(bitset.rgba) - vec4(0.0, 0.0, 0.0, float(0x80)));\n}\nvec4 unpack(in float u32) {\n  float r = mod(rshift(u32, 0), 255.0);\n  float g = mod(rshift(u32, 8), 255.0);\n  float b = mod(rshift(u32, 16), 255.0);\n  float a = mod(rshift(u32, 24), 255.0);\n  return vec4(r, g, b, a);\n}\nvec4 norm(in vec4 v) {\n  return v /= 255.0;\n}\nfloat max4(vec4 target) {\n  return max(max(max(target.x, target.y), target.z), target.w);\n}\nvec2 unpack_u8_nf32(vec2 bytes) {\n  return (bytes - 127.0) / 127.0;\n}","vcommon.glsl":"#include <materials/constants.glsl>\n#include <materials/utils.glsl>\n#include <materials/attributeData.glsl>\n#include <materials/vv.glsl>\n#include <materials/effects.glsl>\nattribute vec2 a_pos;\nattribute highp vec4 a_id;\nuniform highp mat3 u_dvsMat3;\nuniform highp mat3 u_displayMat3;\nuniform highp mat3 u_displayViewMat3;\nuniform highp float u_pixelRatio;\nuniform mediump float u_zoomFactor;\nuniform mediump float u_antialiasing;\nvec4 VV_ADATA = vec4(0.0);\nvoid loadVisualVariableData(inout vec4 target) {\n#ifdef OES_TEXTURE_FLOAT\n  target.rgba = getAttributeData2(a_id);\n#else\n  vec4 data0 = getAttributeData2(a_id);\n  vec4 data1 = getAttributeData3(a_id);\n  target.r = u88VVToFloat(data0.rg * 255.0);\n  target.g = u88VVToFloat(data0.ba * 255.0);\n  target.b = u88VVToFloat(data1.rg * 255.0);\n  target.a = u88VVToFloat(data1.ba * 255.0);\n#endif\n}\n#ifdef VV\n  #define INIT loadVisualVariableData(VV_ADATA)\n#else\n  #define INIT\n#endif\nvec4 getColor(in vec4 a_color, in float a_bitSet, int index) {\n#ifdef VV_COLOR\n  float isColorLocked   = getBit(a_bitSet, index);\n  return getVVColor(VV_ADATA[ATTR_VV_COLOR], a_color, isColorLocked);\n#else\n  return a_color;\n#endif\n}\nfloat getOpacity() {\n#ifdef VV_OPACITY\n  return getVVOpacity(VV_ADATA[ATTR_VV_OPACITY]);\n#else\n  return 1.0;\n#endif\n}\nfloat getSize(in float in_size) {\n#ifdef VV_SIZE\n  return getVVSize(in_size, VV_ADATA[ATTR_VV_SIZE]);\n#else\n  return in_size;\n#endif\n}\nmat3 getRotation() {\n#ifdef VV_ROTATION\n  return getVVRotationMat3(mod(VV_ADATA[ATTR_VV_ROTATION], 360.0));\n#else\n  return mat3(1.0);\n#endif\n}\nfloat getFilterFlags() {\n#ifdef IGNORES_SAMPLER_PRECISION\n  return ceil(getAttributeData0(a_id).x * 255.0);\n#else\n  return getAttributeData0(a_id).x * 255.0;\n#endif\n}\nvec4 getAnimationState() {\n  return getAttributeData1(a_id);\n}\nfloat getMinZoom() {\n  vec4 data0 = getAttributeData0(a_id) * 255.0;\n  return data0.g;\n}\nmat3 getMatrix(float isMapAligned) {\n  return isMapAligned * u_displayViewMat3 + (1.0 - isMapAligned) * u_displayMat3;\n}","vv.glsl":"#if defined(VV_SIZE_MIN_MAX_VALUE) || defined(VV_SIZE_SCALE_STOPS) || defined(VV_SIZE_FIELD_STOPS) || defined(VV_SIZE_UNIT_VALUE)\n  #define VV_SIZE\n#endif\n#if defined(VV_COLOR) || defined(VV_SIZE) || defined(VV_OPACITY) || defined(VV_ROTATION)\n  #define VV\n#endif\n#ifdef VV_COLOR\nuniform highp float u_vvColorValues[8];\nuniform vec4 u_vvColors[8];\n#endif\n#ifdef VV_SIZE_MIN_MAX_VALUE\nuniform highp vec4 u_vvSizeMinMaxValue;\n#endif\n#ifdef VV_SIZE_SCALE_STOPS\nuniform highp float u_vvSizeScaleStopsValue;\n#endif\n#ifdef VV_SIZE_FIELD_STOPS\nuniform highp float u_vvSizeFieldStopsValues[6];\nuniform float u_vvSizeFieldStopsSizes[6];\n#endif\n#ifdef VV_SIZE_UNIT_VALUE\nuniform highp float u_vvSizeUnitValueWorldToPixelsRatio;\n#endif\n#ifdef VV_OPACITY\nuniform highp float u_vvOpacityValues[8];\nuniform float u_vvOpacities[8];\n#endif\n#ifdef VV_ROTATION\nuniform lowp float u_vvRotationType;\n#endif\nbool isNan(float val) {\n  return (val == NAN_MAGIC_NUMBER);\n}\n#ifdef VV_SIZE_MIN_MAX_VALUE\nfloat getVVMinMaxSize(float sizeValue, float fallback) {\n  if (isNan(sizeValue)) {\n    return fallback;\n  }\n  float interpolationRatio = (sizeValue  - u_vvSizeMinMaxValue.x) / (u_vvSizeMinMaxValue.y - u_vvSizeMinMaxValue.x);\n  interpolationRatio = clamp(interpolationRatio, 0.0, 1.0);\n  return u_vvSizeMinMaxValue.z + interpolationRatio * (u_vvSizeMinMaxValue.w - u_vvSizeMinMaxValue.z);\n}\n#endif\n#ifdef VV_SIZE_FIELD_STOPS\nconst int VV_SIZE_N = 6;\nfloat getVVStopsSize(float sizeValue, float fallback) {\n  if (isNan(sizeValue)) {\n    return fallback;\n  }\n  if (sizeValue <= u_vvSizeFieldStopsValues[0]) {\n    return u_vvSizeFieldStopsSizes[0];\n  }\n  for (int i = 1; i < VV_SIZE_N; ++i) {\n    if (u_vvSizeFieldStopsValues[i] >= sizeValue) {\n      float f = (sizeValue - u_vvSizeFieldStopsValues[i-1]) / (u_vvSizeFieldStopsValues[i] - u_vvSizeFieldStopsValues[i-1]);\n      return mix(u_vvSizeFieldStopsSizes[i-1], u_vvSizeFieldStopsSizes[i], f);\n    }\n  }\n  return u_vvSizeFieldStopsSizes[VV_SIZE_N - 1];\n}\n#endif\n#ifdef VV_SIZE_UNIT_VALUE\nfloat getVVUnitValue(float sizeValue, float fallback) {\n  if (isNan(sizeValue)) {\n    return fallback;\n  }\n  return u_vvSizeUnitValueWorldToPixelsRatio * sizeValue;\n}\n#endif\n#ifdef VV_OPACITY\nconst int VV_OPACITY_N = 8;\nfloat getVVOpacity(float opacityValue) {\n  if (isNan(opacityValue)) {\n    return 1.0;\n  }\n  if (opacityValue <= u_vvOpacityValues[0]) {\n    return u_vvOpacities[0];\n  }\n  for (int i = 1; i < VV_OPACITY_N; ++i) {\n    if (u_vvOpacityValues[i] >= opacityValue) {\n      float f = (opacityValue - u_vvOpacityValues[i-1]) / (u_vvOpacityValues[i] - u_vvOpacityValues[i-1]);\n      return mix(u_vvOpacities[i-1], u_vvOpacities[i], f);\n    }\n  }\n  return u_vvOpacities[VV_OPACITY_N - 1];\n}\n#endif\n#ifdef VV_ROTATION\nmat4 getVVRotation(float rotationValue) {\n  if (isNan(rotationValue)) {\n    return mat4(1, 0, 0, 0,\n                0, 1, 0, 0,\n                0, 0, 1, 0,\n                0, 0, 0, 1);\n  }\n  float rotation = rotationValue;\n  if (u_vvRotationType == 1.0) {\n    rotation = 90.0 - rotation;\n  }\n  float angle = C_DEG_TO_RAD * rotation;\n  float sinA = sin(angle);\n  float cosA = cos(angle);\n  return mat4(cosA, sinA, 0, 0,\n              -sinA,  cosA, 0, 0,\n              0,     0, 1, 0,\n              0,     0, 0, 1);\n}\nmat3 getVVRotationMat3(float rotationValue) {\n  if (isNan(rotationValue)) {\n    return mat3(1, 0, 0,\n                0, 1, 0,\n                0, 0, 1);\n  }\n  float rotation = rotationValue;\n  if (u_vvRotationType == 1.0) {\n    rotation = 90.0 - rotation;\n  }\n  float angle = C_DEG_TO_RAD * -rotation;\n  float sinA = sin(angle);\n  float cosA = cos(angle);\n  return mat3(cosA, -sinA, 0,\n             sinA, cosA, 0,\n              0,    0,    1);\n}\n#endif\n#ifdef VV_COLOR\nconst int VV_COLOR_N = 8;\nvec4 getVVColor(float colorValue, vec4 fallback, float isColorLocked) {\n  if (isNan(colorValue) || isColorLocked == 1.0) {\n    return fallback;\n  }\n  if (colorValue <= u_vvColorValues[0]) {\n    return u_vvColors[0];\n  }\n  for (int i = 1; i < VV_COLOR_N; ++i) {\n    if (u_vvColorValues[i] >= colorValue) {\n      float f = (colorValue - u_vvColorValues[i-1]) / (u_vvColorValues[i] - u_vvColorValues[i-1]);\n      return mix(u_vvColors[i-1], u_vvColors[i], f);\n    }\n  }\n  return u_vvColors[VV_COLOR_N - 1];\n}\n#endif\nfloat getVVSize(in float size, in float vvSize)  {\n#ifdef VV_SIZE_MIN_MAX_VALUE\n  return getVVMinMaxSize(vvSize, size);\n#elif defined(VV_SIZE_SCALE_STOPS)\n  return u_vvSizeScaleStopsValue;\n#elif defined(VV_SIZE_FIELD_STOPS)\n  float outSize = getVVStopsSize(vvSize, size);\n  return isNan(outSize) ? size : outSize;\n#elif defined(VV_SIZE_UNIT_VALUE)\n  return getVVUnitValue(vvSize, size);\n#else\n  return size;\n#endif\n}"},"post-processing":{blit:{"blit.frag":"precision mediump float;\nuniform sampler2D u_texture;\nvarying vec2 v_uv;\nvoid main() {\n  gl_FragColor = texture2D(u_texture, v_uv);\n}"},bloom:{composite:{"composite.frag":"precision mediump float;\nvarying vec2 v_uv;\nuniform sampler2D u_blurTexture1;\nuniform sampler2D u_blurTexture2;\nuniform sampler2D u_blurTexture3;\nuniform sampler2D u_blurTexture4;\nuniform sampler2D u_blurTexture5;\nuniform float u_bloomStrength;\nuniform float u_bloomRadius;\nuniform float u_bloomFactors[NUMMIPS];\nuniform vec3 u_bloomTintColors[NUMMIPS];\nfloat lerpBloomFactor(const in float factor) {\n  float mirrorFactor = 1.2 - factor;\n  return mix(factor, mirrorFactor, u_bloomRadius);\n}\nvoid main() {\n  gl_FragColor = u_bloomStrength * (\n    lerpBloomFactor(u_bloomFactors[0]) * vec4(u_bloomTintColors[0], 1.0) * texture2D(u_blurTexture1, v_uv) +\n    lerpBloomFactor(u_bloomFactors[1]) * vec4(u_bloomTintColors[1], 1.0) * texture2D(u_blurTexture2, v_uv) +\n    lerpBloomFactor(u_bloomFactors[2]) * vec4(u_bloomTintColors[2], 1.0) * texture2D(u_blurTexture3, v_uv) +\n    lerpBloomFactor(u_bloomFactors[3]) * vec4(u_bloomTintColors[3], 1.0) * texture2D(u_blurTexture4, v_uv) +\n    lerpBloomFactor(u_bloomFactors[4]) * vec4(u_bloomTintColors[4], 1.0) * texture2D(u_blurTexture5, v_uv)\n  );\n}"},gaussianBlur:{"gaussianBlur.frag":"precision mediump float;\nuniform sampler2D u_colorTexture;\nuniform vec2 u_texSize;\nuniform vec2 u_direction;\nvarying vec2 v_uv;\n#define KERNEL_RADIUS RADIUS\n#define SIGMA RADIUS\nfloat gaussianPdf(in float x, in float sigma) {\n    return 0.39894 * exp(-0.5 * x * x / ( sigma * sigma)) / sigma;\n}\nvoid main() {\n  vec2 invSize = 1.0 / u_texSize;\n  float fSigma = float(SIGMA);\n  float weightSum = gaussianPdf(0.0, fSigma);\n  vec4 pixelColorSum = texture2D(u_colorTexture, v_uv) * weightSum;\n  for (int i = 1; i < KERNEL_RADIUS; i ++) {\n    float x = float(i);\n    float w = gaussianPdf(x, fSigma);\n    vec2 uvOffset = u_direction * invSize * x;\n    vec4 sample1 = texture2D(u_colorTexture, v_uv + uvOffset);\n    vec4 sample2 = texture2D(u_colorTexture, v_uv - uvOffset);\n    pixelColorSum += (sample1 + sample2) * w;\n    weightSum += 2.0 * w;\n  }\n  gl_FragColor = pixelColorSum /weightSum;\n}"},luminosityHighPass:{"luminosityHighPass.frag":"precision mediump float;\nuniform sampler2D u_texture;\nuniform vec3 u_defaultColor;\nuniform float u_defaultOpacity;\nuniform float u_luminosityThreshold;\nuniform float u_smoothWidth;\nvarying vec2 v_uv;\nvoid main() {\n  vec4 texel = texture2D(u_texture, v_uv);\n  vec3 luma = vec3(0.299, 0.587, 0.114);\n  float v = dot(texel.xyz, luma);\n  vec4 outputColor = vec4(u_defaultColor.rgb, u_defaultOpacity);\n  float alpha = smoothstep(u_luminosityThreshold, u_luminosityThreshold + u_smoothWidth, v);\n  gl_FragColor = mix(outputColor, texel, alpha);\n}"}},blur:{gaussianBlur:{"gaussianBlur.frag":"precision mediump float;\nuniform sampler2D u_colorTexture;\nuniform vec2 u_texSize;\nuniform vec2 u_direction;\nuniform float u_sigma;\nvarying vec2 v_uv;\n#define KERNEL_RADIUS RADIUS\nfloat gaussianPdf(in float x, in float sigma) {\n    return 0.39894 * exp(-0.5 * x * x / ( sigma * sigma)) / sigma;\n}\nvoid main() {\n  vec2 invSize = 1.0 / u_texSize;\n  float fSigma = u_sigma;\n  float weightSum = gaussianPdf(0.0, fSigma);\n  vec4 pixelColorSum = texture2D(u_colorTexture, v_uv) * weightSum;\n  for (int i = 1; i < KERNEL_RADIUS; i ++) {\n    float x = float(i);\n    float w = gaussianPdf(x, fSigma);\n    vec2 uvOffset = u_direction * invSize * x;\n    vec4 sample1 = texture2D(u_colorTexture, v_uv + uvOffset);\n    vec4 sample2 = texture2D(u_colorTexture, v_uv - uvOffset);\n    pixelColorSum += (sample1 + sample2) * w;\n    weightSum += 2.0 * w;\n  }\n  gl_FragColor = pixelColorSum /weightSum;\n}"},"radial-blur":{"radial-blur.frag":"precision mediump float;\nuniform sampler2D u_colorTexture;\nvarying vec2 v_uv;\nconst float sampleDist = 1.0;\nconst float sampleStrength = 2.2;\nvoid main(void) {\n    float samples[10];\n    samples[0] = -0.08;\n    samples[1] = -0.05;\n    samples[2] = -0.03;\n    samples[3] = -0.02;\n    samples[4] = -0.01;\n    samples[5] =  0.01;\n    samples[6] =  0.02;\n    samples[7] =  0.03;\n    samples[8] =  0.05;\n    samples[9] =  0.08;\n    vec2 dir = 0.5 - v_uv;\n    float dist = sqrt(dir.x * dir.x + dir.y * dir.y);\n    dir = dir / dist;\n    vec4 color = texture2D(u_colorTexture,v_uv);\n    vec4 sum = color;\n    for (int i = 0; i < 10; i++) {\n      sum += texture2D(u_colorTexture, v_uv + dir * samples[i] * sampleDist);\n    }\n    sum *= 1.0 / 11.0;\n    float t = dist * sampleStrength;\n    t = clamp(t, 0.0, 1.0);\n    gl_FragColor = mix(color, sum, t);\n}"}},dra:{"dra.frag":"precision mediump float;\nuniform sampler2D u_minColor;\nuniform sampler2D u_maxColor;\nuniform sampler2D u_texture;\nvarying vec2 v_uv;\nvoid main() {\n  vec4 minColor = texture2D(u_minColor, vec2(0.5));\n  vec4 maxColor = texture2D(u_maxColor, vec2(0.5));\n  vec4 color = texture2D(u_texture, v_uv);\n  vec3 minColorUnpremultiply = minColor.rgb / minColor.a;\n  vec3 maxColorUnpremultiply = maxColor.rgb / maxColor.a;\n  vec3 colorUnpremultiply = color.rgb / color.a;\n  vec3 range = maxColorUnpremultiply - minColorUnpremultiply;\n  gl_FragColor = vec4(color.a * (colorUnpremultiply - minColorUnpremultiply) / range, color.a);\n}","min-max":{"min-max.frag":"#extension GL_EXT_draw_buffers : require\nprecision mediump float;\n#define CELL_SIZE 2\nuniform sampler2D u_minTexture;\nuniform sampler2D u_maxTexture;\nuniform vec2 u_srcResolution;\nuniform vec2 u_dstResolution;\nvarying vec2 v_uv;\nvoid main() {\n  vec2 srcPixel = floor(gl_FragCoord.xy) * float(CELL_SIZE);\n  vec2 onePixel = vec2(1.0) / u_srcResolution;\n  vec2 uv = (srcPixel + 0.5) / u_srcResolution;\n  vec4 minColor = vec4(1.0);\n  vec4 maxColor = vec4(0.0);\n  for (int y = 0; y < CELL_SIZE; ++y) {\n    for (int x = 0; x < CELL_SIZE; ++x) {\n      vec2 offset = uv + vec2(x, y) * onePixel;\n      minColor = min(minColor, texture2D(u_minTexture, offset));\n      maxColor = max(maxColor, texture2D(u_maxTexture, offset));\n    }\n  }\n  gl_FragData[0] = minColor;\n  gl_FragData[1] = maxColor;\n}"}},"drop-shadow":{composite:{"composite.frag":"precision mediump float;\nuniform sampler2D u_layerFBOTexture;\nuniform sampler2D u_blurTexture;\nuniform vec4 u_shadowColor;\nvarying vec2 v_uv;\nvoid main() {\n  vec4 layerColor = texture2D(u_layerFBOTexture, v_uv);\n  vec4 blurColor = texture2D(u_blurTexture, v_uv);\n  gl_FragColor = ((1.0 - layerColor.a) * blurColor.a * u_shadowColor + layerColor);\n}"},"drop-shadow.vert":"precision mediump float;\nattribute vec2 a_position;\nuniform highp mat3 u_displayViewMat3;\nuniform highp vec2 u_offset;\nvarying vec2 v_uv;\nvoid main() {\n  vec3 offset = u_displayViewMat3 * vec3(u_offset, 0.0);\n  gl_Position = vec4(a_position, 0.0, 1.0) + vec4(offset, 0.0);\n  v_uv = (a_position + 1.0) / 2.0;\n}"},"edge-detect":{"frei-chen":{"frei-chen.frag":"precision mediump float;\nuniform sampler2D u_colorTexture;\nuniform vec2 u_texSize;\nvarying vec2 v_uv;\nvec2 texel = vec2(1.0 / u_texSize.x, 1.0 / u_texSize.y);\nmat3 G[9];\nconst mat3 g0 = mat3( 0.3535533845424652, 0, -0.3535533845424652, 0.5, 0, -0.5, 0.3535533845424652, 0, -0.3535533845424652 );\nconst mat3 g1 = mat3( 0.3535533845424652, 0.5, 0.3535533845424652, 0, 0, 0, -0.3535533845424652, -0.5, -0.3535533845424652 );\nconst mat3 g2 = mat3( 0, 0.3535533845424652, -0.5, -0.3535533845424652, 0, 0.3535533845424652, 0.5, -0.3535533845424652, 0 );\nconst mat3 g3 = mat3( 0.5, -0.3535533845424652, 0, -0.3535533845424652, 0, 0.3535533845424652, 0, 0.3535533845424652, -0.5 );\nconst mat3 g4 = mat3( 0, -0.5, 0, 0.5, 0, 0.5, 0, -0.5, 0 );\nconst mat3 g5 = mat3( -0.5, 0, 0.5, 0, 0, 0, 0.5, 0, -0.5 );\nconst mat3 g6 = mat3( 0.1666666716337204, -0.3333333432674408, 0.1666666716337204, -0.3333333432674408, 0.6666666865348816, -0.3333333432674408, 0.1666666716337204, -0.3333333432674408, 0.1666666716337204 );\nconst mat3 g7 = mat3( -0.3333333432674408, 0.1666666716337204, -0.3333333432674408, 0.1666666716337204, 0.6666666865348816, 0.1666666716337204, -0.3333333432674408, 0.1666666716337204, -0.3333333432674408 );\nconst mat3 g8 = mat3( 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408 );\nvoid main() {\n  G[0] = g0,\n  G[1] = g1,\n  G[2] = g2,\n  G[3] = g3,\n  G[4] = g4,\n  G[5] = g5,\n  G[6] = g6,\n  G[7] = g7,\n  G[8] = g8;\n  mat3 I;\n  float cnv[9];\n  vec3 sample;\n  for (float i = 0.0; i < 3.0; i++) {\n    for (float j = 0.0; j < 3.0; j++) {\n      sample = texture2D(u_colorTexture, v_uv + texel * vec2(i - 1.0,j - 1.0)).rgb;\n      I[int(i)][int(j)] = length(sample);\n    }\n  }\n  for (int i = 0; i < 9; i++) {\n    float dp3 = dot(G[i][0], I[0]) + dot(G[i][1], I[1]) + dot(G[i][2], I[2]);\n    cnv[i] = dp3 * dp3;\n  }\n  float M = (cnv[0] + cnv[1]) + (cnv[2] + cnv[3]);\n  float S = (cnv[4] + cnv[5]) + (cnv[6] + cnv[7]) + (cnv[8] + M);\n  gl_FragColor = vec4(vec3(sqrt(M / S)), texture2D(u_colorTexture, v_uv).a);\n}"},sobel:{"sobel.frag":"precision mediump float;\nuniform sampler2D u_colorTexture;\nvarying vec2 v_uv;\nuniform vec2 u_texSize;\nvec2 texel = vec2(1.0 / u_texSize.x, 1.0 / u_texSize.y);\nmat3 G[2];\nconst mat3 g0 = mat3( 1.0, 2.0, 1.0, 0.0, 0.0, 0.0, -1.0, -2.0, -1.0 );\nconst mat3 g1 = mat3( 1.0, 0.0, -1.0, 2.0, 0.0, -2.0, 1.0, 0.0, -1.0 );\nvoid main() {\n  mat3 I;\n  float cnv[2];\n  vec3 sample;\n  G[0] = g0;\n  G[1] = g1;\n  for (float i = 0.0; i < 3.0; i++) {\n    for (float j = 0.0; j < 3.0; j++) {\n      sample = texture2D( u_colorTexture, v_uv + texel * vec2(i-1.0,j-1.0) ).rgb;\n      I[int(i)][int(j)] = length(sample);\n    }\n  }\n  for (int i = 0; i < 2; i++) {\n    float dp3 = dot(G[i][0], I[0]) + dot(G[i][1], I[1]) + dot(G[i][2], I[2]);\n    cnv[i] = dp3 * dp3;\n  }\n  gl_FragColor = vec4(vec3(0.5 * sqrt(cnv[0] * cnv[0] + cnv[1] * cnv[1])), texture2D(u_colorTexture, v_uv).a);\n}"}},"edge-enhance":{"edge-enhance.frag":"precision mediump float;\nuniform sampler2D u_colorTexture;\nvarying vec2 v_uv;\nuniform vec2 u_texSize;\nvec2 texel = vec2(1.0 / u_texSize.x, 1.0 / u_texSize.y);\nmat3 G[2];\nconst mat3 g0 = mat3( 1.0, 0.0, -1.0, 1.0, 0.0, -1.0, 1.0, 0.0, -1.0 );\nconst mat3 g1 = mat3( 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, -1.0, -1.0, -1.0 );\nvoid main() {\n  mat3 I;\n  float cnv[2];\n  vec3 sample;\n  G[0] = g0;\n  G[1] = g1;\n  for (float i = 0.0; i < 3.0; i++) {\n    for (float j = 0.0; j < 3.0; j++) {\n      sample = texture2D( u_colorTexture, v_uv + texel * vec2(i-1.0,j-1.0) ).rgb;\n      I[int(i)][int(j)] = length(sample);\n    }\n  }\n  for (int i = 0; i < 2; i++) {\n    float dp3 = dot(G[i][0], I[0]) + dot(G[i][1], I[1]) + dot(G[i][2], I[2]);\n    cnv[i] = dp3 * dp3;\n  }\n  vec4 color = texture2D(u_colorTexture, v_uv);\n  gl_FragColor = vec4(0.5 * sqrt(cnv[0] * cnv[0] + cnv[1] * cnv[1]) * color);\n}"},filterEffect:{"filterEffect.frag":"precision mediump float;\nuniform sampler2D u_colorTexture;\nuniform mat4 u_coefficients;\nvarying vec2 v_uv;\nvoid main() {\n  vec4 color = texture2D(u_colorTexture, v_uv);\n  vec4 rgbw = u_coefficients * vec4(color.a > 0.0 ? color.rgb / color.a : vec3(0.0), 1.0);\n  float a = color.a;\n  gl_FragColor = vec4(a * rgbw.rgb, a);\n}"},pp:{"pp.vert":"precision mediump float;\nattribute vec2 a_position;\nvarying vec2 v_uv;\nvoid main() {\n  gl_Position = vec4(a_position, 0.0, 1.0);\n  v_uv = (a_position + 1.0) / 2.0;\n}"}},raster:{bitmap:{"bitmap.frag":"precision mediump float;\nvarying highp vec2 v_texcoord;\nuniform sampler2D u_texture;\nuniform highp vec2 u_coordScale;\n#include <filtering/bicubic.glsl>\nvoid main() {\n#ifdef BICUBIC\n  vec4 color = sampleBicubicBSpline(u_texture, v_texcoord, u_coordScale);\n#else\n  vec4 color = texture2D(u_texture, v_texcoord);\n#endif\n  gl_FragColor = vec4(color.rgb * color.a, color.a);\n}","bitmap.vert":"precision mediump float;\nattribute vec2 a_pos;\nuniform highp mat3 u_dvsMat3;\nuniform highp vec2 u_coordScale;\nvarying highp vec2 v_texcoord;\nvoid main()\n{\n  v_texcoord = a_pos;\n  gl_Position = vec4(u_dvsMat3 * vec3(a_pos * u_coordScale, 1.0), 1.0);\n}"},common:{"common.glsl":"uniform sampler2D u_image;\nuniform int u_bandCount;\nuniform bool u_isFloatTexture;\nuniform bool u_flipY;\nuniform float u_opacity;\nuniform int u_resampling;\nuniform vec2 u_srcImageSize;\n#ifdef APPLY_PROJECTION\n#include <raster/common/projection.glsl>\n#endif\n#ifdef BICUBIC\n#include <filtering/bicubic.glsl>\n#endif\nvec2 getPixelLocation(vec2 coords) {\n  vec2 targetLocation = u_flipY ? vec2(coords.s, 1.0 - coords.t) : coords;\n#ifdef APPLY_PROJECTION\n  targetLocation = projectPixelLocation(targetLocation);\n#endif\n  return targetLocation;\n}\nbool isOutside(vec2 coords){\n   if (coords.t>1.00001 ||coords.t<-0.00001 || coords.s>1.00001 ||coords.s<-0.00001) {\n     return true;\n   } else {\n     return false;\n   }\n}\nvec4 getPixel(vec2 pixelLocation) {\n#ifdef BICUBIC\n  vec4 color = sampleBicubicBSpline(u_image, pixelLocation, u_srcImageSize);\n#else\n  vec4 color = texture2D(u_image, pixelLocation);\n#endif\n  return color;\n}","contrastBrightness.glsl":"uniform float u_contrastOffset;\nuniform float u_brightnessOffset;\nvec4 adjustContrastBrightness(vec4 currentPixel, bool isFloat) {\n  vec4 pixelValue = isFloat ? currentPixel * 255.0 : currentPixel;\n  float maxI = 255.0;\n  float mid = 128.0;\n  float c = u_contrastOffset;\n  float b = u_brightnessOffset;\n  vec4 v;\n  if (c > 0.0 && c < 100.0) {\n    v = (200.0 * pixelValue - 100.0 * maxI + 2.0 * maxI * b) / (2.0 * (100.0 - c)) + mid;\n  } else if (c <= 0.0 && c > -100.0) {\n    v = (200.0 * pixelValue - 100.0 * maxI + 2.0 * maxI * b) * (100.0 + c) / 20000.0 + mid;\n  } else if (c == 100.0) {\n    v = (200.0 * pixelValue - 100.0 * maxI + (maxI + 1.0) * (100.0 - c) + 2.0 * maxI * b);\n    v = (sign(v) + 1.0) / 2.0;\n  } else if (c == -100.0) {\n    v = vec4(mid, mid, mid, currentPixel.a);\n  }\n  return vec4(v.r / 255.0, v.g / 255.0, v.b / 255.0, currentPixel.a);\n}","projection.glsl":"uniform sampler2D u_transformGrid;\nuniform vec2 u_transformSpacing;\nuniform vec2 u_transformGridSize;\nuniform vec2 u_targetImageSize;\nvec2 projectPixelLocation(vec2 coords) {\n  vec2 index_image = floor(coords * u_targetImageSize);\n  vec2 oneTransformPixel = vec2(0.25 / u_transformGridSize.s, 1.0 / u_transformGridSize.t);\n  vec2 index_transform = floor(index_image / u_transformSpacing) / u_transformGridSize;\n  vec2 pos = fract((index_image + vec2(0.5, 0.5)) / u_transformSpacing);\n  vec2 srcLocation;\n  vec2 transform_location = index_transform + oneTransformPixel * 0.5;\n  if (pos.s <= pos.t) {\n    vec4 ll_abc = texture2D(u_transformGrid, vec2(transform_location.s, transform_location.t));\n    vec4 ll_def = texture2D(u_transformGrid, vec2(transform_location.s + oneTransformPixel.s, transform_location.t));\n    srcLocation.s = dot(ll_abc.rgb, vec3(pos, 1.0));\n    srcLocation.t = dot(ll_def.rgb, vec3(pos, 1.0));\n  } else {\n    vec4 ur_abc = texture2D(u_transformGrid, vec2(transform_location.s + 2.0 * oneTransformPixel.s, transform_location.t));\n    vec4 ur_def = texture2D(u_transformGrid, vec2(transform_location.s + 3.0 * oneTransformPixel.s, transform_location.t));\n    srcLocation.s = dot(ur_abc.rgb, vec3(pos, 1.0));\n    srcLocation.t = dot(ur_def.rgb, vec3(pos, 1.0));\n  }\n  return srcLocation;\n}"},hillshade:{"hillshade.frag":"precision mediump float;\nvarying highp vec2 v_texcoord;\n#include <raster/common/common.glsl>\nuniform int u_hillshadeType;\nuniform float u_sinZcosAs[6];\nuniform float u_sinZsinAs[6];\nuniform float u_cosZs[6];\nuniform float u_weights[6];\nuniform vec2 u_factor;\nuniform float u_minValue;\nuniform float u_maxValue;\n#include <raster/lut/colorize.glsl>\nfloat getNeighborHoodAlpha(float a, float b, float c, float d, float e, float f, float g, float h, float i){\n  if (a == 0.0 || a == 0.0 || a==0.0 || a == 0.0 || a == 0.0 || a==0.0 || a == 0.0 || a == 0.0 || a==0.0) {\n    return 0.0;\n  }\n  else {\n    return e;\n  }\n}\nvec3 rgb2hsv(vec3 c) {\n  vec4 K = vec4(0.0, -1.0 / 3.0, 2.0 / 3.0, -1.0);\n  vec4 p = c.g < c.b ? vec4(c.bg, K.wz) : vec4(c.gb, K.xy);\n  vec4 q = c.r < p.x ? vec4(p.xyw, c.r) : vec4(c.r, p.yzx);\n  float d = q.x - min(q.w, q.y);\n  float e = 1.0e-10;\n  return vec3(abs(q.z + (q.w - q.y) / (6.0 * d + e)), min(d / (q.x + e), 1.0), q.x);\n}\nvec3 hsv2rgb(vec3 c) {\n  vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\n  vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\n  return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\n}\nvec4 overlay(float val, float minValue, float maxValue, float hillshade) {\n  val = clamp((val - minValue) / (maxValue - minValue), 0.0, 1.0);\n  vec4 rgb = colorize(vec4(val, val, val, 1.0), 255.0);\n  vec3 hsv = rgb2hsv(rgb.xyz);\n  hsv.z = hillshade;\n  return vec4(hsv2rgb(hsv), 1.0) * rgb.a;\n}\nvoid main() {\n  vec2 pixelLocation = getPixelLocation(v_texcoord);\n  if (isOutside(pixelLocation)) {\n     gl_FragColor = vec4(0.0, 0.0, 0.0, 0.0);\n     return;\n  }\n  vec4 currentPixel = getPixel(pixelLocation);\n  if (currentPixel.a == 0.0) {\n    gl_FragColor = vec4(0.0, 0.0, 0.0, 0.0);\n    return;\n  }\n  vec2 axy = vec2(-1.0, -1.0);\n  vec2 bxy = vec2(0.0, -1.0);\n  vec2 cxy = vec2(1.0, -1.0);\n  vec2 dxy = vec2(-1.0, 0.0);\n  vec2 fxy = vec2(1.0, 0.0);\n  vec2 gxy = vec2(-1.0, 1.0);\n  vec2 hxy = vec2(0.0, 1.0);\n  vec2 ixy = vec2(1.0, 1.0);\n  vec2 onePixel = 1.0 / u_srcImageSize;\n  if (pixelLocation.s < onePixel.s) {\n    axy[0] = 1.0;\n    dxy[0] = 1.0;\n    gxy[0] = 1.0;\n  }\n  if (pixelLocation.t < onePixel.t) {\n    axy[1] = 1.0;\n    bxy[1] = 1.0;\n    cxy[1] = 1.0;\n  }\n  if (pixelLocation.s > 1.0 - onePixel.s) {\n    cxy[0] = -1.0;\n    fxy[0] = -1.0;\n    ixy[0] = -1.0;\n  }\n  if (pixelLocation.t > 1.0 - onePixel.t) {\n    gxy[1] = -1.0;\n    hxy[1] = -1.0;\n    ixy[1] = -1.0;\n  }\n  vec4 va = texture2D(u_image, pixelLocation + onePixel * axy);\n  vec4 vb = texture2D(u_image, pixelLocation + onePixel * bxy);\n  vec4 vc = texture2D(u_image, pixelLocation + onePixel * cxy);\n  vec4 vd = texture2D(u_image, pixelLocation + onePixel * dxy);\n  vec4 ve = texture2D(u_image, pixelLocation);\n  vec4 vf = texture2D(u_image, pixelLocation + onePixel * fxy);\n  vec4 vg = texture2D(u_image, pixelLocation + onePixel * gxy);\n  vec4 vh = texture2D(u_image, pixelLocation + onePixel * hxy);\n  vec4 vi = texture2D(u_image, pixelLocation + onePixel * ixy);\n  float dzx = (vc + 2.0 * vf + vi - va - 2.0 * vd - vg).r * u_factor.s;\n  float dzy = (vg + 2.0 * vh + vi - va - 2.0 * vb - vc).r * u_factor.t;\n  float dzd = sqrt(1.0 + dzx * dzx + dzy * dzy);\n  float hillshade = 0.0;\n  if (u_hillshadeType == 0){\n\t   float cosDelta = u_sinZsinAs[0] * dzy - u_sinZcosAs[0] * dzx;\n     float z = (u_cosZs[0] + cosDelta) / dzd;\n     if (z < 0.0)  z = 0.0;\n\t   hillshade = z;\n  } else {\n\t  for (int k = 0; k < 6; k++) {\n\t\t float cosDelta = u_sinZsinAs[k] * dzy - u_sinZcosAs[k] * dzx;\n\t\t float z = (u_cosZs[k] + cosDelta) / dzd;\n\t\t if (z < 0.0) z = 0.0;\n     hillshade = hillshade + z * u_weights[k];\n\t\t if (k == 5) break;\n    }\n  }\n  float alpha = getNeighborHoodAlpha(va.a, vb.a, vc.a, vd.a, ve.a, vf.a, vg.a, vh.a, vi.a);\n#ifdef APPLY_COLORMAP\n  gl_FragColor = overlay(ve.r, u_minValue, u_maxValue, hillshade) * alpha * u_opacity;\n#else\n  gl_FragColor = vec4(hillshade, hillshade, hillshade, 1.0) * alpha * u_opacity;\n#endif\n}","hillshade.vert":"precision mediump float;\nattribute vec2 a_pos;\nuniform highp mat3 u_dvsMat3;\nuniform highp vec2 u_coordScale;\nvarying highp vec2 v_texcoord;\nvoid main()\n{\n  v_texcoord = a_pos;\n  gl_Position = vec4(u_dvsMat3 * vec3(a_pos * u_coordScale, 1.0), 1.0);\n}"},lut:{"colorize.glsl":"uniform sampler2D u_colormap;\nuniform float u_colormapOffset;\nuniform float u_colormapMaxIndex;\nvec4 colorize(vec4 currentPixel, float scaleFactor) {\n  float clrIndex = clamp(currentPixel.r * scaleFactor - u_colormapOffset, 0.0, u_colormapMaxIndex);\n  vec2 clrPosition = vec2((clrIndex + 0.5) / (u_colormapMaxIndex + 1.0), 0.0);\n  vec4 color = texture2D(u_colormap, clrPosition);\n  vec4 result = vec4(color.rgb, color.a * currentPixel.a);\n  return result;\n}","lut.frag":"precision mediump float;\nvarying highp vec2 v_texcoord;\n#include <raster/common/common.glsl>\n#include <raster/lut/colorize.glsl>\nvoid main() {\n  vec2 pixelLocation = getPixelLocation(v_texcoord);\n  if (isOutside(pixelLocation)) {\n     gl_FragColor = vec4(0.0, 0.0, 0.0, 0.0);\n     return;\n  }\n  vec4 currentPixel = getPixel(pixelLocation);\n  vec4 result = colorize(currentPixel, 1.0);\n  gl_FragColor = vec4(result.xyz, 1.0) * result.a * u_opacity;\n}","lut.vert":"precision mediump float;\nattribute vec2 a_pos;\nuniform highp mat3 u_dvsMat3;\nuniform highp vec2 u_coordScale;\nuniform highp float u_scale;\nuniform highp vec2 u_offset;\nvarying highp vec2 v_texcoord;\nvoid main()\n{\n  v_texcoord = a_pos * u_scale + u_offset;\n  gl_Position = vec4(u_dvsMat3 * vec3(a_pos * u_coordScale, 1.0), 1.0);\n}"},stretch:{"stretch.frag":"precision mediump float;\nvarying highp vec2 v_texcoord;\n#include <raster/common/common.glsl>\nuniform float u_minCutOff[3];\nuniform float u_maxCutOff[3];\nuniform float u_minOutput;\nuniform float u_maxOutput;\nuniform float u_factor[3];\nuniform bool u_useGamma;\nuniform float u_gamma[3];\nuniform float u_gammaCorrection[3];\n#include <raster/lut/colorize.glsl>\nfloat stretchOneValue(float val, float minCutOff, float maxCutOff, float minOutput, float maxOutput, float factor, bool useGamma, float gamma, float gammaCorrection) {\n  if (val >= maxCutOff) {\n    return maxOutput;\n  } else if (val <= minCutOff) {\n    return minOutput;\n  }\n  float stretchedVal;\n  if (useGamma) {\n  \tfloat tempf = 1.0;\n\t  float outRange = maxOutput - minOutput;\n\t  float relativeVal = (val - minCutOff) / (maxCutOff - minCutOff);\n\t  if (gamma > 1.0) {\n      tempf -= pow(1.0 / outRange, relativeVal * gammaCorrection);\n    }\n    stretchedVal = (tempf * outRange * pow(relativeVal, 1.0 / gamma) + minOutput) / 255.0;\n  } else {\n    stretchedVal = minOutput + (val - minCutOff) * factor;\n  }\n  return stretchedVal;\n}\nvoid main() {\n  vec2 pixelLocation = getPixelLocation(v_texcoord);\n  if (isOutside(pixelLocation)) {\n     gl_FragColor = vec4(0.0, 0.0, 0.0, 0.0);\n     return;\n  }\n  vec4 currentPixel = getPixel(pixelLocation);\n  if (currentPixel.a == 0.0) {\n    gl_FragColor = vec4(0.0, 0.0, 0.0, 0.0);\n    return;\n  }\n  if (u_bandCount == 1) {\n    float grayVal = stretchOneValue(currentPixel.r, u_minCutOff[0], u_maxCutOff[0], u_minOutput, u_maxOutput, u_factor[0], u_useGamma, u_gamma[0], u_gammaCorrection[0]);\n#ifdef APPLY_COLORMAP\n      vec4 result = colorize(vec4(grayVal, grayVal, grayVal, 1.0), u_useGamma ? 255.0 : 1.0);\n      gl_FragColor = vec4(result.xyz, 1.0) * result.a * currentPixel.a * u_opacity;\n#else\n      gl_FragColor = vec4(grayVal, grayVal, grayVal, 1.0) * currentPixel.a * u_opacity;\n#endif\n  } else {\n    float redVal = stretchOneValue(currentPixel.r, u_minCutOff[0], u_maxCutOff[0], u_minOutput, u_maxOutput, u_factor[0], u_useGamma, u_gamma[0], u_gammaCorrection[0]);\n    float greenVal = stretchOneValue(currentPixel.g, u_minCutOff[1], u_maxCutOff[1], u_minOutput, u_maxOutput, u_factor[1], u_useGamma, u_gamma[1], u_gammaCorrection[1]);\n    float blueVal = stretchOneValue(currentPixel.b, u_minCutOff[2], u_maxCutOff[2], u_minOutput, u_maxOutput, u_factor[2], u_useGamma, u_gamma[2], u_gammaCorrection[2]);\n    gl_FragColor = vec4(redVal, greenVal, blueVal, 1.0) * currentPixel.a * u_opacity;\n  }\n}","stretch.vert":"precision mediump float;\nattribute vec2 a_pos;\nuniform highp mat3 u_dvsMat3;\nuniform highp vec2 u_coordScale;\nuniform highp float u_scale;\nuniform highp vec2 u_offset;\nvarying highp vec2 v_texcoord;\nvoid main()\n{\n  v_texcoord = a_pos * u_scale + u_offset;\n  gl_Position = vec4(u_dvsMat3 * vec3(a_pos * u_coordScale, 1.0), 1.0);\n}"}},stencil:{"stencil.frag":"void main() {\n  gl_FragColor = vec4(1.0, 1.0, 1.0, 1.0);\n}","stencil.vert":"attribute vec2 a_pos;\nvoid main() {\n  gl_Position = vec4(a_pos, 0.0, 1.0);\n}"},tileInfo:{"tileInfo.frag":"uniform mediump sampler2D u_texture;\nvarying mediump vec2 v_tex;\nvoid main(void) {\n  lowp vec4 color = texture2D(u_texture, v_tex);\n  gl_FragColor = 0.75 * color;\n}","tileInfo.vert":"attribute vec2 a_pos;\nuniform highp mat3 u_dvsMat3;\nuniform mediump float u_depth;\nuniform mediump vec2 u_coord_ratio;\nuniform mediump vec2 u_delta;\nuniform mediump vec2 u_dimensions;\nvarying mediump vec2 v_tex;\nvoid main() {\n  mediump vec2 offset = u_coord_ratio * vec2(u_delta + a_pos * u_dimensions);\n  vec3 v_pos = u_dvsMat3 * vec3(offset, 1.0);\n  gl_Position = vec4(v_pos.xy, 0.0, 1.0);\n  v_tex = a_pos;\n}"},util:{"encoding.glsl":"const vec4 rgba2float_factors = vec4(\n    255.0 / (256.0),\n    255.0 / (256.0 * 256.0),\n    255.0 / (256.0 * 256.0 * 256.0),\n    255.0 / (256.0 * 256.0 * 256.0 * 256.0)\n  );\nfloat rgba2float(vec4 rgba) {\n  return dot(rgba, rgba2float_factors);\n}"}}}).apply(null,i))||(e.exports=o)},V5jM:function(e,t,n){var i,o;i=[n.dj.c(e.i),t,n("zOht"),n("j2SP"),n("apbF"),n("3+7H"),n("TQvW"),n("U+8K")],void 0===(o=(function(e,t,n,i,o,r,a,l){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var s=function(e){function t(){var t=null!==e&&e.apply(this,arguments)||this;return t._color=i.vec4f32.fromValues(0,1,0,1),t}return n.__extends(t,e),t.prototype.dispose=function(){this._program&&this._program.dispose()},t.prototype.prepareState=function(e){var t=e.context;t.setStencilTestEnabled(!0),t.setBlendingEnabled(!1),t.setFaceCullingEnabled(!1),t.setColorMask(!1,!1,!1,!1),t.setStencilOp(7680,7680,7681),t.setStencilWriteMask(255),t.setStencilFunction(519,0,255)},t.prototype.draw=function(e,t){var n=e.context,i=e.state;this._program||(this._program=l.createProgram(n,a.background));var r=this._program,s=o.createProgramDescriptor("clip",{geometry:[{location:0,name:"a_pos",count:2,type:5122}]}),u=t.getVAO(n,i,s.attributes,s.bufferLayouts);n.bindProgram(this._program),r.setUniform2fv("u_coord_range",[1,1]),r.setUniform4fv("u_color",this._color),r.setUniformMatrix3fv("u_dvsMat3",i.displayMat3),n.bindVAO(u),n.drawElements(4,u.indexBuffer.size,5125,0),n.bindVAO()},t}(r.default);t.default=s}).apply(null,i))||(e.exports=o)},VY6u:function(e,t,n){var i,o;i=[n.dj.c(e.i),t],void 0===(o=(function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.between=t.interpolate=t.sqr=t.log2=t.degToByte=t.radToByte=t.positiveMod=t.C_SQRT2_INV=t.C_SQRT2=t.C_DEG_TO_RAD=t.C_DEG_TO_256=t.C_256_TO_RAD=t.C_RAD_TO_256=t.C_PI_BY_2=t.C_2PI=t.C_PI=t.C_INFINITY=void 0,t.C_INFINITY=Number.POSITIVE_INFINITY,t.C_PI=Math.PI,t.C_2PI=2*t.C_PI,t.C_PI_BY_2=t.C_PI/2,t.C_RAD_TO_256=128/t.C_PI,t.C_256_TO_RAD=t.C_PI/128,t.C_DEG_TO_256=256/360,t.C_DEG_TO_RAD=t.C_PI/180,t.C_SQRT2=1.414213562,t.C_SQRT2_INV=1/t.C_SQRT2;var n=1/Math.LN2;function i(e,t){return(e%=t)>=0?e:e+t}t.positiveMod=i,t.radToByte=function(e){return i(e*t.C_RAD_TO_256,256)},t.degToByte=function(e){return i(e*t.C_DEG_TO_256,256)},t.log2=function(e){return Math.log(e)*n},t.sqr=function(e){return e*e},t.interpolate=function(e,t,n){return e*(1-n)+t*n},t.between=function(e,t,n){return e>=t&&e<=n||e>=n&&e<=t}}).apply(null,i))||(e.exports=o)},a08a:function(e,t,n){var i,o;i=[n.dj.c(e.i),t,n("zOht"),n("LxLY"),n("ab6c"),n("j2SP"),n("tI6k"),n("JNkf"),n("Dos2"),n("3+7H")],void 0===(o=(function(e,t,n,i,o,r,a,l,s,u){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.WGLBrushVTLLine=t.C_DEG_TO_RAD=void 0,t.C_DEG_TO_RAD=Math.PI/180;var c=[1,1,1,1],f=function(e){function t(){var t=null!==e&&e.apply(this,arguments)||this;return t._color=r.vec4f32.create(),t._dashArray=o.vec2f32.create(),t._programOptions={id:!1,dd:!1,pattern:!1},t}return n.__extends(t,e),t.prototype.dispose=function(){},t.prototype.drawMany=function(e,t){var n=e.context,o=e.displayLevel,r=e.state,u=e.drawPhase,f=e.styleLayerId,d=e.styleLayer,v=e.painter.getVectorTileProgramCach(),_=d.getPaintValue("line-translate",o),m=d.getPaintValue("line-translate-anchor",o),p=d.getPaintValue("line-pattern",o),g=void 0!==p,h=1/e.pixelRatio,x=d.getPaintValue("line-blur",o),y=d.hasDataDrivenColor?c:d.getPaintValue("line-color",o),b=d.hasDataDrivenOpacity?1:d.getPaintValue("line-opacity",o),T=d.hasDataDrivenWidth?1:d.getPaintValue("line-width",o),C=b*y[3];this._color[0]=C*y[0],this._color[1]=C*y[1],this._color[2]=C*y[2],this._color[3]=C;var S,D=d.hasDataDrivenLine,I=u===l.WGLDrawPhase.HITTEST;I&&(S=s.u32to4Xu8(f+1));var P=(I?1:0)<<2|(D?1:0)<<1|(g?1:0),w=this._programOptions;w.id=I,w.dd=D,w.pattern=g;var z=v.getProgram(3,P,w);if(n.bindProgram(z),z.setUniformMatrix3fv("u_displayViewMat3",r.displayViewMat3),z.setUniformMatrix3fv("u_displayMat3",1===m?r.displayMat3:r.displayViewMat3),z.setUniform2fv("u_lineTranslation",_),z.setUniform1f("u_depth",d.z),z.setUniform1f("u_blur",x),z.setUniform1f("u_antialiasing",h),z.setUniform4fv("u_color",this._color),z.setUniform1f("u_width",T),I&&z.setUniform4fv("u_id",S),g){var O=e.spriteMosaic,V=O.getMosaicItemPosition(p,!0);V&&(O.bind(n,9729,V.page,a.VTL_TEXTURE_BINDING_UNIT_SPRITES),z.setUniform2f("u_pattern_tl",V.tl[0],V.br[1]),z.setUniform2f("u_pattern_br",V.br[0],V.tl[1]),z.setUniform2f("u_spriteSize",8*V.size[0],V.size[1]),z.setUniform1i("u_texture",a.VTL_TEXTURE_BINDING_UNIT_SPRITES))}else{var M=d.getPaintValue("line-dasharray",o);M.length<2&&(M=[1,-1]),this._dashArray[0]=8*M[0],this._dashArray[1]=8*M[1],z.setUniform2fv("u_dasharray",this._dashArray)}for(var E=0,A=t;E<A.length;E++){var F=A[E];if(F.layerData[f]){var L=F.layerData[f];L.prepareForRendering(n,v);var U=L.lineVertexArrayObject;i.isNone(U)||(n.bindVAO(U),z.setUniformMatrix3fv("u_dvsMat3",F.transforms.dvs),n.setStencilFunction(514,F.stencilRef,255),n.drawElements(4,L.lineIndexCount,5125,Uint32Array.BYTES_PER_ELEMENT*L.lineIndexStart),F.triangleCount+=L.lineIndexCount/3)}}},t}(u.default);t.WGLBrushVTLLine=f}).apply(null,i))||(e.exports=o)},bqoF:function(e,t,n){var i,o;i=[n.dj.c(e.i),t,n("hPTP")],void 0===(o=(function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.tileInfo=void 0,t.tileInfo={name:"tileInfo",shaders:{vertexShader:n.resolveIncludes("tileInfo/tileInfo.vert"),fragmentShader:n.resolveIncludes("tileInfo/tileInfo.frag")},attributes:{a_pos:0}}}).apply(null,i))||(e.exports=o)},f93k:function(e,t,n){var i,o;i=[n.dj.c(e.i),t,n("zOht"),n("JNkf"),n("apbF"),n("PDSL"),n("m87x")],void 0===(o=(function(e,t,n,i,o,r,a){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var l=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return n.__extends(t,e),t.prototype.dispose=function(){},t.prototype.getGeometryType=function(){return i.WGLGeometryType.LABEL},t.prototype.drawGeometry=function(e,t,n,i,r){var l=e.context,s=e.painter,u=e.state,c=e.rendererInfo,f=n.indexCount,d=n.indexFrom,v=a.LabelMaterialKey.load(n.materialKey),_=v.mapAligned?1:0;if(_||!(Math.abs(t.key.level-Math.round(100*e.displayLevel)/100)>=1)){var m=function(e){return o.createProgramDescriptor(e.data,{geometry:[{location:0,name:"a_pos",count:2,type:5122},{location:1,name:"a_id",count:4,type:5121},{location:2,name:"a_color",count:4,type:5121,normalized:!0},{location:3,name:"a_haloColor",count:4,type:5121,normalized:!0},{location:4,name:"a_texAndSize",count:4,type:5121},{location:5,name:"a_refSymbolAndPlacementOffset",count:4,type:5121},{location:6,name:"a_glyphData",count:4,type:5121},{location:7,name:"a_vertexOffset",count:2,type:5122},{location:8,name:"a_texCoords",count:2,type:5123}]})}(v),p=m.bufferLayouts,g=m.attributes,h=s.materialManager.getMaterialProgram(e,v,"materials/label",g,r),x=this._getVAO(l,p,g,i);e.context.setStencilFunction(514,0,255),l.bindProgram(h),l.bindVAO(x),this._setSharedUniforms(h,e,t),s.textureManager.bindTextures(l,h,v);var y=1===_?u.displayViewMat3:u.displayMat3;if(v.vvSizeMinMaxValue&&h.setUniform4fv("u_vvSizeMinMaxValue",c.vvSizeMinMaxValue),v.vvSizeScaleStops&&h.setUniform1f("u_vvSizeScaleStopsValue",c.vvSizeScaleStopsValue),v.vvSizeFieldStops){var b=c.getSizeVVFieldStops(t.key.level);h.setUniform1fv("u_vvSizeFieldStopsValues",b.values),h.setUniform1fv("u_vvSizeFieldStopsSizes",b.sizes)}v.vvSizeUnitValue&&h.setUniform1f("u_vvSizeUnitValueWorldToPixelsRatio",c.vvSizeUnitValueToPixelsRatio),h.setUniform1f("u_mapRotation",Math.floor(u.rotation/360*254)),h.setUniform1f("u_mapAligned",_),h.setUniformMatrix3fv("u_displayMat3",y),h.setUniform1f("u_opacity",1),h.setUniform1f("u_zoomLevel",Math.round(10*e.displayLevel)),h.setUniform2fv("u_screenSize",e.state.size),h.setUniform1f("u_isHalo",1),l.drawElements(4,f,5125,Uint32Array.BYTES_PER_ELEMENT*d),h.setUniform1f("u_isHalo",0),l.drawElements(4,f,5125,Uint32Array.BYTES_PER_ELEMENT*d),l.bindVAO(null),l.setStencilTestEnabled(!0),l.setBlendingEnabled(!0)}},t}(r.default);t.default=l}).apply(null,i))||(e.exports=o)},gvME:function(e,t,n){var i,o;i=[n.dj.c(e.i),t,n("zOht"),n("JNkf"),n("apbF"),n("PDSL"),n("m87x")],void 0===(o=(function(e,t,n,i,o,r,a){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var l=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return n.__extends(t,e),t.prototype.dispose=function(){},t.prototype.getGeometryType=function(){return i.WGLGeometryType.LINE},t.prototype.drawGeometry=function(e,t,n,i,r){var l=e.context,s=e.painter,u=e.rendererInfo,c=e.requiredLevel,f=n.indexFrom,d=n.indexCount,v=a.LineMaterialKey.load(n.materialKey),_=function(e){return o.createProgramDescriptor(e.data,{geometry:[{location:0,name:"a_pos",count:2,type:5122},{location:1,name:"a_id",count:4,type:5121},{location:2,name:"a_color",count:4,type:5121,normalized:!0},{location:3,name:"a_offsetAndNormal",count:4,type:5120},{location:4,name:"a_accumulatedDistanceAndHalfWidth",count:2,type:5123},{location:5,name:"a_tlbr",count:4,type:5123},{location:6,name:"a_segmentDirection",count:4,type:5120},{location:7,name:"a_aux",count:2,type:5123}]})}(v),m=_.bufferLayouts,p=_.attributes,g=s.materialManager.getMaterialProgram(e,v,"materials/line",p,r),h=this._getVAO(l,m,p,i),x=1/e.pixelRatio;l.bindProgram(g),l.bindVAO(h),this._setSharedUniforms(g,e,t),v.textureBinding&&s.textureManager.bindTextures(l,g,v);var y=Math.pow(2,c-t.key.level)/e.pixelRatio;if(g.setUniform1f("u_zoomFactor",y),g.setUniform1f("u_blur",0+x),g.setUniform1f("u_antialiasing",x),v.vvSizeMinMaxValue&&g.setUniform4fv("u_vvSizeMinMaxValue",u.vvSizeMinMaxValue),v.vvSizeScaleStops&&g.setUniform1f("u_vvSizeScaleStopsValue",u.vvSizeScaleStopsValue),v.vvSizeFieldStops){var b=u.getSizeVVFieldStops(t.key.level);g.setUniform1fv("u_vvSizeFieldStopsValues",b.values),g.setUniform1fv("u_vvSizeFieldStopsSizes",b.sizes)}v.vvSizeUnitValue&&g.setUniform1f("u_vvSizeUnitValueWorldToPixelsRatio",u.vvSizeUnitValueToPixelsRatio),v.vvColor&&(g.setUniform1fv("u_vvColorValues",u.vvColorValues),g.setUniform4fv("u_vvColors",u.vvColors)),v.vvOpacity&&(g.setUniform1fv("u_vvOpacityValues",u.vvOpacityValues),g.setUniform1fv("u_vvOpacities",u.vvOpacities)),l.setFaceCullingEnabled(!0),l.setFrontFace(2305),l.setCullFace(1029),l.drawElements(4,d,5125,Uint32Array.BYTES_PER_ELEMENT*f),l.setFaceCullingEnabled(!1),l.bindVAO(null)},t}(r.default);t.default=l}).apply(null,i))||(e.exports=o)},hPTP:function(e,t,n){var i,o;i=[n.dj.c(e.i),t,n("DJpR"),n("Uu9s")],void 0===(o=(function(e,t,n,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.resolveIncludes=void 0;var o=new n.ShaderCompiler((function(e){var t=i.default;return e.split("/").forEach((function(e){t&&(t=t[e])})),t}));t.resolveIncludes=function(e){return o.resolveIncludes(e)}}).apply(null,i))||(e.exports=o)},itWS:function(e,t,n){var i,o;i=[n.dj.c(e.i),t,n("kmbk"),n("V5jM"),n("66cO"),n("p2sx"),n("oBAw"),n("jEV9"),n("Rpsm"),n("a08a"),n("zbL2"),n("8fgo"),n("f93k"),n("gvME"),n("2pwJ"),n("3u8V"),n("oUUG")],void 0===(o=(function(e,t,n,i,o,r,a,l,s,u,c,f,d,v,_,m,p){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.vtlBrushes=t.brushes=void 0,t.brushes={marker:_.default,line:v.default,fill:f.default,text:m.default,label:d.default,clip:i.default,stencil:r.default,bitmap:n.default,raster:p.default,tileInfo:o.default,vtlBackground:a.WGLBrushVTLBackground,vtlFill:s.WGLBrushVTLFill,vtlLine:u.WGLBrushVTLLine,vtlCircle:l.WGLBrushVTLCircle,vtlSymbol:c.WGLBrushVTLSymbol},t.vtlBrushes={vtlBackground:a.WGLBrushVTLBackground,vtlFill:s.WGLBrushVTLFill,vtlLine:u.WGLBrushVTLLine,vtlCircle:l.WGLBrushVTLCircle,vtlSymbol:c.WGLBrushVTLSymbol}}).apply(null,i))||(e.exports=o)},j2SP:function(e,t,n){var i,o;i=[n.dj.c(e.i),t,n("3gjc")],void 0===(o=(function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.vec4f32=void 0,t.vec4f32=n}).apply(null,i))||(e.exports=o)},jEV9:function(e,t,n){var i,o;i=[n.dj.c(e.i),t,n("zOht"),n("LxLY"),n("j2SP"),n("JNkf"),n("Dos2"),n("3+7H")],void 0===(o=(function(e,t,n,i,o,r,a,l){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.WGLBrushVTLCircle=void 0;var s=[1,1,1,1],u=function(e){function t(){var t=null!==e&&e.apply(this,arguments)||this;return t._color=o.vec4f32.create(),t._strokeColor=o.vec4f32.create(),t._programOptions={id:!1},t}return n.__extends(t,e),t.prototype.dispose=function(){},t.prototype.drawMany=function(e,t){var n=e.context,o=e.state,l=e.drawPhase,u=e.styleLayerId,c=e.displayLevel,f=e.styleLayer,d=e.painter.getVectorTileProgramCach(),v=f.hasDataDrivenRadius?1:f.getPaintValue("circle-radius",c),_=f.hasDataDrivenColor?s:f.getPaintValue("circle-color",c),m=f.hasDataDrivenOpacity?1:f.getPaintValue("circle-opacity",c),p=f.hasDataDrivenStrokeWidth?1:f.getPaintValue("circle-stroke-width",c),g=f.hasDataDrivenStrokeColor?s:f.getPaintValue("circle-stroke-color",c),h=f.hasDataDrivenStrokeOpacity?1:f.getPaintValue("circle-stroke-opacity",c),x=f.hasDataDrivenBlur?0:f.getPaintValue("circle-blur",c),y=m*_[3];this._color[0]=y*_[0],this._color[1]=y*_[1],this._color[2]=y*_[2],this._color[3]=y,this._strokeColor[0]=(y=h*g[3])*g[0],this._strokeColor[1]=y*g[1],this._strokeColor[2]=y*g[2],this._strokeColor[3]=y;var b=f.getPaintValue("circle-translate",c),T=f.getPaintValue("circle-translate-anchor",c),C=l===r.WGLDrawPhase.HITTEST,S=C?1:0,D=this._programOptions;D.id=C;var I=d.getProgram(5,S,D);if(n.bindProgram(I),I.setUniformMatrix3fv("u_displayMat3",1===T?o.displayMat3:o.displayViewMat3),I.setUniform2fv("u_circleTranslation",b),I.setUniform1f("u_depth",f.z),I.setUniform1f("u_radius",v),I.setUniform4fv("u_color",this._color),I.setUniform1f("u_blur",x),I.setUniform1f("u_stroke_width",p),I.setUniform4fv("u_stroke_color",this._strokeColor),I.setUniform1f("u_antialiasingWidth",1.2),C){var P=a.u32to4Xu8(u+1);I.setUniform4fv("u_id",P)}for(var w=0,z=t;w<z.length;w++){var O=z[w];if(O.layerData[u]){var V=O.layerData[u];V.prepareForRendering(n,d);var M=V.circleVertexArrayObject;i.isNone(M)||(n.bindVAO(M),I.setUniformMatrix3fv("u_dvsMat3",O.transforms.dvs),n.setStencilFunction(514,O.stencilRef,255),n.drawElements(4,V.circleIndexCount,5125,Uint32Array.BYTES_PER_ELEMENT*V.circleIndexStart),O.triangleCount+=V.circleIndexCount/3)}}},t}(l.default);t.WGLBrushVTLCircle=u}).apply(null,i))||(e.exports=o)},kmbk:function(e,t,n){var i,o;i=[n.dj.c(e.i),t,n("zOht"),n("tI6k"),n("Nwkb"),n("3+7H")],void 0===(o=(function(e,t,n,i,o,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var a={nearest:{defines:[],samplingMode:9728,mips:!1},bilinear:{defines:[],samplingMode:9729,mips:!1},bicubic:{defines:["bicubic"],samplingMode:9729,mips:!1},trilinear:{defines:[],samplingMode:9987,mips:!0}},l=function(e){function t(){var t=null!==e&&e.apply(this,arguments)||this;return t._desc={vsPath:"raster/bitmap",fsPath:"raster/bitmap",attributes:{a_position:0,a_texcoord:1}},t}return n.__extends(t,e),t.prototype.dispose=function(){this._quad&&this._quad.dispose()},t.prototype.prepareState=function(e,t){var n=e.context;n.setBlendingEnabled(!0),n.setBlendFunctionSeparate(1,771,1,771),n.setColorMask(!0,!0,!0,!0),n.setStencilWriteMask(0),n.setStencilTestEnabled(!0),n.setStencilFunction(514,t.stencilRef,255)},t.prototype.draw=function(e,t){var n=e.context,r=e.renderingOptions,l=e.painter;if(t.source){e.timeline.begin(this.name),this._quad||(this._quad=new o(n,[0,0,1,0,0,1,1,1]));var s=function(e,t,n){if("dynamic"===n.samplingMode){var i=e.state,o=t.resolution/t.pixelRatio/i.resolution,r=Math.round(e.pixelRatio)!==e.pixelRatio;return i.rotation||o>1.05||o<.95||r||t.isSourceScaled||t.rotation?a.bilinear:a.nearest}return a[n.samplingMode]}(e,t,r),u=l.materialManager.getProgram(e,this._desc,s.defines);t.updateTexture(e),t.setSamplingProfile(s),t.bind(e,i.TEXTURE_BINDING_BITMAP),n.bindProgram(u),u.setUniformMatrix3fv("u_dvsMat3",t.transforms.dvs),u.setUniform1i("u_texture",i.TEXTURE_BINDING_BITMAP),u.setUniform2fv("u_coordScale",t.coordScale),this._quad.draw(),e.timeline.end(this.name)}},t}(r.default);t.default=l}).apply(null,i))||(e.exports=o)},lUvf:function(e,t,n){var i,o;i=[n.dj.c(e.i),t,n("DJpR"),n("8HLi")],void 0===(o=(function(e,t,n,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.text=t.line=t.icon=t.outline=t.fill=t.circle=t.background=void 0;var o=function(e){return n.glslifyDefineMap({ID:e.id,PATTERN:e.pattern})};t.background={name:"background",shaders:function(e){return{vertexShader:o(e)+i.resolveIncludes("background/background.vert"),fragmentShader:o(e)+i.resolveIncludes("background/background.frag")}},attributes:{a_pos:0}};var r=function(e){return n.glslifyDefineMap({ID:e.id})};t.circle={name:"circle",shaders:function(e){return{vertexShader:r(e)+i.resolveIncludes("circle/circle.vert"),fragmentShader:r(e)+i.resolveIncludes("circle/circle.frag")}},attributes:{a_pos:0,a_color:1,a_stroke_color:2,a_data:3}};var a=function(e){return n.glslifyDefineMap({ID:e.id,DD:e.dd,PATTERN:e.pattern})};t.fill={name:"fill",shaders:function(e){return{vertexShader:a(e)+i.resolveIncludes("fill/fill.vert"),fragmentShader:a(e)+i.resolveIncludes("fill/fill.frag")}},attributes:{a_pos:0,a_color:1}};var l=function(e){return n.glslifyDefineMap({ID:e.id,DD:e.dd})};t.outline={name:"outline",shaders:function(e){return{vertexShader:l(e)+i.resolveIncludes("outline/outline.vert"),fragmentShader:l(e)+i.resolveIncludes("outline/outline.frag")}},attributes:{a_pos:0,a_offset:1,a_xnormal:2,a_color:3}};var s=function(e){return n.glslifyDefineMap({ID:e.id,DD:e.dd,SDF:e.sdf})};t.icon={name:"icon",shaders:function(e){return{vertexShader:s(e)+i.resolveIncludes("icon/icon.vert"),fragmentShader:s(e)+i.resolveIncludes("icon/icon.frag")}},attributes:{a_pos:0,a_vertexOffset:1,a_texAngleRange:2,a_levelInfo:3,a_color:4,a_size:5,a_opacityInfo:6}};var u=function(e){return n.glslifyDefineMap({ID:e.id,DD:e.dd,PATTERN:e.pattern})};t.line={name:"line",shaders:function(e){return{vertexShader:u(e)+i.resolveIncludes("line/line.vert"),fragmentShader:u(e)+i.resolveIncludes("line/line.frag")}},attributes:{a_pos:0,a_offsetAndNormal:1,a_accumulatedDistance:2,a_color:3,a_width:4}};var c=function(e){return n.glslifyDefineMap({ID:e.id,DD:e.dd})};t.text={name:"text",shaders:function(e){return{vertexShader:c(e)+i.resolveIncludes("text/text.vert"),fragmentShader:c(e)+i.resolveIncludes("text/text.frag")}},attributes:{a_pos:0,a_vertexOffset:1,a_texAngleRange:2,a_levelInfo:3,a_color:4,a_size:5,a_opacityInfo:6}}}).apply(null,i))||(e.exports=o)},oBAw:function(e,t,n){var i,o;i=[n.dj.c(e.i),t,n("zOht"),n("lgZd"),n("j2SP"),n("DJpR"),n("lUvf"),n("tI6k"),n("JNkf"),n("Dos2"),n("3+7H")],void 0===(o=(function(e,t,n,i,o,r,a,l,s,u,c){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.WGLBrushVTLBackground=void 0;var f=function(e){function t(){var t=null!==e&&e.apply(this,arguments)||this;return t._color=o.vec4f32.fromValues(1,0,0,1),t._patternMatrix=i.mat3f32.create(),t._programOptions={id:!1,pattern:!1},t}return n.__extends(t,e),t.prototype.dispose=function(){this._program&&(this._program.dispose(),this._program=null),this._vao&&(this._vao.dispose(),this._vao=null)},t.prototype.drawMany=function(e,t){var n=e.context,i=e.styleLayerId;this._loadWGLResources(n);var o,r=e.displayLevel,a=e.styleLayer,c=e.painter.getVectorTileProgramCach(),f=a.getPaintValue("background-color",r),d=a.getPaintValue("background-opacity",r),v=a.getPaintValue("background-pattern",r),_=void 0!==v,m=f[3]*d,p=1|window.devicePixelRatio,g=e.spriteMosaic,h=p>l.VTL_HIGH_RES_CUTOFF?2:1,x=e.drawPhase===s.WGLDrawPhase.HITTEST,y=(x?1:0)<<1|(_?1:0),b=this._programOptions;b.id=x,b.pattern=_;var T=c.getProgram(0,y,b);if(n.bindVAO(this._vao),n.bindProgram(T),_){if(!(o=g.getMosaicItemPosition(v,!0)))return;T.setUniform1f("u_opacity",d),T.setUniform2f("u_pattern_tl",o.tl[0],o.tl[1]),T.setUniform2f("u_pattern_br",o.br[0],o.br[1]),T.setUniform1i("u_texture",l.VTL_TEXTURE_BINDING_UNIT_SPRITES),g.bind(n,9729,o.page,l.VTL_TEXTURE_BINDING_UNIT_SPRITES)}else this._color[0]=m*f[0],this._color[1]=m*f[1],this._color[2]=m*f[2],this._color[3]=m,T.setUniform4fv("u_color",this._color);if(T.setUniform1f("u_depth",a.z||0),x){var C=u.u32to4Xu8(i+1);T.setUniform4fv("u_id",C)}for(var S=0,D=t;S<D.length;S++){var I=D[S];if(T.setUniform1f("u_coord_range",I.coordRange[0]),T.setUniformMatrix3fv("u_dvsMat3",I.transforms.dvs),_){var P=Math.max(Math.pow(2,Math.round(r)-I.key.level),1),w=h*I.size[0]*P,z=w/o.size[1];this._patternMatrix[0]=w/o.size[0],this._patternMatrix[4]=z,T.setUniformMatrix3fv("u_pattern_matrix",this._patternMatrix)}n.setStencilFunction(514,I.stencilRef,255),n.drawArrays(5,0,4)}},t.prototype._loadWGLResources=function(e){if(!this._program||!this._vao){var t=r.createProgram(e,a.background);if(t){var n=new Int8Array([0,0,1,0,0,1,1,1]),i=r.BufferObject.createVertex(e,35044,n),o=new r.VertexArrayObject(e,a.background.attributes,{geometry:[{name:"a_pos",count:2,type:5120,offset:0,stride:2,normalized:!1,divisor:0}]},{geometry:i});this._program=t,this._vao=o}}},t}(c.default);t.WGLBrushVTLBackground=f}).apply(null,i))||(e.exports=o)},oUUG:function(e,t,n){var i,o;i=[n.dj.c(e.i),t,n("zOht"),n("Nwkb"),n("3+7H"),n("A97r")],void 0===(o=(function(e,t,n,i,o,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var a=function(e){function t(){var t=null!==e&&e.apply(this,arguments)||this;return t._desc={lut:{vsPath:"raster/lut",fsPath:"raster/lut",attributes:{a_position:0,a_texcoord:1}},stretch:{vsPath:"raster/stretch",fsPath:"raster/stretch",attributes:{a_position:0,a_texcoord:1}},hillshade:{vsPath:"raster/hillshade",fsPath:"raster/hillshade",attributes:{a_position:0,a_texcoord:1}}},t._rendererUniformInfos=new Map,t}return n.__extends(t,e),t.prototype.dispose=function(){this._quad&&this._quad.dispose()},t.prototype.prepareState=function(e,t){var n=e.context;n.setBlendingEnabled(!0),n.setBlendFunctionSeparate(1,771,1,771),n.setColorMask(!0,!0,!0,!0),n.setStencilWriteMask(0),n.setStencilTestEnabled(!0),n.setStencilFunction(514,t.stencilRef,255)},t.prototype.draw=function(e,t){if(t.source&&!t.suspended){e.timeline.begin(this.name),t.updateTexture(e);var n=this.getShaderVariations(t),i=e.painter.materialManager.getProgram(e,this._desc[t.symbolizerParameters.type],n);this.drawWithProgram(e.context,i,t),e.timeline.end(this.name)}},t.prototype.drawWithProgram=function(e,t,o,a,l,s){void 0===a&&(a=1),void 0===l&&(l=[0,0]),void 0===s&&(s=!1),this._quad||(this._quad=new i(e,[0,0,1,0,0,1,1,1]));var u=o.symbolizerParameters,c=o.transformGrid,f=o.width,d=o.height,v=o.opacity,_=u.type;e.bindProgram(t);var m=this.getShaderVariations(o),p=this.getUniformInfos(_,e,t,m),g=o.getTextures();r.setTextures(e,t,g.names,g.textures);var h=r.getBasicGridUniforms(a,l),x=r.getCommonUniforms(c,[f,d],[o.source.width,o.source.height],v,s);if(r.setUniforms(t,p,n.__assign(n.__assign({u_coordScale:o.coordScale,u_dvsMat3:o.transforms.dvs},h),x)),u.colormap){var y=r.getColormapUniforms(u.colormap,u.colormapOffset);r.setUniforms(t,p,y)}if("stretch"===u.type){var b=r.getStretchUniforms(u);r.setUniforms(t,p,b)}else if("hillshade"===u.type){var T=r.getShadedReliefUniforms(u);r.setUniforms(t,p,T)}this._quad.draw()},t.prototype.getUniformInfos=function(e,t,n,i){var o=i.length>0?e+"-"+i.join("-"):e;if(this._rendererUniformInfos.has(o))return this._rendererUniformInfos.get(o);var a=r.getUniformLocationInfos(t,n);return this._rendererUniformInfos.set(o,a),a},t.prototype.getShaderVariations=function(e){var t=[];return"cubic"===e.interpolation&&t.push("bicubic"),e.symbolizerParameters.colormap&&t.push("applyColormap"),e.transformGrid&&t.push("applyProjection"),t},t}(o.default);t.default=a}).apply(null,i))||(e.exports=o)},p2sx:function(e,t,n){var i,o;i=[n.dj.c(e.i),t,n("zOht"),n("j2SP"),n("DJpR"),n("3+7H"),n("TQvW")],void 0===(o=(function(e,t,n,i,o,r,a){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var l=function(e){function t(){var t=null!==e&&e.apply(this,arguments)||this;return t._color=i.vec4f32.fromValues(1,0,0,1),t._initialized=!1,t}return n.__extends(t,e),t.prototype.dispose=function(){this._solidProgram&&(this._solidProgram.dispose(),this._solidProgram=null),this._solidVertexArrayObject&&(this._solidVertexArrayObject.dispose(),this._solidVertexArrayObject=null)},t.prototype.prepareState=function(e,t){var n=e.context;n.setDepthWriteEnabled(!1),n.setDepthTestEnabled(!1),n.setStencilTestEnabled(!0),n.setBlendingEnabled(!1),n.setColorMask(!1,!1,!1,!1),n.setStencilOp(7680,7680,7681),n.setStencilWriteMask(255),n.setStencilFunctionSeparate(1032,516,t.stencilRef,255)},t.prototype.draw=function(e,t){var n=e.context;this._initialized||this._initialize(n),n.bindVAO(this._solidVertexArrayObject),n.bindProgram(this._solidProgram),this._solidProgram.setUniformMatrix3fv("u_dvsMat3",t.transforms.dvs),this._solidProgram.setUniform2fv("u_coord_range",t.coordRange),this._solidProgram.setUniform1f("u_depth",0),this._solidProgram.setUniform4fv("u_color",this._color),n.drawArrays(5,0,4),n.bindVAO()},t.prototype._initialize=function(e){if(this._initialized)return!0;var t=o.createProgram(e,a.background);if(!t)return!1;var n=new Int8Array([0,0,1,0,0,1,1,1]),i=o.BufferObject.createVertex(e,35044,n),r=new o.VertexArrayObject(e,a.background.attributes,{geometry:[{name:"a_pos",count:2,type:5120,offset:0,stride:2,normalized:!1,divisor:0}]},{geometry:i});return this._solidProgram=t,this._solidVertexArrayObject=r,this._initialized=!0,!0},t}(r.default);t.default=l}).apply(null,i))||(e.exports=o)},sbqO:function(e,t,n){var i,o;i=[n.dj.c(e.i),t,n("zOht"),n("ma1f"),n("qsST"),n("LxLY"),n("1E+e"),n("W9tT"),n("DIqE"),n("+6sX"),n("Jvs9"),n("Dos2"),n("QFi0")],void 0===(o=(function(e,t,n,i,o,r,a,l,s,u,c,f,d){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var v=o.getLogger("esri.views.2d.engine.webgl.Mesh2D"),_=function(e,t,n,i){for(var o=0,r=1;r<n;r++)o+=(e[2*(t+r)]-e[2*(t+r-1)])*(e[2*(t+r)+1]+e[2*(t+r-1)+1]);return i?o>0:o<0},m=function(e,t){for(var n=e.coords,i=e.lengths,o=[],r=0,l=0;r<i.length;l+=i[r],r+=1){for(var s=l,u=[];r<i.length-1&&_(n,l+i[r],i[r+1],t);l+=i[r+=1])u.push(l+i[r]-s);for(var c=n.slice(2*s,2*(l+i[r])),f=0,d=a.earcut(c,u,2);f<d.length;f++)o.push(d[f]+s)}return o},p=function(){function e(e,t,n,i){void 0===i&&(i=!1),this._cache={},this.vertices=e,this.indices=t,this.primitiveType=n,this.isMapSpace=i}return e.fromRect=function(t){var n=t.x,i=t.y;return e.fromScreenExtent({xmin:n,ymin:i,xmax:n+t.width,ymax:i+t.height})},e.fromPath=function(t){for(var n=u.convertFromNestedArray(new c.default,t.path,!1,!1),i=n.coords,o=new Uint32Array(m(n,!0)),r=new Uint32Array(i.length/2),a=0;a<r.length;a++)r[a]=f.i1616to32(Math.floor(i[2*a]),Math.floor(i[2*a+1]));return new e({geometry:r},o,4)},e.fromGeometry=function(t,n){var o=n.geometry.type;switch(o){case"polygon":return e.fromPolygon(t,n.geometry);case"extent":return e.fromMapExtent(t,n.geometry);default:return v.error(new i("mapview-bad-type","Unable to create a mesh from type "+o,n)),e.fromRect({x:0,y:0,width:1,height:1})}},e.fromPolygon=function(t,n){for(var i=u.convertFromPolygon(new c.default,n,!1,!1),o=i.coords,r=new Uint32Array(m(i,!1)),a=new Uint32Array(o.length/2),d=s.vec2f64.create(),v=s.vec2f64.create(),_=0;_<a.length;_++)l.vec2.set(d,o[2*_],o[2*_+1]),t.toScreen(v,d),a[_]=f.i1616to32(Math.floor(v[0]),Math.floor(v[1]));return new e({geometry:a},r,4,!0)},e.fromScreenExtent=function(t){var n=t.xmin,i=t.xmax,o=t.ymin,r=t.ymax;return new e({geometry:new Uint32Array([f.i1616to32(n,o),f.i1616to32(i,o),f.i1616to32(n,r),f.i1616to32(n,r),f.i1616to32(i,o),f.i1616to32(i,r)])},new Uint32Array([0,1,2,3,4,5]),4)},e.fromMapExtent=function(t,n){var i=t.toScreen([0,0],[n.xmin,n.ymin]),o=i[0],r=i[1],a=t.toScreen([0,0],[n.xmax,n.ymax]),l=a[0],s=a[1];return new e({geometry:new Uint32Array([f.i1616to32(o,r),f.i1616to32(l,r),f.i1616to32(o,s),f.i1616to32(o,s),f.i1616to32(l,r),f.i1616to32(l,s)])},new Uint32Array([0,1,2,3,4,5]),4)},e.prototype.destroy=function(){for(var e in r.isSome(this._cache.indexBuffer)&&this._cache.indexBuffer.dispose(),this._cache.vertexBuffers)r.isSome(this._cache.vertexBuffers[e])&&this._cache.vertexBuffers[e].dispose()},Object.defineProperty(e.prototype,"elementType",{get:function(){return function(e){switch(e.BYTES_PER_ELEMENT){case 1:return 5121;case 2:return 5123;case 4:return 5125;default:throw new i("Cannot get DataType of array")}}(this.indices)},enumerable:!1,configurable:!0}),e.prototype.getIndexBuffer=function(e,t){return void 0===t&&(t=35044),this._cache.indexBuffer||(this._cache.indexBuffer=d.createIndex(e,t,this.indices)),this._cache.indexBuffer},e.prototype.getVertexBuffers=function(e,t){var i=this;return void 0===t&&(t=35044),this._cache.vertexBuffers||(this._cache.vertexBuffers=Object.keys(this.vertices).reduce((function(o,r){var a;return n.__assign(n.__assign({},o),((a={})[r]=d.createVertex(e,t,i.vertices[r]),a))}),{})),this._cache.vertexBuffers},e}();t.default=p}).apply(null,i))||(e.exports=o)},xJgq:function(e,t,n){var i,o;i=[n.dj.c(e.i),t],void 0===(o=(function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=function(){function e(){this.objectIdFieldName=null,this.globalIdFieldName=null,this.geohashFieldName=null,this.geometryProperties=null,this.geometryType=null,this.spatialReference=null,this.hasZ=!1,this.hasM=!1,this.features=[],this.fields=[],this.transform=null,this.exceededTransferLimit=!1,this.uniqueIdField=null,this.queryGeometryType=null,this.queryGeometry=null}return e.prototype.weakClone=function(){var t=new e;return t.objectIdFieldName=this.objectIdFieldName,t.globalIdFieldName=this.globalIdFieldName,t.geohashFieldName=this.geohashFieldName,t.geometryProperties=this.geometryProperties,t.geometryType=this.geometryType,t.spatialReference=this.spatialReference,t.hasZ=this.hasZ,t.hasM=this.hasM,t.features=this.features,t.fields=this.fields,t.transform=this.transform,t.exceededTransferLimit=this.exceededTransferLimit,t.uniqueIdField=this.uniqueIdField,t.queryGeometry=this.queryGeometry,t.queryGeometryType=this.queryGeometryType,t},e}();t.default=n}).apply(null,i))||(e.exports=o)},zbL2:function(e,t,n){var i,o;i=[n.dj.c(e.i),t,n("zOht"),n("LxLY"),n("ab6c"),n("j2SP"),n("2eQy"),n("tI6k"),n("JNkf"),n("VY6u"),n("Dos2"),n("3+7H")],void 0===(o=(function(e,t,n,i,o,r,a,l,s,u,c,f){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.WGLBrushVTLSymbol=void 0;var d=[1,1,1,1],v=function(e){function t(){var t=null!==e&&e.apply(this,arguments)||this;return t._iconProgramOptions={id:!1,dd:!1,sdf:!1},t._sdfProgramOptions={id:!1,dd:!1},t._spritesTextureSize=o.vec2f32.create(),t._haloColor=r.vec4f32.create(),t._sdfColor=r.vec4f32.create(),t._color=r.vec4f32.create(),t}return n.__extends(t,e),t.prototype.dispose=function(){},t.prototype.drawMany=function(e,t){var n,i=e.styleLayer;e.drawPhase===s.WGLDrawPhase.HITTEST&&(n=c.u32to4Xu8(e.styleLayerId+1)),this._drawIcons(e,i,t,n),this._drawText(e,i,t,n)},t.prototype._drawIcons=function(e,t,n,o){for(var r,c=this,f=e.context,v=e.displayLevel,_=e.drawPhase,m=e.painter,p=e.state,g=e.styleLayerId,h=!1,x=0,y=n;x<y.length;x++)if((G=y[x]).layerData[g]&&(r=G.layerData[g]).iconPerPageElementsMap.size>0){h=!0;break}if(h){var b=t.hasDataDrivenIconSize?1:t.getLayoutValue("icon-size",v),T=t.hasDataDrivenIconColor?d:t.getPaintValue("icon-color",v),C=t.hasDataDrivenIconOpacity?1:t.getPaintValue("icon-opacity",v),S=t.getPaintValue("icon-translate",v),D=t.getPaintValue("icon-translate-anchor",v),I=m.getVectorTileProgramCach(),P=T[3]*C;this._color[0]=P*T[0],this._color[1]=P*T[1],this._color[2]=P*T[2],this._color[3]=P;var w=t.getLayoutValue("icon-rotation-alignment",v);2===w&&(w=1===t.getLayoutValue("symbol-placement",v)?0:1);var z=r.isIconSDF,O=t.hasDataDrivenIcon,V=_===s.WGLDrawPhase.HITTEST,M=(V?1:0)<<2|(O?1:0)<<1|(z?1:0),E=this._iconProgramOptions;E.id=V,E.dd=O,E.sdf=z;var A=I.getProgram(4,M,E);if(f.bindProgram(A),z){var F=t.getPaintValue("icon-halo-color",v),L=t.getPaintValue("icon-halo-width",v);A.setUniform4f("u_outlineColor",F[0],F[1],F[2],F[3]),A.setUniform1f("u_outlineSize",L)}A.setUniformMatrix3fv("u_displayViewMat3",0===w?p.displayViewMat3:p.displayMat3),A.setUniformMatrix3fv("u_displayMat3",1===D?p.displayMat3:p.displayViewMat3),A.setUniform2fv("u_iconTranslation",S),A.setUniform1f("u_depth",t.z),A.setUniform1f("u_mapRotation",u.degToByte(p.rotation)),A.setUniform1f("u_keepUpright",0),A.setUniform1f("u_level",10*v),A.setUniform1i("u_texture",l.VTL_TEXTURE_BINDING_UNIT_SPRITES),A.setUniform1f("u_size",b),A.setUniform4fv("u_color",this._color),A.setUniform1f("u_opacity",1),A.setUniform1f("u_fadeDuration",a.FADE_DURATION/1e3),V&&A.setUniform4fv("u_id",o);for(var U=function(t){if(!t.layerData[g])return"continue";if(0===(r=t.layerData[g]).iconPerPageElementsMap.size)return"continue";r.prepareForRendering(f,I),r.updateOpacityInfo();var n=r.iconVertexArrayObject;if(i.isNone(n))return"continue";f.bindVAO(n),A.setUniformMatrix3fv("u_dvsMat3",t.transforms.dvs),A.setUniform1f("u_time",(performance.now()-r.lastOpacityUpdate)/1e3),r.iconPerPageElementsMap.forEach((function(n,i){c._renderIconRange(e,A,n,i,t)}))},R=0,N=n;R<N.length;R++){var G;U(G=N[R])}}},t.prototype._renderIconRange=function(e,t,n,i,o){var r=e.context,a=e.spriteMosaic;this._spritesTextureSize[0]=a.getWidth(i)/4,this._spritesTextureSize[1]=a.getHeight(i)/4,t.setUniform2fv("u_mosaicSize",this._spritesTextureSize),a.bind(r,9729,i,l.VTL_TEXTURE_BINDING_UNIT_SPRITES),r.setStencilTestEnabled(!0),r.setStencilFunction(516,255,255),r.setStencilWriteMask(0),r.drawElements(4,n[1],5125,Uint32Array.BYTES_PER_ELEMENT*n[0]),o.triangleCount+=n[1]/3},t.prototype._drawText=function(e,t,n,r){for(var c,f=this,v=e.context,_=e.displayLevel,m=e.drawPhase,p=e.glyphMosaic,g=e.painter,h=e.pixelRatio,x=e.state,y=e.styleLayerId,b=!1,T=0,C=n;T<C.length;T++)if((q=C[T]).layerData[y]&&(c=q.layerData[y]).glyphPerPageElementsMap.size>0){b=!0;break}if(b){var S=t.getLayoutValue("text-rotation-alignment",_);2===S&&(S=1===t.getLayoutValue("symbol-placement",_)?0:1);var D=0===S,I=t.getLayoutValue("text-keep-upright",_)&&D,P=m===s.WGLDrawPhase.HITTEST,w=.8*3/h,z=t.hasDataDrivenTextSize?1:t.getLayoutValue("text-size",_),O=t.hasDataDrivenTextColor?d:t.getPaintValue("text-color",_),V=t.hasDataDrivenTextOpacity?1:t.getPaintValue("text-opacity",_),M=t.getPaintValue("text-halo-color",_),E=t.getPaintValue("text-halo-width",_),A=3*t.getPaintValue("text-halo-blur",_),F=3*E,L=g.getVectorTileProgramCach(),U=O[3]*V;this._sdfColor[0]=U*O[0],this._sdfColor[1]=U*O[1],this._sdfColor[2]=U*O[2],this._sdfColor[3]=U;var R=M[3]*V;this._haloColor[0]=R*M[0],this._haloColor[1]=R*M[1],this._haloColor[2]=R*M[2],this._haloColor[3]=R,this._glyphTextureSize||(this._glyphTextureSize=o.vec2f32.fromValues(p.width/4,p.height/4));var N=t.getPaintValue("text-translate",_),G=t.getPaintValue("text-translate-anchor",_),B=t.hasDataDrivenText,k=(P?1:0)<<1|(B?1:0),j=this._sdfProgramOptions;j.id=P,j.dd=B;var W=L.getProgram(6,k,j);v.bindProgram(W),W.setUniformMatrix3fv("u_displayViewMat3",0===S?x.displayViewMat3:x.displayMat3),W.setUniformMatrix3fv("u_displayMat3",1===G?x.displayMat3:x.displayViewMat3),W.setUniform2fv("u_textTranslation",N),W.setUniform1f("u_depth",t.z+1/65536),W.setUniform2fv("u_mosaicSize",this._glyphTextureSize),W.setUniform1f("u_mapRotation",u.degToByte(x.rotation)),W.setUniform1f("u_keepUpright",I?1:0),W.setUniform1f("u_level",10*_),W.setUniform1i("u_texture",l.VTL_TEXTURE_BINDING_UNIT_GLYPHS),W.setUniform1f("u_size",z),W.setUniform1f("u_antialiasingWidth",w),W.setUniform1f("u_opacity",1),W.setUniform1f("u_fadeDuration",a.FADE_DURATION/1e3),P&&W.setUniform4fv("u_id",r);for(var H=function(e){if(!e.layerData[y])return"continue";if(0===(c=e.layerData[y]).glyphPerPageElementsMap.size)return"continue";c.prepareForRendering(v,L),c.updateOpacityInfo();var t=c.textVertexArrayObject;if(i.isNone(t))return"continue";v.bindVAO(t),W.setUniformMatrix3fv("u_dvsMat3",e.transforms.dvs),v.setStencilTestEnabled(!0),v.setStencilFunction(516,255,255),v.setStencilWriteMask(0);var n=(performance.now()-c.lastOpacityUpdate)/1e3;W.setUniform1f("u_time",n),c.glyphPerPageElementsMap.forEach((function(t,n){f._renderGlyphRange(v,t,n,p,W,M[3],E,A,F,e)}))},Z=0,Y=n;Z<Y.length;Z++){var q;H(q=Y[Z])}}},t.prototype._renderGlyphRange=function(e,t,n,i,o,r,a,s,u,c){i.bind(e,9729,n,l.VTL_TEXTURE_BINDING_UNIT_GLYPHS),r>0&&a>0&&(o.setUniform4fv("u_color",this._haloColor),o.setUniform1f("u_halo",1),o.setUniform1f("u_edgeDistance",u),o.setUniform1f("u_edgeBlur",s),e.drawElements(4,t[1],5125,Uint32Array.BYTES_PER_ELEMENT*t[0]),c.triangleCount+=t[1]/3),this._sdfColor[3]>0&&(o.setUniform4fv("u_color",this._sdfColor),o.setUniform1f("u_halo",0),o.setUniform1f("u_edgeDistance",0),o.setUniform1f("u_edgeBlur",0),e.drawElements(4,t[1],5125,Uint32Array.BYTES_PER_ELEMENT*t[0]),c.triangleCount+=t[1]/3)},t}(f.default);t.WGLBrushVTLSymbol=v}).apply(null,i))||(e.exports=o)}}]);